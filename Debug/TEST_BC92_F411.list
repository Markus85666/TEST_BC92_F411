
TEST_BC92_F411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000730c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  080074ac  080074ac  000174ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076a8  080076a8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080076a8  080076a8  000176a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076b0  080076b0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076b0  080076b0  000176b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076b4  080076b4  000176b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080076b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e3c  20000074  0800772c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004eb0  0800772c  00024eb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fadb  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d48  00000000  00000000  0003fb7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001550  00000000  00000000  000438c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013f8  00000000  00000000  00044e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004ca6  00000000  00000000  00046210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a262  00000000  00000000  0004aeb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a264  00000000  00000000  00065118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ff37c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f70  00000000  00000000  000ff3d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007494 	.word	0x08007494

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08007494 	.word	0x08007494

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fc0c 	bl	8000cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f844 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f8fc 	bl	80006e0 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e8:	f000 f8d2 	bl	8000690 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004ec:	f000 f8a6 	bl	800063c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f0:	f003 fa8c 	bl	8003a0c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  OS_MainQueueHandle = osMessageQueueNew (16, sizeof(osQItem_t), &OS_MainQueue_attributes);
 80004f4:	4a13      	ldr	r2, [pc, #76]	; (8000544 <main+0x6c>)
 80004f6:	2110      	movs	r1, #16
 80004f8:	2010      	movs	r0, #16
 80004fa:	f003 fb7e 	bl	8003bfa <osMessageQueueNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a11      	ldr	r2, [pc, #68]	; (8000548 <main+0x70>)
 8000502:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000504:	4a11      	ldr	r2, [pc, #68]	; (800054c <main+0x74>)
 8000506:	2100      	movs	r1, #0
 8000508:	4811      	ldr	r0, [pc, #68]	; (8000550 <main+0x78>)
 800050a:	f003 fac9 	bl	8003aa0 <osThreadNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a10      	ldr	r2, [pc, #64]	; (8000554 <main+0x7c>)
 8000512:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  if( (OS_MainTaskHandle = osThreadNew(OS_MainTask, NULL, &OS_MainTask_attributes)) )
 8000514:	4a10      	ldr	r2, [pc, #64]	; (8000558 <main+0x80>)
 8000516:	2100      	movs	r1, #0
 8000518:	4810      	ldr	r0, [pc, #64]	; (800055c <main+0x84>)
 800051a:	f003 fac1 	bl	8003aa0 <osThreadNew>
 800051e:	4603      	mov	r3, r0
 8000520:	4a0f      	ldr	r2, [pc, #60]	; (8000560 <main+0x88>)
 8000522:	6013      	str	r3, [r2, #0]
 8000524:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <main+0x88>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d005      	beq.n	8000538 <main+0x60>
  {
	  printf("\nOS_MainTaskHandle has been successfully initialized!\n");
 800052c:	480d      	ldr	r0, [pc, #52]	; (8000564 <main+0x8c>)
 800052e:	f006 fc41 	bl	8006db4 <puts>
	  osKernelStart();
 8000532:	f003 fa8f 	bl	8003a54 <osKernelStart>
 8000536:	e002      	b.n	800053e <main+0x66>
  }
  else
  {
	  printf("\nERROR: OS_MainTask creation failed!\n");
 8000538:	480b      	ldr	r0, [pc, #44]	; (8000568 <main+0x90>)
 800053a:	f006 fc3b 	bl	8006db4 <puts>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800053e:	f003 fa89 	bl	8003a54 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000542:	e7fe      	b.n	8000542 <main+0x6a>
 8000544:	080075e8 	.word	0x080075e8
 8000548:	20004ae4 	.word	0x20004ae4
 800054c:	080075c4 	.word	0x080075c4
 8000550:	080007bd 	.word	0x080007bd
 8000554:	20004a80 	.word	0x20004a80
 8000558:	08007600 	.word	0x08007600
 800055c:	080066d9 	.word	0x080066d9
 8000560:	20004ae8 	.word	0x20004ae8
 8000564:	080074d4 	.word	0x080074d4
 8000568:	0800750c 	.word	0x0800750c

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	; 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0320 	add.w	r3, r7, #32
 8000576:	2230      	movs	r2, #48	; 0x30
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f006 fb49 	bl	8006c12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	4b27      	ldr	r3, [pc, #156]	; (8000634 <SystemClock_Config+0xc8>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	4a26      	ldr	r2, [pc, #152]	; (8000634 <SystemClock_Config+0xc8>)
 800059a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059e:	6413      	str	r3, [r2, #64]	; 0x40
 80005a0:	4b24      	ldr	r3, [pc, #144]	; (8000634 <SystemClock_Config+0xc8>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ac:	2300      	movs	r3, #0
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	4b21      	ldr	r3, [pc, #132]	; (8000638 <SystemClock_Config+0xcc>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a20      	ldr	r2, [pc, #128]	; (8000638 <SystemClock_Config+0xcc>)
 80005b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b1e      	ldr	r3, [pc, #120]	; (8000638 <SystemClock_Config+0xcc>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c8:	2302      	movs	r3, #2
 80005ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005cc:	2301      	movs	r3, #1
 80005ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d0:	2310      	movs	r3, #16
 80005d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d4:	2302      	movs	r3, #2
 80005d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d8:	2300      	movs	r3, #0
 80005da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005dc:	2308      	movs	r3, #8
 80005de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005e0:	2348      	movs	r3, #72	; 0x48
 80005e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80005e4:	2306      	movs	r3, #6
 80005e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005e8:	2304      	movs	r3, #4
 80005ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ec:	f107 0320 	add.w	r3, r7, #32
 80005f0:	4618      	mov	r0, r3
 80005f2:	f001 fa45 	bl	8001a80 <HAL_RCC_OscConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005fc:	f000 f8f8 	bl	80007f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000600:	230f      	movs	r3, #15
 8000602:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000604:	2302      	movs	r3, #2
 8000606:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800060c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000610:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	2100      	movs	r1, #0
 800061c:	4618      	mov	r0, r3
 800061e:	f001 fca7 	bl	8001f70 <HAL_RCC_ClockConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000628:	f000 f8e2 	bl	80007f0 <Error_Handler>
  }
}
 800062c:	bf00      	nop
 800062e:	3750      	adds	r7, #80	; 0x50
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000640:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000642:	4a12      	ldr	r2, [pc, #72]	; (800068c <MX_USART2_UART_Init+0x50>)
 8000644:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000646:	4b10      	ldr	r3, [pc, #64]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000648:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800064c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800065a:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000662:	220c      	movs	r2, #12
 8000664:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000666:	4b08      	ldr	r3, [pc, #32]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000674:	f002 f92a 	bl	80028cc <HAL_UART_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800067e:	f000 f8b7 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20004b4c 	.word	0x20004b4c
 800068c:	40004400 	.word	0x40004400

08000690 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <MX_DMA_Init+0x4c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a0f      	ldr	r2, [pc, #60]	; (80006dc <MX_DMA_Init+0x4c>)
 80006a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <MX_DMA_Init+0x4c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2105      	movs	r1, #5
 80006b6:	2010      	movs	r0, #16
 80006b8:	f000 fc18 	bl	8000eec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80006bc:	2010      	movs	r0, #16
 80006be:	f000 fc31 	bl	8000f24 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2105      	movs	r1, #5
 80006c6:	2011      	movs	r0, #17
 80006c8:	f000 fc10 	bl	8000eec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80006cc:	2011      	movs	r0, #17
 80006ce:	f000 fc29 	bl	8000f24 <HAL_NVIC_EnableIRQ>

}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	; 0x28
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
 80006fa:	4b2d      	ldr	r3, [pc, #180]	; (80007b0 <MX_GPIO_Init+0xd0>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a2c      	ldr	r2, [pc, #176]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b2a      	ldr	r3, [pc, #168]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	4b26      	ldr	r3, [pc, #152]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a25      	ldr	r2, [pc, #148]	; (80007b0 <MX_GPIO_Init+0xd0>)
 800071c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b23      	ldr	r3, [pc, #140]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a1e      	ldr	r2, [pc, #120]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a17      	ldr	r2, [pc, #92]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <MX_GPIO_Init+0xd0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RESET_N_Pin|PWRKEY_N_Pin|PSM_EINT_N_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	21e0      	movs	r1, #224	; 0xe0
 800076a:	4812      	ldr	r0, [pc, #72]	; (80007b4 <MX_GPIO_Init+0xd4>)
 800076c:	f001 f96e 	bl	8001a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000770:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000776:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800077a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	4619      	mov	r1, r3
 8000786:	480c      	ldr	r0, [pc, #48]	; (80007b8 <MX_GPIO_Init+0xd8>)
 8000788:	f000 ffdc 	bl	8001744 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_N_Pin PWRKEY_N_Pin PSM_EINT_N_Pin */
  GPIO_InitStruct.Pin = RESET_N_Pin|PWRKEY_N_Pin|PSM_EINT_N_Pin;
 800078c:	23e0      	movs	r3, #224	; 0xe0
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000790:	2301      	movs	r3, #1
 8000792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	4619      	mov	r1, r3
 80007a2:	4804      	ldr	r0, [pc, #16]	; (80007b4 <MX_GPIO_Init+0xd4>)
 80007a4:	f000 ffce 	bl	8001744 <HAL_GPIO_Init>

}
 80007a8:	bf00      	nop
 80007aa:	3728      	adds	r7, #40	; 0x28
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40020000 	.word	0x40020000
 80007b8:	40020800 	.word	0x40020800

080007bc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007c4:	2001      	movs	r0, #1
 80007c6:	f003 f9fd 	bl	8003bc4 <osDelay>
 80007ca:	e7fb      	b.n	80007c4 <StartDefaultTask+0x8>

080007cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a04      	ldr	r2, [pc, #16]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d101      	bne.n	80007e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007de:	f000 faad 	bl	8000d3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40014800 	.word	0x40014800

080007f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f4:	b672      	cpsid	i
}
 80007f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <Error_Handler+0x8>
	...

080007fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	4b12      	ldr	r3, [pc, #72]	; (8000850 <HAL_MspInit+0x54>)
 8000808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080a:	4a11      	ldr	r2, [pc, #68]	; (8000850 <HAL_MspInit+0x54>)
 800080c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000810:	6453      	str	r3, [r2, #68]	; 0x44
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <HAL_MspInit+0x54>)
 8000814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	603b      	str	r3, [r7, #0]
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <HAL_MspInit+0x54>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000826:	4a0a      	ldr	r2, [pc, #40]	; (8000850 <HAL_MspInit+0x54>)
 8000828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800082c:	6413      	str	r3, [r2, #64]	; 0x40
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <HAL_MspInit+0x54>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	210f      	movs	r1, #15
 800083e:	f06f 0001 	mvn.w	r0, #1
 8000842:	f000 fb53 	bl	8000eec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800

08000854 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	; 0x28
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a4c      	ldr	r2, [pc, #304]	; (80009a4 <HAL_UART_MspInit+0x150>)
 8000872:	4293      	cmp	r3, r2
 8000874:	f040 8091 	bne.w	800099a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	4b4a      	ldr	r3, [pc, #296]	; (80009a8 <HAL_UART_MspInit+0x154>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000880:	4a49      	ldr	r2, [pc, #292]	; (80009a8 <HAL_UART_MspInit+0x154>)
 8000882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000886:	6413      	str	r3, [r2, #64]	; 0x40
 8000888:	4b47      	ldr	r3, [pc, #284]	; (80009a8 <HAL_UART_MspInit+0x154>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000890:	613b      	str	r3, [r7, #16]
 8000892:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	4b43      	ldr	r3, [pc, #268]	; (80009a8 <HAL_UART_MspInit+0x154>)
 800089a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089c:	4a42      	ldr	r2, [pc, #264]	; (80009a8 <HAL_UART_MspInit+0x154>)
 800089e:	f043 0301 	orr.w	r3, r3, #1
 80008a2:	6313      	str	r3, [r2, #48]	; 0x30
 80008a4:	4b40      	ldr	r3, [pc, #256]	; (80009a8 <HAL_UART_MspInit+0x154>)
 80008a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a8:	f003 0301 	and.w	r3, r3, #1
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = UART_MCU_TX_Pin|UART_MCU_RX_Pin;
 80008b0:	230c      	movs	r3, #12
 80008b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b4:	2302      	movs	r3, #2
 80008b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008bc:	2303      	movs	r3, #3
 80008be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008c0:	2307      	movs	r3, #7
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4619      	mov	r1, r3
 80008ca:	4838      	ldr	r0, [pc, #224]	; (80009ac <HAL_UART_MspInit+0x158>)
 80008cc:	f000 ff3a 	bl	8001744 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80008d0:	4b37      	ldr	r3, [pc, #220]	; (80009b0 <HAL_UART_MspInit+0x15c>)
 80008d2:	4a38      	ldr	r2, [pc, #224]	; (80009b4 <HAL_UART_MspInit+0x160>)
 80008d4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80008d6:	4b36      	ldr	r3, [pc, #216]	; (80009b0 <HAL_UART_MspInit+0x15c>)
 80008d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008dc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008de:	4b34      	ldr	r3, [pc, #208]	; (80009b0 <HAL_UART_MspInit+0x15c>)
 80008e0:	2240      	movs	r2, #64	; 0x40
 80008e2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008e4:	4b32      	ldr	r3, [pc, #200]	; (80009b0 <HAL_UART_MspInit+0x15c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008ea:	4b31      	ldr	r3, [pc, #196]	; (80009b0 <HAL_UART_MspInit+0x15c>)
 80008ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008f0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008f2:	4b2f      	ldr	r3, [pc, #188]	; (80009b0 <HAL_UART_MspInit+0x15c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008f8:	4b2d      	ldr	r3, [pc, #180]	; (80009b0 <HAL_UART_MspInit+0x15c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80008fe:	4b2c      	ldr	r3, [pc, #176]	; (80009b0 <HAL_UART_MspInit+0x15c>)
 8000900:	2200      	movs	r2, #0
 8000902:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000904:	4b2a      	ldr	r3, [pc, #168]	; (80009b0 <HAL_UART_MspInit+0x15c>)
 8000906:	2200      	movs	r2, #0
 8000908:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800090a:	4b29      	ldr	r3, [pc, #164]	; (80009b0 <HAL_UART_MspInit+0x15c>)
 800090c:	2200      	movs	r2, #0
 800090e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000910:	4827      	ldr	r0, [pc, #156]	; (80009b0 <HAL_UART_MspInit+0x15c>)
 8000912:	f000 fb15 	bl	8000f40 <HAL_DMA_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800091c:	f7ff ff68 	bl	80007f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4a23      	ldr	r2, [pc, #140]	; (80009b0 <HAL_UART_MspInit+0x15c>)
 8000924:	635a      	str	r2, [r3, #52]	; 0x34
 8000926:	4a22      	ldr	r2, [pc, #136]	; (80009b0 <HAL_UART_MspInit+0x15c>)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800092c:	4b22      	ldr	r3, [pc, #136]	; (80009b8 <HAL_UART_MspInit+0x164>)
 800092e:	4a23      	ldr	r2, [pc, #140]	; (80009bc <HAL_UART_MspInit+0x168>)
 8000930:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000932:	4b21      	ldr	r3, [pc, #132]	; (80009b8 <HAL_UART_MspInit+0x164>)
 8000934:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000938:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800093a:	4b1f      	ldr	r3, [pc, #124]	; (80009b8 <HAL_UART_MspInit+0x164>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000940:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <HAL_UART_MspInit+0x164>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000946:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <HAL_UART_MspInit+0x164>)
 8000948:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800094c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800094e:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <HAL_UART_MspInit+0x164>)
 8000950:	2200      	movs	r2, #0
 8000952:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000954:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <HAL_UART_MspInit+0x164>)
 8000956:	2200      	movs	r2, #0
 8000958:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800095a:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <HAL_UART_MspInit+0x164>)
 800095c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000960:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <HAL_UART_MspInit+0x164>)
 8000964:	2200      	movs	r2, #0
 8000966:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000968:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <HAL_UART_MspInit+0x164>)
 800096a:	2200      	movs	r2, #0
 800096c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800096e:	4812      	ldr	r0, [pc, #72]	; (80009b8 <HAL_UART_MspInit+0x164>)
 8000970:	f000 fae6 	bl	8000f40 <HAL_DMA_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800097a:	f7ff ff39 	bl	80007f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4a0d      	ldr	r2, [pc, #52]	; (80009b8 <HAL_UART_MspInit+0x164>)
 8000982:	639a      	str	r2, [r3, #56]	; 0x38
 8000984:	4a0c      	ldr	r2, [pc, #48]	; (80009b8 <HAL_UART_MspInit+0x164>)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	2105      	movs	r1, #5
 800098e:	2026      	movs	r0, #38	; 0x26
 8000990:	f000 faac 	bl	8000eec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000994:	2026      	movs	r0, #38	; 0x26
 8000996:	f000 fac5 	bl	8000f24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800099a:	bf00      	nop
 800099c:	3728      	adds	r7, #40	; 0x28
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40004400 	.word	0x40004400
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40020000 	.word	0x40020000
 80009b0:	20004aec 	.word	0x20004aec
 80009b4:	400260a0 	.word	0x400260a0
 80009b8:	20004a84 	.word	0x20004a84
 80009bc:	40026088 	.word	0x40026088

080009c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08c      	sub	sp, #48	; 0x30
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 80009d0:	2200      	movs	r2, #0
 80009d2:	6879      	ldr	r1, [r7, #4]
 80009d4:	201a      	movs	r0, #26
 80009d6:	f000 fa89 	bl	8000eec <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80009da:	201a      	movs	r0, #26
 80009dc:	f000 faa2 	bl	8000f24 <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 80009e0:	2300      	movs	r3, #0
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	4b1e      	ldr	r3, [pc, #120]	; (8000a60 <HAL_InitTick+0xa0>)
 80009e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e8:	4a1d      	ldr	r2, [pc, #116]	; (8000a60 <HAL_InitTick+0xa0>)
 80009ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009ee:	6453      	str	r3, [r2, #68]	; 0x44
 80009f0:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <HAL_InitTick+0xa0>)
 80009f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009fc:	f107 0210 	add.w	r2, r7, #16
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	4611      	mov	r1, r2
 8000a06:	4618      	mov	r0, r3
 8000a08:	f001 fcae 	bl	8002368 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a0c:	f001 fc98 	bl	8002340 <HAL_RCC_GetPCLK2Freq>
 8000a10:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a14:	4a13      	ldr	r2, [pc, #76]	; (8000a64 <HAL_InitTick+0xa4>)
 8000a16:	fba2 2303 	umull	r2, r3, r2, r3
 8000a1a:	0c9b      	lsrs	r3, r3, #18
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <HAL_InitTick+0xa8>)
 8000a22:	4a12      	ldr	r2, [pc, #72]	; (8000a6c <HAL_InitTick+0xac>)
 8000a24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <HAL_InitTick+0xa8>)
 8000a28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a2c:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000a2e:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <HAL_InitTick+0xa8>)
 8000a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a32:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <HAL_InitTick+0xa8>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <HAL_InitTick+0xa8>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8000a40:	4809      	ldr	r0, [pc, #36]	; (8000a68 <HAL_InitTick+0xa8>)
 8000a42:	f001 fcc3 	bl	80023cc <HAL_TIM_Base_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d104      	bne.n	8000a56 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8000a4c:	4806      	ldr	r0, [pc, #24]	; (8000a68 <HAL_InitTick+0xa8>)
 8000a4e:	f001 fd17 	bl	8002480 <HAL_TIM_Base_Start_IT>
 8000a52:	4603      	mov	r3, r0
 8000a54:	e000      	b.n	8000a58 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3730      	adds	r7, #48	; 0x30
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40023800 	.word	0x40023800
 8000a64:	431bde83 	.word	0x431bde83
 8000a68:	20004b90 	.word	0x20004b90
 8000a6c:	40014800 	.word	0x40014800

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <NMI_Handler+0x4>

08000a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <HardFault_Handler+0x4>

08000a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <MemManage_Handler+0x4>

08000a82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <BusFault_Handler+0x4>

08000a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <UsageFault_Handler+0x4>

08000a8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000aa0:	4802      	ldr	r0, [pc, #8]	; (8000aac <DMA1_Stream5_IRQHandler+0x10>)
 8000aa2:	f000 fbe5 	bl	8001270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20004a84 	.word	0x20004a84

08000ab0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000ab4:	4802      	ldr	r0, [pc, #8]	; (8000ac0 <DMA1_Stream6_IRQHandler+0x10>)
 8000ab6:	f000 fbdb 	bl	8001270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20004aec 	.word	0x20004aec

08000ac4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000ac8:	4802      	ldr	r0, [pc, #8]	; (8000ad4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000aca:	f001 fd3b 	bl	8002544 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20004b90 	.word	0x20004b90

08000ad8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000adc:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <USART2_IRQHandler+0x10>)
 8000ade:	f001 ff73 	bl	80029c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20004b4c 	.word	0x20004b4c

08000aec <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000af4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000af8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d013      	beq.n	8000b2c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000b04:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b08:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000b0c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d00b      	beq.n	8000b2c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000b14:	e000      	b.n	8000b18 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000b16:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000b18:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d0f9      	beq.n	8000b16 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000b22:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	b2d2      	uxtb	r2, r2
 8000b2a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000b2c:	687b      	ldr	r3, [r7, #4]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b086      	sub	sp, #24
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	60f8      	str	r0, [r7, #12]
 8000b42:	60b9      	str	r1, [r7, #8]
 8000b44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
 8000b4a:	e00a      	b.n	8000b62 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b4c:	f3af 8000 	nop.w
 8000b50:	4601      	mov	r1, r0
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	1c5a      	adds	r2, r3, #1
 8000b56:	60ba      	str	r2, [r7, #8]
 8000b58:	b2ca      	uxtb	r2, r1
 8000b5a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	617b      	str	r3, [r7, #20]
 8000b62:	697a      	ldr	r2, [r7, #20]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	dbf0      	blt.n	8000b4c <_read+0x12>
	}

return len;
 8000b6a:	687b      	ldr	r3, [r7, #4]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3718      	adds	r7, #24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	e009      	b.n	8000b9a <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	1c5a      	adds	r2, r3, #1
 8000b8a:	60ba      	str	r2, [r7, #8]
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff ffac 	bl	8000aec <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	3301      	adds	r3, #1
 8000b98:	617b      	str	r3, [r7, #20]
 8000b9a:	697a      	ldr	r2, [r7, #20]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	dbf1      	blt.n	8000b86 <_write+0x12>
	}
	return len;
 8000ba2:	687b      	ldr	r3, [r7, #4]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3718      	adds	r7, #24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <_close>:

int _close(int file)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
	return -1;
 8000bb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bd4:	605a      	str	r2, [r3, #4]
	return 0;
 8000bd6:	2300      	movs	r3, #0
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <_isatty>:

int _isatty(int file)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	return 1;
 8000bec:	2301      	movs	r3, #1
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	b085      	sub	sp, #20
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	60f8      	str	r0, [r7, #12]
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
	return 0;
 8000c06:	2300      	movs	r3, #0
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c1c:	4a14      	ldr	r2, [pc, #80]	; (8000c70 <_sbrk+0x5c>)
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <_sbrk+0x60>)
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c28:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d102      	bne.n	8000c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <_sbrk+0x64>)
 8000c32:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <_sbrk+0x68>)
 8000c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d207      	bcs.n	8000c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c44:	f005 feb4 	bl	80069b0 <__errno>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c52:	e009      	b.n	8000c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <_sbrk+0x64>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5a:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <_sbrk+0x64>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <_sbrk+0x64>)
 8000c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c66:	68fb      	ldr	r3, [r7, #12]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3718      	adds	r7, #24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20020000 	.word	0x20020000
 8000c74:	00000400 	.word	0x00000400
 8000c78:	20000090 	.word	0x20000090
 8000c7c:	20004eb0 	.word	0x20004eb0

08000c80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <SystemInit+0x20>)
 8000c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c8a:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <SystemInit+0x20>)
 8000c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ca4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca8:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000caa:	490e      	ldr	r1, [pc, #56]	; (8000ce4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cac:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb0:	e002      	b.n	8000cb8 <LoopCopyDataInit>

08000cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb6:	3304      	adds	r3, #4

08000cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cbc:	d3f9      	bcc.n	8000cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	; (8000cec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cc0:	4c0b      	ldr	r4, [pc, #44]	; (8000cf0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc4:	e001      	b.n	8000cca <LoopFillZerobss>

08000cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc8:	3204      	adds	r2, #4

08000cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ccc:	d3fb      	bcc.n	8000cc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cce:	f7ff ffd7 	bl	8000c80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cd2:	f005 ff69 	bl	8006ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cd6:	f7ff fbff 	bl	80004d8 <main>
  bx  lr    
 8000cda:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ce8:	080076b8 	.word	0x080076b8
  ldr r2, =_sbss
 8000cec:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000cf0:	20004eb0 	.word	0x20004eb0

08000cf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC_IRQHandler>
	...

08000cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <HAL_Init+0x40>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0d      	ldr	r2, [pc, #52]	; (8000d38 <HAL_Init+0x40>)
 8000d02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <HAL_Init+0x40>)
 8000d0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a07      	ldr	r2, [pc, #28]	; (8000d38 <HAL_Init+0x40>)
 8000d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d20:	2003      	movs	r0, #3
 8000d22:	f000 f8d8 	bl	8000ed6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d26:	200f      	movs	r0, #15
 8000d28:	f7ff fe4a 	bl	80009c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d2c:	f7ff fd66 	bl	80007fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40023c00 	.word	0x40023c00

08000d3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_IncTick+0x20>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_IncTick+0x24>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <HAL_IncTick+0x24>)
 8000d4e:	6013      	str	r3, [r2, #0]
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	20004bd8 	.word	0x20004bd8

08000d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return uwTick;
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <HAL_GetTick+0x14>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	20004bd8 	.word	0x20004bd8

08000d7c <__NVIC_SetPriorityGrouping>:
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dae:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	60d3      	str	r3, [r2, #12]
}
 8000db4:	bf00      	nop
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <__NVIC_GetPriorityGrouping>:
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc8:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <__NVIC_GetPriorityGrouping+0x18>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	f003 0307 	and.w	r3, r3, #7
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <__NVIC_EnableIRQ>:
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	db0b      	blt.n	8000e0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	f003 021f 	and.w	r2, r3, #31
 8000df8:	4907      	ldr	r1, [pc, #28]	; (8000e18 <__NVIC_EnableIRQ+0x38>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	095b      	lsrs	r3, r3, #5
 8000e00:	2001      	movs	r0, #1
 8000e02:	fa00 f202 	lsl.w	r2, r0, r2
 8000e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000e100 	.word	0xe000e100

08000e1c <__NVIC_SetPriority>:
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	6039      	str	r1, [r7, #0]
 8000e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	db0a      	blt.n	8000e46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	490c      	ldr	r1, [pc, #48]	; (8000e68 <__NVIC_SetPriority+0x4c>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	0112      	lsls	r2, r2, #4
 8000e3c:	b2d2      	uxtb	r2, r2
 8000e3e:	440b      	add	r3, r1
 8000e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e44:	e00a      	b.n	8000e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	4908      	ldr	r1, [pc, #32]	; (8000e6c <__NVIC_SetPriority+0x50>)
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	f003 030f 	and.w	r3, r3, #15
 8000e52:	3b04      	subs	r3, #4
 8000e54:	0112      	lsls	r2, r2, #4
 8000e56:	b2d2      	uxtb	r2, r2
 8000e58:	440b      	add	r3, r1
 8000e5a:	761a      	strb	r2, [r3, #24]
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000e100 	.word	0xe000e100
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <NVIC_EncodePriority>:
{
 8000e70:	b480      	push	{r7}
 8000e72:	b089      	sub	sp, #36	; 0x24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	f1c3 0307 	rsb	r3, r3, #7
 8000e8a:	2b04      	cmp	r3, #4
 8000e8c:	bf28      	it	cs
 8000e8e:	2304      	movcs	r3, #4
 8000e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3304      	adds	r3, #4
 8000e96:	2b06      	cmp	r3, #6
 8000e98:	d902      	bls.n	8000ea0 <NVIC_EncodePriority+0x30>
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3b03      	subs	r3, #3
 8000e9e:	e000      	b.n	8000ea2 <NVIC_EncodePriority+0x32>
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43da      	mvns	r2, r3
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec2:	43d9      	mvns	r1, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	4313      	orrs	r3, r2
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3724      	adds	r7, #36	; 0x24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff ff4c 	bl	8000d7c <__NVIC_SetPriorityGrouping>
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
 8000ef8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000efe:	f7ff ff61 	bl	8000dc4 <__NVIC_GetPriorityGrouping>
 8000f02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	68b9      	ldr	r1, [r7, #8]
 8000f08:	6978      	ldr	r0, [r7, #20]
 8000f0a:	f7ff ffb1 	bl	8000e70 <NVIC_EncodePriority>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f14:	4611      	mov	r1, r2
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ff80 	bl	8000e1c <__NVIC_SetPriority>
}
 8000f1c:	bf00      	nop
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff ff54 	bl	8000de0 <__NVIC_EnableIRQ>
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f4c:	f7ff ff0a 	bl	8000d64 <HAL_GetTick>
 8000f50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d101      	bne.n	8000f5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e099      	b.n	8001090 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2202      	movs	r2, #2
 8000f60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f022 0201 	bic.w	r2, r2, #1
 8000f7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f7c:	e00f      	b.n	8000f9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f7e:	f7ff fef1 	bl	8000d64 <HAL_GetTick>
 8000f82:	4602      	mov	r2, r0
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	2b05      	cmp	r3, #5
 8000f8a:	d908      	bls.n	8000f9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2220      	movs	r2, #32
 8000f90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2203      	movs	r2, #3
 8000f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e078      	b.n	8001090 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1e8      	bne.n	8000f7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000fb4:	697a      	ldr	r2, [r7, #20]
 8000fb6:	4b38      	ldr	r3, [pc, #224]	; (8001098 <HAL_DMA_Init+0x158>)
 8000fb8:	4013      	ands	r3, r2
 8000fba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685a      	ldr	r2, [r3, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	691b      	ldr	r3, [r3, #16]
 8000fd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fe2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6a1b      	ldr	r3, [r3, #32]
 8000fe8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff4:	2b04      	cmp	r3, #4
 8000ff6:	d107      	bne.n	8001008 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001000:	4313      	orrs	r3, r2
 8001002:	697a      	ldr	r2, [r7, #20]
 8001004:	4313      	orrs	r3, r2
 8001006:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	697a      	ldr	r2, [r7, #20]
 800100e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	f023 0307 	bic.w	r3, r3, #7
 800101e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001024:	697a      	ldr	r2, [r7, #20]
 8001026:	4313      	orrs	r3, r2
 8001028:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102e:	2b04      	cmp	r3, #4
 8001030:	d117      	bne.n	8001062 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	4313      	orrs	r3, r2
 800103a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001040:	2b00      	cmp	r3, #0
 8001042:	d00e      	beq.n	8001062 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f000 fb01 	bl	800164c <DMA_CheckFifoParam>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d008      	beq.n	8001062 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2240      	movs	r2, #64	; 0x40
 8001054:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2201      	movs	r2, #1
 800105a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800105e:	2301      	movs	r3, #1
 8001060:	e016      	b.n	8001090 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 fab8 	bl	80015e0 <DMA_CalcBaseAndBitshift>
 8001070:	4603      	mov	r3, r0
 8001072:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001078:	223f      	movs	r2, #63	; 0x3f
 800107a:	409a      	lsls	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2201      	movs	r2, #1
 800108a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800108e:	2300      	movs	r3, #0
}
 8001090:	4618      	mov	r0, r3
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	f010803f 	.word	0xf010803f

0800109c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
 80010a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010aa:	2300      	movs	r3, #0
 80010ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d101      	bne.n	80010c2 <HAL_DMA_Start_IT+0x26>
 80010be:	2302      	movs	r3, #2
 80010c0:	e040      	b.n	8001144 <HAL_DMA_Start_IT+0xa8>
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2201      	movs	r2, #1
 80010c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d12f      	bne.n	8001136 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	2202      	movs	r2, #2
 80010da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2200      	movs	r2, #0
 80010e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	68b9      	ldr	r1, [r7, #8]
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	f000 fa4a 	bl	8001584 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010f4:	223f      	movs	r2, #63	; 0x3f
 80010f6:	409a      	lsls	r2, r3
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f042 0216 	orr.w	r2, r2, #22
 800110a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	2b00      	cmp	r3, #0
 8001112:	d007      	beq.n	8001124 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f042 0208 	orr.w	r2, r2, #8
 8001122:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f042 0201 	orr.w	r2, r2, #1
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	e005      	b.n	8001142 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800113e:	2302      	movs	r3, #2
 8001140:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001142:	7dfb      	ldrb	r3, [r7, #23]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001158:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800115a:	f7ff fe03 	bl	8000d64 <HAL_GetTick>
 800115e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d008      	beq.n	800117e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2280      	movs	r2, #128	; 0x80
 8001170:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e052      	b.n	8001224 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f022 0216 	bic.w	r2, r2, #22
 800118c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	695a      	ldr	r2, [r3, #20]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800119c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d103      	bne.n	80011ae <HAL_DMA_Abort+0x62>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d007      	beq.n	80011be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f022 0208 	bic.w	r2, r2, #8
 80011bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f022 0201 	bic.w	r2, r2, #1
 80011cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011ce:	e013      	b.n	80011f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011d0:	f7ff fdc8 	bl	8000d64 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b05      	cmp	r3, #5
 80011dc:	d90c      	bls.n	80011f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2220      	movs	r2, #32
 80011e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2203      	movs	r2, #3
 80011e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e015      	b.n	8001224 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1e4      	bne.n	80011d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800120a:	223f      	movs	r2, #63	; 0x3f
 800120c:	409a      	lsls	r2, r3
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2201      	movs	r2, #1
 8001216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d004      	beq.n	800124a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2280      	movs	r2, #128	; 0x80
 8001244:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e00c      	b.n	8001264 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2205      	movs	r2, #5
 800124e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f022 0201 	bic.w	r2, r2, #1
 8001260:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001262:	2300      	movs	r3, #0
}
 8001264:	4618      	mov	r0, r3
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001278:	2300      	movs	r3, #0
 800127a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800127c:	4b92      	ldr	r3, [pc, #584]	; (80014c8 <HAL_DMA_IRQHandler+0x258>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a92      	ldr	r2, [pc, #584]	; (80014cc <HAL_DMA_IRQHandler+0x25c>)
 8001282:	fba2 2303 	umull	r2, r3, r2, r3
 8001286:	0a9b      	lsrs	r3, r3, #10
 8001288:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800129a:	2208      	movs	r2, #8
 800129c:	409a      	lsls	r2, r3
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4013      	ands	r3, r2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d01a      	beq.n	80012dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0304 	and.w	r3, r3, #4
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d013      	beq.n	80012dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 0204 	bic.w	r2, r2, #4
 80012c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c8:	2208      	movs	r2, #8
 80012ca:	409a      	lsls	r2, r3
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d4:	f043 0201 	orr.w	r2, r3, #1
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012e0:	2201      	movs	r2, #1
 80012e2:	409a      	lsls	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4013      	ands	r3, r2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d012      	beq.n	8001312 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d00b      	beq.n	8001312 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012fe:	2201      	movs	r2, #1
 8001300:	409a      	lsls	r2, r3
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800130a:	f043 0202 	orr.w	r2, r3, #2
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001316:	2204      	movs	r2, #4
 8001318:	409a      	lsls	r2, r3
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4013      	ands	r3, r2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d012      	beq.n	8001348 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d00b      	beq.n	8001348 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001334:	2204      	movs	r2, #4
 8001336:	409a      	lsls	r2, r3
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001340:	f043 0204 	orr.w	r2, r3, #4
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800134c:	2210      	movs	r2, #16
 800134e:	409a      	lsls	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4013      	ands	r3, r2
 8001354:	2b00      	cmp	r3, #0
 8001356:	d043      	beq.n	80013e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0308 	and.w	r3, r3, #8
 8001362:	2b00      	cmp	r3, #0
 8001364:	d03c      	beq.n	80013e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800136a:	2210      	movs	r2, #16
 800136c:	409a      	lsls	r2, r3
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d018      	beq.n	80013b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d108      	bne.n	80013a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	2b00      	cmp	r3, #0
 8001394:	d024      	beq.n	80013e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	4798      	blx	r3
 800139e:	e01f      	b.n	80013e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d01b      	beq.n	80013e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	4798      	blx	r3
 80013b0:	e016      	b.n	80013e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d107      	bne.n	80013d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 0208 	bic.w	r2, r2, #8
 80013ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e4:	2220      	movs	r2, #32
 80013e6:	409a      	lsls	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	4013      	ands	r3, r2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 808e 	beq.w	800150e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0310 	and.w	r3, r3, #16
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 8086 	beq.w	800150e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001406:	2220      	movs	r2, #32
 8001408:	409a      	lsls	r2, r3
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b05      	cmp	r3, #5
 8001418:	d136      	bne.n	8001488 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f022 0216 	bic.w	r2, r2, #22
 8001428:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	695a      	ldr	r2, [r3, #20]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001438:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	2b00      	cmp	r3, #0
 8001440:	d103      	bne.n	800144a <HAL_DMA_IRQHandler+0x1da>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001446:	2b00      	cmp	r3, #0
 8001448:	d007      	beq.n	800145a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 0208 	bic.w	r2, r2, #8
 8001458:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800145e:	223f      	movs	r2, #63	; 0x3f
 8001460:	409a      	lsls	r2, r3
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2201      	movs	r2, #1
 800146a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800147a:	2b00      	cmp	r3, #0
 800147c:	d07d      	beq.n	800157a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	4798      	blx	r3
        }
        return;
 8001486:	e078      	b.n	800157a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d01c      	beq.n	80014d0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d108      	bne.n	80014b6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d030      	beq.n	800150e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	4798      	blx	r3
 80014b4:	e02b      	b.n	800150e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d027      	beq.n	800150e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	4798      	blx	r3
 80014c6:	e022      	b.n	800150e <HAL_DMA_IRQHandler+0x29e>
 80014c8:	20000000 	.word	0x20000000
 80014cc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10f      	bne.n	80014fe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f022 0210 	bic.w	r2, r2, #16
 80014ec:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2201      	movs	r2, #1
 80014f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001512:	2b00      	cmp	r3, #0
 8001514:	d032      	beq.n	800157c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b00      	cmp	r3, #0
 8001520:	d022      	beq.n	8001568 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2205      	movs	r2, #5
 8001526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 0201 	bic.w	r2, r2, #1
 8001538:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	3301      	adds	r3, #1
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	429a      	cmp	r2, r3
 8001544:	d307      	bcc.n	8001556 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1f2      	bne.n	800153a <HAL_DMA_IRQHandler+0x2ca>
 8001554:	e000      	b.n	8001558 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001556:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156c:	2b00      	cmp	r3, #0
 800156e:	d005      	beq.n	800157c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	4798      	blx	r3
 8001578:	e000      	b.n	800157c <HAL_DMA_IRQHandler+0x30c>
        return;
 800157a:	bf00      	nop
    }
  }
}
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop

08001584 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
 8001590:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80015a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2b40      	cmp	r3, #64	; 0x40
 80015b0:	d108      	bne.n	80015c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80015c2:	e007      	b.n	80015d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68ba      	ldr	r2, [r7, #8]
 80015ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	60da      	str	r2, [r3, #12]
}
 80015d4:	bf00      	nop
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	3b10      	subs	r3, #16
 80015f0:	4a14      	ldr	r2, [pc, #80]	; (8001644 <DMA_CalcBaseAndBitshift+0x64>)
 80015f2:	fba2 2303 	umull	r2, r3, r2, r3
 80015f6:	091b      	lsrs	r3, r3, #4
 80015f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80015fa:	4a13      	ldr	r2, [pc, #76]	; (8001648 <DMA_CalcBaseAndBitshift+0x68>)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4413      	add	r3, r2
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	461a      	mov	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2b03      	cmp	r3, #3
 800160c:	d909      	bls.n	8001622 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001616:	f023 0303 	bic.w	r3, r3, #3
 800161a:	1d1a      	adds	r2, r3, #4
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	659a      	str	r2, [r3, #88]	; 0x58
 8001620:	e007      	b.n	8001632 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800162a:	f023 0303 	bic.w	r3, r3, #3
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001636:	4618      	mov	r0, r3
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	aaaaaaab 	.word	0xaaaaaaab
 8001648:	0800763c 	.word	0x0800763c

0800164c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001654:	2300      	movs	r3, #0
 8001656:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d11f      	bne.n	80016a6 <DMA_CheckFifoParam+0x5a>
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	2b03      	cmp	r3, #3
 800166a:	d856      	bhi.n	800171a <DMA_CheckFifoParam+0xce>
 800166c:	a201      	add	r2, pc, #4	; (adr r2, 8001674 <DMA_CheckFifoParam+0x28>)
 800166e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001672:	bf00      	nop
 8001674:	08001685 	.word	0x08001685
 8001678:	08001697 	.word	0x08001697
 800167c:	08001685 	.word	0x08001685
 8001680:	0800171b 	.word	0x0800171b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001688:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d046      	beq.n	800171e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001694:	e043      	b.n	800171e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800169e:	d140      	bne.n	8001722 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016a4:	e03d      	b.n	8001722 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016ae:	d121      	bne.n	80016f4 <DMA_CheckFifoParam+0xa8>
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	2b03      	cmp	r3, #3
 80016b4:	d837      	bhi.n	8001726 <DMA_CheckFifoParam+0xda>
 80016b6:	a201      	add	r2, pc, #4	; (adr r2, 80016bc <DMA_CheckFifoParam+0x70>)
 80016b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016bc:	080016cd 	.word	0x080016cd
 80016c0:	080016d3 	.word	0x080016d3
 80016c4:	080016cd 	.word	0x080016cd
 80016c8:	080016e5 	.word	0x080016e5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
      break;
 80016d0:	e030      	b.n	8001734 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d025      	beq.n	800172a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016e2:	e022      	b.n	800172a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016ec:	d11f      	bne.n	800172e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80016f2:	e01c      	b.n	800172e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d903      	bls.n	8001702 <DMA_CheckFifoParam+0xb6>
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	2b03      	cmp	r3, #3
 80016fe:	d003      	beq.n	8001708 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001700:	e018      	b.n	8001734 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	73fb      	strb	r3, [r7, #15]
      break;
 8001706:	e015      	b.n	8001734 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d00e      	beq.n	8001732 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	73fb      	strb	r3, [r7, #15]
      break;
 8001718:	e00b      	b.n	8001732 <DMA_CheckFifoParam+0xe6>
      break;
 800171a:	bf00      	nop
 800171c:	e00a      	b.n	8001734 <DMA_CheckFifoParam+0xe8>
      break;
 800171e:	bf00      	nop
 8001720:	e008      	b.n	8001734 <DMA_CheckFifoParam+0xe8>
      break;
 8001722:	bf00      	nop
 8001724:	e006      	b.n	8001734 <DMA_CheckFifoParam+0xe8>
      break;
 8001726:	bf00      	nop
 8001728:	e004      	b.n	8001734 <DMA_CheckFifoParam+0xe8>
      break;
 800172a:	bf00      	nop
 800172c:	e002      	b.n	8001734 <DMA_CheckFifoParam+0xe8>
      break;   
 800172e:	bf00      	nop
 8001730:	e000      	b.n	8001734 <DMA_CheckFifoParam+0xe8>
      break;
 8001732:	bf00      	nop
    }
  } 
  
  return status; 
 8001734:	7bfb      	ldrb	r3, [r7, #15]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop

08001744 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001744:	b480      	push	{r7}
 8001746:	b089      	sub	sp, #36	; 0x24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001752:	2300      	movs	r3, #0
 8001754:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001756:	2300      	movs	r3, #0
 8001758:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
 800175e:	e159      	b.n	8001a14 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001760:	2201      	movs	r2, #1
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	429a      	cmp	r2, r3
 800177a:	f040 8148 	bne.w	8001a0e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	2b01      	cmp	r3, #1
 8001788:	d005      	beq.n	8001796 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001792:	2b02      	cmp	r3, #2
 8001794:	d130      	bne.n	80017f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	2203      	movs	r2, #3
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43db      	mvns	r3, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4013      	ands	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	68da      	ldr	r2, [r3, #12]
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4313      	orrs	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017cc:	2201      	movs	r2, #1
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	091b      	lsrs	r3, r3, #4
 80017e2:	f003 0201 	and.w	r2, r3, #1
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	2b03      	cmp	r3, #3
 8001802:	d017      	beq.n	8001834 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	2203      	movs	r2, #3
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4313      	orrs	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d123      	bne.n	8001888 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	08da      	lsrs	r2, r3, #3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3208      	adds	r2, #8
 8001848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800184c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	220f      	movs	r2, #15
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	691a      	ldr	r2, [r3, #16]
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4313      	orrs	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	08da      	lsrs	r2, r3, #3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	3208      	adds	r2, #8
 8001882:	69b9      	ldr	r1, [r7, #24]
 8001884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	2203      	movs	r2, #3
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4013      	ands	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 0203 	and.w	r2, r3, #3
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 80a2 	beq.w	8001a0e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	4b57      	ldr	r3, [pc, #348]	; (8001a2c <HAL_GPIO_Init+0x2e8>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d2:	4a56      	ldr	r2, [pc, #344]	; (8001a2c <HAL_GPIO_Init+0x2e8>)
 80018d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d8:	6453      	str	r3, [r2, #68]	; 0x44
 80018da:	4b54      	ldr	r3, [pc, #336]	; (8001a2c <HAL_GPIO_Init+0x2e8>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018e6:	4a52      	ldr	r2, [pc, #328]	; (8001a30 <HAL_GPIO_Init+0x2ec>)
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	089b      	lsrs	r3, r3, #2
 80018ec:	3302      	adds	r3, #2
 80018ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f003 0303 	and.w	r3, r3, #3
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	220f      	movs	r2, #15
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4013      	ands	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a49      	ldr	r2, [pc, #292]	; (8001a34 <HAL_GPIO_Init+0x2f0>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d019      	beq.n	8001946 <HAL_GPIO_Init+0x202>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a48      	ldr	r2, [pc, #288]	; (8001a38 <HAL_GPIO_Init+0x2f4>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d013      	beq.n	8001942 <HAL_GPIO_Init+0x1fe>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a47      	ldr	r2, [pc, #284]	; (8001a3c <HAL_GPIO_Init+0x2f8>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d00d      	beq.n	800193e <HAL_GPIO_Init+0x1fa>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a46      	ldr	r2, [pc, #280]	; (8001a40 <HAL_GPIO_Init+0x2fc>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d007      	beq.n	800193a <HAL_GPIO_Init+0x1f6>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a45      	ldr	r2, [pc, #276]	; (8001a44 <HAL_GPIO_Init+0x300>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d101      	bne.n	8001936 <HAL_GPIO_Init+0x1f2>
 8001932:	2304      	movs	r3, #4
 8001934:	e008      	b.n	8001948 <HAL_GPIO_Init+0x204>
 8001936:	2307      	movs	r3, #7
 8001938:	e006      	b.n	8001948 <HAL_GPIO_Init+0x204>
 800193a:	2303      	movs	r3, #3
 800193c:	e004      	b.n	8001948 <HAL_GPIO_Init+0x204>
 800193e:	2302      	movs	r3, #2
 8001940:	e002      	b.n	8001948 <HAL_GPIO_Init+0x204>
 8001942:	2301      	movs	r3, #1
 8001944:	e000      	b.n	8001948 <HAL_GPIO_Init+0x204>
 8001946:	2300      	movs	r3, #0
 8001948:	69fa      	ldr	r2, [r7, #28]
 800194a:	f002 0203 	and.w	r2, r2, #3
 800194e:	0092      	lsls	r2, r2, #2
 8001950:	4093      	lsls	r3, r2
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001958:	4935      	ldr	r1, [pc, #212]	; (8001a30 <HAL_GPIO_Init+0x2ec>)
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	089b      	lsrs	r3, r3, #2
 800195e:	3302      	adds	r3, #2
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001966:	4b38      	ldr	r3, [pc, #224]	; (8001a48 <HAL_GPIO_Init+0x304>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	43db      	mvns	r3, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4013      	ands	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800198a:	4a2f      	ldr	r2, [pc, #188]	; (8001a48 <HAL_GPIO_Init+0x304>)
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001990:	4b2d      	ldr	r3, [pc, #180]	; (8001a48 <HAL_GPIO_Init+0x304>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d003      	beq.n	80019b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019b4:	4a24      	ldr	r2, [pc, #144]	; (8001a48 <HAL_GPIO_Init+0x304>)
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ba:	4b23      	ldr	r3, [pc, #140]	; (8001a48 <HAL_GPIO_Init+0x304>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4013      	ands	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019de:	4a1a      	ldr	r2, [pc, #104]	; (8001a48 <HAL_GPIO_Init+0x304>)
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019e4:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <HAL_GPIO_Init+0x304>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a08:	4a0f      	ldr	r2, [pc, #60]	; (8001a48 <HAL_GPIO_Init+0x304>)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3301      	adds	r3, #1
 8001a12:	61fb      	str	r3, [r7, #28]
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	2b0f      	cmp	r3, #15
 8001a18:	f67f aea2 	bls.w	8001760 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	bf00      	nop
 8001a20:	3724      	adds	r7, #36	; 0x24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40013800 	.word	0x40013800
 8001a34:	40020000 	.word	0x40020000
 8001a38:	40020400 	.word	0x40020400
 8001a3c:	40020800 	.word	0x40020800
 8001a40:	40020c00 	.word	0x40020c00
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40013c00 	.word	0x40013c00

08001a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	807b      	strh	r3, [r7, #2]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a5c:	787b      	ldrb	r3, [r7, #1]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a62:	887a      	ldrh	r2, [r7, #2]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a68:	e003      	b.n	8001a72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a6a:	887b      	ldrh	r3, [r7, #2]
 8001a6c:	041a      	lsls	r2, r3, #16
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	619a      	str	r2, [r3, #24]
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e264      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d075      	beq.n	8001b8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a9e:	4ba3      	ldr	r3, [pc, #652]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 030c 	and.w	r3, r3, #12
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	d00c      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aaa:	4ba0      	ldr	r3, [pc, #640]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ab2:	2b08      	cmp	r3, #8
 8001ab4:	d112      	bne.n	8001adc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ab6:	4b9d      	ldr	r3, [pc, #628]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001abe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ac2:	d10b      	bne.n	8001adc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac4:	4b99      	ldr	r3, [pc, #612]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d05b      	beq.n	8001b88 <HAL_RCC_OscConfig+0x108>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d157      	bne.n	8001b88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e23f      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae4:	d106      	bne.n	8001af4 <HAL_RCC_OscConfig+0x74>
 8001ae6:	4b91      	ldr	r3, [pc, #580]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a90      	ldr	r2, [pc, #576]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	e01d      	b.n	8001b30 <HAL_RCC_OscConfig+0xb0>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001afc:	d10c      	bne.n	8001b18 <HAL_RCC_OscConfig+0x98>
 8001afe:	4b8b      	ldr	r3, [pc, #556]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a8a      	ldr	r2, [pc, #552]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	4b88      	ldr	r3, [pc, #544]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a87      	ldr	r2, [pc, #540]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	e00b      	b.n	8001b30 <HAL_RCC_OscConfig+0xb0>
 8001b18:	4b84      	ldr	r3, [pc, #528]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a83      	ldr	r2, [pc, #524]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	4b81      	ldr	r3, [pc, #516]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a80      	ldr	r2, [pc, #512]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d013      	beq.n	8001b60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b38:	f7ff f914 	bl	8000d64 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b40:	f7ff f910 	bl	8000d64 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b64      	cmp	r3, #100	; 0x64
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e204      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b52:	4b76      	ldr	r3, [pc, #472]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0f0      	beq.n	8001b40 <HAL_RCC_OscConfig+0xc0>
 8001b5e:	e014      	b.n	8001b8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b60:	f7ff f900 	bl	8000d64 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b68:	f7ff f8fc 	bl	8000d64 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b64      	cmp	r3, #100	; 0x64
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e1f0      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b7a:	4b6c      	ldr	r3, [pc, #432]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_OscConfig+0xe8>
 8001b86:	e000      	b.n	8001b8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d063      	beq.n	8001c5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b96:	4b65      	ldr	r3, [pc, #404]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00b      	beq.n	8001bba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ba2:	4b62      	ldr	r3, [pc, #392]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001baa:	2b08      	cmp	r3, #8
 8001bac:	d11c      	bne.n	8001be8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bae:	4b5f      	ldr	r3, [pc, #380]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d116      	bne.n	8001be8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bba:	4b5c      	ldr	r3, [pc, #368]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d005      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x152>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d001      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e1c4      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd2:	4b56      	ldr	r3, [pc, #344]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	4952      	ldr	r1, [pc, #328]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be6:	e03a      	b.n	8001c5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d020      	beq.n	8001c32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf0:	4b4f      	ldr	r3, [pc, #316]	; (8001d30 <HAL_RCC_OscConfig+0x2b0>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf6:	f7ff f8b5 	bl	8000d64 <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bfe:	f7ff f8b1 	bl	8000d64 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e1a5      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c10:	4b46      	ldr	r3, [pc, #280]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0f0      	beq.n	8001bfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c1c:	4b43      	ldr	r3, [pc, #268]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	4940      	ldr	r1, [pc, #256]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	600b      	str	r3, [r1, #0]
 8001c30:	e015      	b.n	8001c5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c32:	4b3f      	ldr	r3, [pc, #252]	; (8001d30 <HAL_RCC_OscConfig+0x2b0>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c38:	f7ff f894 	bl	8000d64 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c40:	f7ff f890 	bl	8000d64 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e184      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c52:	4b36      	ldr	r3, [pc, #216]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f0      	bne.n	8001c40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0308 	and.w	r3, r3, #8
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d030      	beq.n	8001ccc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d016      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c72:	4b30      	ldr	r3, [pc, #192]	; (8001d34 <HAL_RCC_OscConfig+0x2b4>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c78:	f7ff f874 	bl	8000d64 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c80:	f7ff f870 	bl	8000d64 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e164      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c92:	4b26      	ldr	r3, [pc, #152]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCC_OscConfig+0x200>
 8001c9e:	e015      	b.n	8001ccc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ca0:	4b24      	ldr	r3, [pc, #144]	; (8001d34 <HAL_RCC_OscConfig+0x2b4>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca6:	f7ff f85d 	bl	8000d64 <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cae:	f7ff f859 	bl	8000d64 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e14d      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc0:	4b1a      	ldr	r3, [pc, #104]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1f0      	bne.n	8001cae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 80a0 	beq.w	8001e1a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cde:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10f      	bne.n	8001d0a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	4a0e      	ldr	r2, [pc, #56]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfa:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	60bb      	str	r3, [r7, #8]
 8001d04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d06:	2301      	movs	r3, #1
 8001d08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0a:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HAL_RCC_OscConfig+0x2b8>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d121      	bne.n	8001d5a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d16:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <HAL_RCC_OscConfig+0x2b8>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a07      	ldr	r2, [pc, #28]	; (8001d38 <HAL_RCC_OscConfig+0x2b8>)
 8001d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d22:	f7ff f81f 	bl	8000d64 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d28:	e011      	b.n	8001d4e <HAL_RCC_OscConfig+0x2ce>
 8001d2a:	bf00      	nop
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	42470000 	.word	0x42470000
 8001d34:	42470e80 	.word	0x42470e80
 8001d38:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d3c:	f7ff f812 	bl	8000d64 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e106      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4e:	4b85      	ldr	r3, [pc, #532]	; (8001f64 <HAL_RCC_OscConfig+0x4e4>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d106      	bne.n	8001d70 <HAL_RCC_OscConfig+0x2f0>
 8001d62:	4b81      	ldr	r3, [pc, #516]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d66:	4a80      	ldr	r2, [pc, #512]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d6e:	e01c      	b.n	8001daa <HAL_RCC_OscConfig+0x32a>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	2b05      	cmp	r3, #5
 8001d76:	d10c      	bne.n	8001d92 <HAL_RCC_OscConfig+0x312>
 8001d78:	4b7b      	ldr	r3, [pc, #492]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7c:	4a7a      	ldr	r2, [pc, #488]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001d7e:	f043 0304 	orr.w	r3, r3, #4
 8001d82:	6713      	str	r3, [r2, #112]	; 0x70
 8001d84:	4b78      	ldr	r3, [pc, #480]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d88:	4a77      	ldr	r2, [pc, #476]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d90:	e00b      	b.n	8001daa <HAL_RCC_OscConfig+0x32a>
 8001d92:	4b75      	ldr	r3, [pc, #468]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d96:	4a74      	ldr	r2, [pc, #464]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001d98:	f023 0301 	bic.w	r3, r3, #1
 8001d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d9e:	4b72      	ldr	r3, [pc, #456]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da2:	4a71      	ldr	r2, [pc, #452]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001da4:	f023 0304 	bic.w	r3, r3, #4
 8001da8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d015      	beq.n	8001dde <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db2:	f7fe ffd7 	bl	8000d64 <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db8:	e00a      	b.n	8001dd0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dba:	f7fe ffd3 	bl	8000d64 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e0c5      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd0:	4b65      	ldr	r3, [pc, #404]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0ee      	beq.n	8001dba <HAL_RCC_OscConfig+0x33a>
 8001ddc:	e014      	b.n	8001e08 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dde:	f7fe ffc1 	bl	8000d64 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de4:	e00a      	b.n	8001dfc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001de6:	f7fe ffbd 	bl	8000d64 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e0af      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dfc:	4b5a      	ldr	r3, [pc, #360]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1ee      	bne.n	8001de6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e08:	7dfb      	ldrb	r3, [r7, #23]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d105      	bne.n	8001e1a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e0e:	4b56      	ldr	r3, [pc, #344]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	4a55      	ldr	r2, [pc, #340]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001e14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 809b 	beq.w	8001f5a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e24:	4b50      	ldr	r3, [pc, #320]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 030c 	and.w	r3, r3, #12
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	d05c      	beq.n	8001eea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d141      	bne.n	8001ebc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e38:	4b4c      	ldr	r3, [pc, #304]	; (8001f6c <HAL_RCC_OscConfig+0x4ec>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3e:	f7fe ff91 	bl	8000d64 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e46:	f7fe ff8d 	bl	8000d64 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e081      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e58:	4b43      	ldr	r3, [pc, #268]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1f0      	bne.n	8001e46 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69da      	ldr	r2, [r3, #28]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	019b      	lsls	r3, r3, #6
 8001e74:	431a      	orrs	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7a:	085b      	lsrs	r3, r3, #1
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	041b      	lsls	r3, r3, #16
 8001e80:	431a      	orrs	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e86:	061b      	lsls	r3, r3, #24
 8001e88:	4937      	ldr	r1, [pc, #220]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e8e:	4b37      	ldr	r3, [pc, #220]	; (8001f6c <HAL_RCC_OscConfig+0x4ec>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e94:	f7fe ff66 	bl	8000d64 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e9c:	f7fe ff62 	bl	8000d64 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e056      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eae:	4b2e      	ldr	r3, [pc, #184]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_RCC_OscConfig+0x41c>
 8001eba:	e04e      	b.n	8001f5a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ebc:	4b2b      	ldr	r3, [pc, #172]	; (8001f6c <HAL_RCC_OscConfig+0x4ec>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec2:	f7fe ff4f 	bl	8000d64 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eca:	f7fe ff4b 	bl	8000d64 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e03f      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001edc:	4b22      	ldr	r3, [pc, #136]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1f0      	bne.n	8001eca <HAL_RCC_OscConfig+0x44a>
 8001ee8:	e037      	b.n	8001f5a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d101      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e032      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ef6:	4b1c      	ldr	r3, [pc, #112]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d028      	beq.n	8001f56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d121      	bne.n	8001f56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d11a      	bne.n	8001f56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f26:	4013      	ands	r3, r2
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f2c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d111      	bne.n	8001f56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3c:	085b      	lsrs	r3, r3, #1
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d107      	bne.n	8001f56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f50:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d001      	beq.n	8001f5a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40007000 	.word	0x40007000
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	42470060 	.word	0x42470060

08001f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e0cc      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f84:	4b68      	ldr	r3, [pc, #416]	; (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d90c      	bls.n	8001fac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f92:	4b65      	ldr	r3, [pc, #404]	; (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9a:	4b63      	ldr	r3, [pc, #396]	; (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d001      	beq.n	8001fac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e0b8      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d020      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d005      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fc4:	4b59      	ldr	r3, [pc, #356]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	4a58      	ldr	r2, [pc, #352]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001fca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fdc:	4b53      	ldr	r3, [pc, #332]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	4a52      	ldr	r2, [pc, #328]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001fe2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fe6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe8:	4b50      	ldr	r3, [pc, #320]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	494d      	ldr	r1, [pc, #308]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d044      	beq.n	8002090 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d107      	bne.n	800201e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200e:	4b47      	ldr	r3, [pc, #284]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d119      	bne.n	800204e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e07f      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d003      	beq.n	800202e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800202a:	2b03      	cmp	r3, #3
 800202c:	d107      	bne.n	800203e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202e:	4b3f      	ldr	r3, [pc, #252]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d109      	bne.n	800204e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e06f      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203e:	4b3b      	ldr	r3, [pc, #236]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e067      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800204e:	4b37      	ldr	r3, [pc, #220]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f023 0203 	bic.w	r2, r3, #3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	4934      	ldr	r1, [pc, #208]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 800205c:	4313      	orrs	r3, r2
 800205e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002060:	f7fe fe80 	bl	8000d64 <HAL_GetTick>
 8002064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002066:	e00a      	b.n	800207e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002068:	f7fe fe7c 	bl	8000d64 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	f241 3288 	movw	r2, #5000	; 0x1388
 8002076:	4293      	cmp	r3, r2
 8002078:	d901      	bls.n	800207e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e04f      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207e:	4b2b      	ldr	r3, [pc, #172]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 020c 	and.w	r2, r3, #12
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	429a      	cmp	r2, r3
 800208e:	d1eb      	bne.n	8002068 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002090:	4b25      	ldr	r3, [pc, #148]	; (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d20c      	bcs.n	80020b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209e:	4b22      	ldr	r3, [pc, #136]	; (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a6:	4b20      	ldr	r3, [pc, #128]	; (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d001      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e032      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d008      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c4:	4b19      	ldr	r3, [pc, #100]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	4916      	ldr	r1, [pc, #88]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d009      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020e2:	4b12      	ldr	r3, [pc, #72]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	490e      	ldr	r1, [pc, #56]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020f6:	f000 f821 	bl	800213c <HAL_RCC_GetSysClockFreq>
 80020fa:	4602      	mov	r2, r0
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	091b      	lsrs	r3, r3, #4
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	490a      	ldr	r1, [pc, #40]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 8002108:	5ccb      	ldrb	r3, [r1, r3]
 800210a:	fa22 f303 	lsr.w	r3, r2, r3
 800210e:	4a09      	ldr	r2, [pc, #36]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002112:	4b09      	ldr	r3, [pc, #36]	; (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fc52 	bl	80009c0 <HAL_InitTick>

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40023c00 	.word	0x40023c00
 800212c:	40023800 	.word	0x40023800
 8002130:	08007624 	.word	0x08007624
 8002134:	20000000 	.word	0x20000000
 8002138:	20000004 	.word	0x20000004

0800213c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800213c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002140:	b084      	sub	sp, #16
 8002142:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	607b      	str	r3, [r7, #4]
 8002148:	2300      	movs	r3, #0
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	2300      	movs	r3, #0
 800214e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002150:	2300      	movs	r3, #0
 8002152:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002154:	4b67      	ldr	r3, [pc, #412]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 030c 	and.w	r3, r3, #12
 800215c:	2b08      	cmp	r3, #8
 800215e:	d00d      	beq.n	800217c <HAL_RCC_GetSysClockFreq+0x40>
 8002160:	2b08      	cmp	r3, #8
 8002162:	f200 80bd 	bhi.w	80022e0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002166:	2b00      	cmp	r3, #0
 8002168:	d002      	beq.n	8002170 <HAL_RCC_GetSysClockFreq+0x34>
 800216a:	2b04      	cmp	r3, #4
 800216c:	d003      	beq.n	8002176 <HAL_RCC_GetSysClockFreq+0x3a>
 800216e:	e0b7      	b.n	80022e0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002170:	4b61      	ldr	r3, [pc, #388]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002172:	60bb      	str	r3, [r7, #8]
       break;
 8002174:	e0b7      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002176:	4b61      	ldr	r3, [pc, #388]	; (80022fc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002178:	60bb      	str	r3, [r7, #8]
      break;
 800217a:	e0b4      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800217c:	4b5d      	ldr	r3, [pc, #372]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002184:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002186:	4b5b      	ldr	r3, [pc, #364]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d04d      	beq.n	800222e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002192:	4b58      	ldr	r3, [pc, #352]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	099b      	lsrs	r3, r3, #6
 8002198:	461a      	mov	r2, r3
 800219a:	f04f 0300 	mov.w	r3, #0
 800219e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80021a2:	f04f 0100 	mov.w	r1, #0
 80021a6:	ea02 0800 	and.w	r8, r2, r0
 80021aa:	ea03 0901 	and.w	r9, r3, r1
 80021ae:	4640      	mov	r0, r8
 80021b0:	4649      	mov	r1, r9
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	014b      	lsls	r3, r1, #5
 80021bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80021c0:	0142      	lsls	r2, r0, #5
 80021c2:	4610      	mov	r0, r2
 80021c4:	4619      	mov	r1, r3
 80021c6:	ebb0 0008 	subs.w	r0, r0, r8
 80021ca:	eb61 0109 	sbc.w	r1, r1, r9
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	f04f 0300 	mov.w	r3, #0
 80021d6:	018b      	lsls	r3, r1, #6
 80021d8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80021dc:	0182      	lsls	r2, r0, #6
 80021de:	1a12      	subs	r2, r2, r0
 80021e0:	eb63 0301 	sbc.w	r3, r3, r1
 80021e4:	f04f 0000 	mov.w	r0, #0
 80021e8:	f04f 0100 	mov.w	r1, #0
 80021ec:	00d9      	lsls	r1, r3, #3
 80021ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021f2:	00d0      	lsls	r0, r2, #3
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	eb12 0208 	adds.w	r2, r2, r8
 80021fc:	eb43 0309 	adc.w	r3, r3, r9
 8002200:	f04f 0000 	mov.w	r0, #0
 8002204:	f04f 0100 	mov.w	r1, #0
 8002208:	0259      	lsls	r1, r3, #9
 800220a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800220e:	0250      	lsls	r0, r2, #9
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4610      	mov	r0, r2
 8002216:	4619      	mov	r1, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	461a      	mov	r2, r3
 800221c:	f04f 0300 	mov.w	r3, #0
 8002220:	f7fd ffde 	bl	80001e0 <__aeabi_uldivmod>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	4613      	mov	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	e04a      	b.n	80022c4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800222e:	4b31      	ldr	r3, [pc, #196]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	099b      	lsrs	r3, r3, #6
 8002234:	461a      	mov	r2, r3
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800223e:	f04f 0100 	mov.w	r1, #0
 8002242:	ea02 0400 	and.w	r4, r2, r0
 8002246:	ea03 0501 	and.w	r5, r3, r1
 800224a:	4620      	mov	r0, r4
 800224c:	4629      	mov	r1, r5
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	f04f 0300 	mov.w	r3, #0
 8002256:	014b      	lsls	r3, r1, #5
 8002258:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800225c:	0142      	lsls	r2, r0, #5
 800225e:	4610      	mov	r0, r2
 8002260:	4619      	mov	r1, r3
 8002262:	1b00      	subs	r0, r0, r4
 8002264:	eb61 0105 	sbc.w	r1, r1, r5
 8002268:	f04f 0200 	mov.w	r2, #0
 800226c:	f04f 0300 	mov.w	r3, #0
 8002270:	018b      	lsls	r3, r1, #6
 8002272:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002276:	0182      	lsls	r2, r0, #6
 8002278:	1a12      	subs	r2, r2, r0
 800227a:	eb63 0301 	sbc.w	r3, r3, r1
 800227e:	f04f 0000 	mov.w	r0, #0
 8002282:	f04f 0100 	mov.w	r1, #0
 8002286:	00d9      	lsls	r1, r3, #3
 8002288:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800228c:	00d0      	lsls	r0, r2, #3
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	1912      	adds	r2, r2, r4
 8002294:	eb45 0303 	adc.w	r3, r5, r3
 8002298:	f04f 0000 	mov.w	r0, #0
 800229c:	f04f 0100 	mov.w	r1, #0
 80022a0:	0299      	lsls	r1, r3, #10
 80022a2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80022a6:	0290      	lsls	r0, r2, #10
 80022a8:	4602      	mov	r2, r0
 80022aa:	460b      	mov	r3, r1
 80022ac:	4610      	mov	r0, r2
 80022ae:	4619      	mov	r1, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	461a      	mov	r2, r3
 80022b4:	f04f 0300 	mov.w	r3, #0
 80022b8:	f7fd ff92 	bl	80001e0 <__aeabi_uldivmod>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4613      	mov	r3, r2
 80022c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	0c1b      	lsrs	r3, r3, #16
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	3301      	adds	r3, #1
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022dc:	60bb      	str	r3, [r7, #8]
      break;
 80022de:	e002      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022e0:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80022e2:	60bb      	str	r3, [r7, #8]
      break;
 80022e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022e6:	68bb      	ldr	r3, [r7, #8]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022f2:	bf00      	nop
 80022f4:	40023800 	.word	0x40023800
 80022f8:	00f42400 	.word	0x00f42400
 80022fc:	007a1200 	.word	0x007a1200

08002300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002304:	4b03      	ldr	r3, [pc, #12]	; (8002314 <HAL_RCC_GetHCLKFreq+0x14>)
 8002306:	681b      	ldr	r3, [r3, #0]
}
 8002308:	4618      	mov	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	20000000 	.word	0x20000000

08002318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800231c:	f7ff fff0 	bl	8002300 <HAL_RCC_GetHCLKFreq>
 8002320:	4602      	mov	r2, r0
 8002322:	4b05      	ldr	r3, [pc, #20]	; (8002338 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	0a9b      	lsrs	r3, r3, #10
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	4903      	ldr	r1, [pc, #12]	; (800233c <HAL_RCC_GetPCLK1Freq+0x24>)
 800232e:	5ccb      	ldrb	r3, [r1, r3]
 8002330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002334:	4618      	mov	r0, r3
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40023800 	.word	0x40023800
 800233c:	08007634 	.word	0x08007634

08002340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002344:	f7ff ffdc 	bl	8002300 <HAL_RCC_GetHCLKFreq>
 8002348:	4602      	mov	r2, r0
 800234a:	4b05      	ldr	r3, [pc, #20]	; (8002360 <HAL_RCC_GetPCLK2Freq+0x20>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	0b5b      	lsrs	r3, r3, #13
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	4903      	ldr	r1, [pc, #12]	; (8002364 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002356:	5ccb      	ldrb	r3, [r1, r3]
 8002358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800235c:	4618      	mov	r0, r3
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40023800 	.word	0x40023800
 8002364:	08007634 	.word	0x08007634

08002368 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	220f      	movs	r2, #15
 8002376:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002378:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <HAL_RCC_GetClockConfig+0x5c>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 0203 	and.w	r2, r3, #3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002384:	4b0f      	ldr	r3, [pc, #60]	; (80023c4 <HAL_RCC_GetClockConfig+0x5c>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <HAL_RCC_GetClockConfig+0x5c>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800239c:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <HAL_RCC_GetClockConfig+0x5c>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	08db      	lsrs	r3, r3, #3
 80023a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80023aa:	4b07      	ldr	r3, [pc, #28]	; (80023c8 <HAL_RCC_GetClockConfig+0x60>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0207 	and.w	r2, r3, #7
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	601a      	str	r2, [r3, #0]
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40023c00 	.word	0x40023c00

080023cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e041      	b.n	8002462 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d106      	bne.n	80023f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f839 	bl	800246a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2202      	movs	r2, #2
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3304      	adds	r3, #4
 8002408:	4619      	mov	r1, r3
 800240a:	4610      	mov	r0, r2
 800240c:	f000 f9ca 	bl	80027a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
	...

08002480 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b01      	cmp	r3, #1
 8002492:	d001      	beq.n	8002498 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e044      	b.n	8002522 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2202      	movs	r2, #2
 800249c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 0201 	orr.w	r2, r2, #1
 80024ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a1e      	ldr	r2, [pc, #120]	; (8002530 <HAL_TIM_Base_Start_IT+0xb0>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d018      	beq.n	80024ec <HAL_TIM_Base_Start_IT+0x6c>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024c2:	d013      	beq.n	80024ec <HAL_TIM_Base_Start_IT+0x6c>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a1a      	ldr	r2, [pc, #104]	; (8002534 <HAL_TIM_Base_Start_IT+0xb4>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d00e      	beq.n	80024ec <HAL_TIM_Base_Start_IT+0x6c>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a19      	ldr	r2, [pc, #100]	; (8002538 <HAL_TIM_Base_Start_IT+0xb8>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d009      	beq.n	80024ec <HAL_TIM_Base_Start_IT+0x6c>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a17      	ldr	r2, [pc, #92]	; (800253c <HAL_TIM_Base_Start_IT+0xbc>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d004      	beq.n	80024ec <HAL_TIM_Base_Start_IT+0x6c>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a16      	ldr	r2, [pc, #88]	; (8002540 <HAL_TIM_Base_Start_IT+0xc0>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d111      	bne.n	8002510 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2b06      	cmp	r3, #6
 80024fc:	d010      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f042 0201 	orr.w	r2, r2, #1
 800250c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800250e:	e007      	b.n	8002520 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0201 	orr.w	r2, r2, #1
 800251e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	40010000 	.word	0x40010000
 8002534:	40000400 	.word	0x40000400
 8002538:	40000800 	.word	0x40000800
 800253c:	40000c00 	.word	0x40000c00
 8002540:	40014000 	.word	0x40014000

08002544 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b02      	cmp	r3, #2
 8002558:	d122      	bne.n	80025a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b02      	cmp	r3, #2
 8002566:	d11b      	bne.n	80025a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f06f 0202 	mvn.w	r2, #2
 8002570:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f8ee 	bl	8002768 <HAL_TIM_IC_CaptureCallback>
 800258c:	e005      	b.n	800259a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f8e0 	bl	8002754 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f000 f8f1 	bl	800277c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	f003 0304 	and.w	r3, r3, #4
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	d122      	bne.n	80025f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	f003 0304 	and.w	r3, r3, #4
 80025b8:	2b04      	cmp	r3, #4
 80025ba:	d11b      	bne.n	80025f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f06f 0204 	mvn.w	r2, #4
 80025c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2202      	movs	r2, #2
 80025ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f8c4 	bl	8002768 <HAL_TIM_IC_CaptureCallback>
 80025e0:	e005      	b.n	80025ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f8b6 	bl	8002754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 f8c7 	bl	800277c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d122      	bne.n	8002648 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	f003 0308 	and.w	r3, r3, #8
 800260c:	2b08      	cmp	r3, #8
 800260e:	d11b      	bne.n	8002648 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f06f 0208 	mvn.w	r2, #8
 8002618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2204      	movs	r2, #4
 800261e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f89a 	bl	8002768 <HAL_TIM_IC_CaptureCallback>
 8002634:	e005      	b.n	8002642 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f88c 	bl	8002754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 f89d 	bl	800277c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	f003 0310 	and.w	r3, r3, #16
 8002652:	2b10      	cmp	r3, #16
 8002654:	d122      	bne.n	800269c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	f003 0310 	and.w	r3, r3, #16
 8002660:	2b10      	cmp	r3, #16
 8002662:	d11b      	bne.n	800269c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f06f 0210 	mvn.w	r2, #16
 800266c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2208      	movs	r2, #8
 8002672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f870 	bl	8002768 <HAL_TIM_IC_CaptureCallback>
 8002688:	e005      	b.n	8002696 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f862 	bl	8002754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 f873 	bl	800277c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d10e      	bne.n	80026c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d107      	bne.n	80026c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f06f 0201 	mvn.w	r2, #1
 80026c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7fe f882 	bl	80007cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d2:	2b80      	cmp	r3, #128	; 0x80
 80026d4:	d10e      	bne.n	80026f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e0:	2b80      	cmp	r3, #128	; 0x80
 80026e2:	d107      	bne.n	80026f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f8e2 	bl	80028b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fe:	2b40      	cmp	r3, #64	; 0x40
 8002700:	d10e      	bne.n	8002720 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270c:	2b40      	cmp	r3, #64	; 0x40
 800270e:	d107      	bne.n	8002720 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f838 	bl	8002790 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	f003 0320 	and.w	r3, r3, #32
 800272a:	2b20      	cmp	r3, #32
 800272c:	d10e      	bne.n	800274c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f003 0320 	and.w	r3, r3, #32
 8002738:	2b20      	cmp	r3, #32
 800273a:	d107      	bne.n	800274c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f06f 0220 	mvn.w	r2, #32
 8002744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f8ac 	bl	80028a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800274c:	bf00      	nop
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a34      	ldr	r2, [pc, #208]	; (8002888 <TIM_Base_SetConfig+0xe4>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d00f      	beq.n	80027dc <TIM_Base_SetConfig+0x38>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027c2:	d00b      	beq.n	80027dc <TIM_Base_SetConfig+0x38>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a31      	ldr	r2, [pc, #196]	; (800288c <TIM_Base_SetConfig+0xe8>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d007      	beq.n	80027dc <TIM_Base_SetConfig+0x38>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a30      	ldr	r2, [pc, #192]	; (8002890 <TIM_Base_SetConfig+0xec>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d003      	beq.n	80027dc <TIM_Base_SetConfig+0x38>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a2f      	ldr	r2, [pc, #188]	; (8002894 <TIM_Base_SetConfig+0xf0>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d108      	bne.n	80027ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a25      	ldr	r2, [pc, #148]	; (8002888 <TIM_Base_SetConfig+0xe4>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d01b      	beq.n	800282e <TIM_Base_SetConfig+0x8a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027fc:	d017      	beq.n	800282e <TIM_Base_SetConfig+0x8a>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a22      	ldr	r2, [pc, #136]	; (800288c <TIM_Base_SetConfig+0xe8>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d013      	beq.n	800282e <TIM_Base_SetConfig+0x8a>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a21      	ldr	r2, [pc, #132]	; (8002890 <TIM_Base_SetConfig+0xec>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d00f      	beq.n	800282e <TIM_Base_SetConfig+0x8a>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a20      	ldr	r2, [pc, #128]	; (8002894 <TIM_Base_SetConfig+0xf0>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d00b      	beq.n	800282e <TIM_Base_SetConfig+0x8a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a1f      	ldr	r2, [pc, #124]	; (8002898 <TIM_Base_SetConfig+0xf4>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d007      	beq.n	800282e <TIM_Base_SetConfig+0x8a>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a1e      	ldr	r2, [pc, #120]	; (800289c <TIM_Base_SetConfig+0xf8>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d003      	beq.n	800282e <TIM_Base_SetConfig+0x8a>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a1d      	ldr	r2, [pc, #116]	; (80028a0 <TIM_Base_SetConfig+0xfc>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d108      	bne.n	8002840 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	4313      	orrs	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	4313      	orrs	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a08      	ldr	r2, [pc, #32]	; (8002888 <TIM_Base_SetConfig+0xe4>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d103      	bne.n	8002874 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	691a      	ldr	r2, [r3, #16]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	615a      	str	r2, [r3, #20]
}
 800287a:	bf00      	nop
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40010000 	.word	0x40010000
 800288c:	40000400 	.word	0x40000400
 8002890:	40000800 	.word	0x40000800
 8002894:	40000c00 	.word	0x40000c00
 8002898:	40014000 	.word	0x40014000
 800289c:	40014400 	.word	0x40014400
 80028a0:	40014800 	.word	0x40014800

080028a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e03f      	b.n	800295e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d106      	bne.n	80028f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7fd ffae 	bl	8000854 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2224      	movs	r2, #36	; 0x24
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68da      	ldr	r2, [r3, #12]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800290e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 fe6f 	bl	80035f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	691a      	ldr	r2, [r3, #16]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002924:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	695a      	ldr	r2, [r3, #20]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002934:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68da      	ldr	r2, [r3, #12]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002944:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2220      	movs	r2, #32
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2220      	movs	r2, #32
 8002958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b084      	sub	sp, #16
 800296a:	af00      	add	r7, sp, #0
 800296c:	60f8      	str	r0, [r7, #12]
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	4613      	mov	r3, r2
 8002972:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b20      	cmp	r3, #32
 800297e:	d11d      	bne.n	80029bc <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d002      	beq.n	800298c <HAL_UART_Receive_DMA+0x26>
 8002986:	88fb      	ldrh	r3, [r7, #6]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e016      	b.n	80029be <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002996:	2b01      	cmp	r3, #1
 8002998:	d101      	bne.n	800299e <HAL_UART_Receive_DMA+0x38>
 800299a:	2302      	movs	r3, #2
 800299c:	e00f      	b.n	80029be <HAL_UART_Receive_DMA+0x58>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80029ac:	88fb      	ldrh	r3, [r7, #6]
 80029ae:	461a      	mov	r2, r3
 80029b0:	68b9      	ldr	r1, [r7, #8]
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 fbc2 	bl	800313c <UART_Start_Receive_DMA>
 80029b8:	4603      	mov	r3, r0
 80029ba:	e000      	b.n	80029be <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80029bc:	2302      	movs	r3, #2
  }
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b0ba      	sub	sp, #232	; 0xe8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80029fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002a06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10f      	bne.n	8002a2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a12:	f003 0320 	and.w	r3, r3, #32
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d009      	beq.n	8002a2e <HAL_UART_IRQHandler+0x66>
 8002a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a1e:	f003 0320 	and.w	r3, r3, #32
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 fd29 	bl	800347e <UART_Receive_IT>
      return;
 8002a2c:	e256      	b.n	8002edc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002a2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 80de 	beq.w	8002bf4 <HAL_UART_IRQHandler+0x22c>
 8002a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d106      	bne.n	8002a52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a48:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 80d1 	beq.w	8002bf4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00b      	beq.n	8002a76 <HAL_UART_IRQHandler+0xae>
 8002a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d005      	beq.n	8002a76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	f043 0201 	orr.w	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a7a:	f003 0304 	and.w	r3, r3, #4
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00b      	beq.n	8002a9a <HAL_UART_IRQHandler+0xd2>
 8002a82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d005      	beq.n	8002a9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	f043 0202 	orr.w	r2, r3, #2
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00b      	beq.n	8002abe <HAL_UART_IRQHandler+0xf6>
 8002aa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d005      	beq.n	8002abe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f043 0204 	orr.w	r2, r3, #4
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d011      	beq.n	8002aee <HAL_UART_IRQHandler+0x126>
 8002aca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ace:	f003 0320 	and.w	r3, r3, #32
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d105      	bne.n	8002ae2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d005      	beq.n	8002aee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	f043 0208 	orr.w	r2, r3, #8
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 81ed 	beq.w	8002ed2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002afc:	f003 0320 	and.w	r3, r3, #32
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d008      	beq.n	8002b16 <HAL_UART_IRQHandler+0x14e>
 8002b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b08:	f003 0320 	and.w	r3, r3, #32
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d002      	beq.n	8002b16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 fcb4 	bl	800347e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b20:	2b40      	cmp	r3, #64	; 0x40
 8002b22:	bf0c      	ite	eq
 8002b24:	2301      	moveq	r3, #1
 8002b26:	2300      	movne	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d103      	bne.n	8002b42 <HAL_UART_IRQHandler+0x17a>
 8002b3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d04f      	beq.n	8002be2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 fbbc 	bl	80032c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b52:	2b40      	cmp	r3, #64	; 0x40
 8002b54:	d141      	bne.n	8002bda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	3314      	adds	r3, #20
 8002b5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b64:	e853 3f00 	ldrex	r3, [r3]
 8002b68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	3314      	adds	r3, #20
 8002b7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b92:	e841 2300 	strex	r3, r2, [r1]
 8002b96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1d9      	bne.n	8002b56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d013      	beq.n	8002bd2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bae:	4a7d      	ldr	r2, [pc, #500]	; (8002da4 <HAL_UART_IRQHandler+0x3dc>)
 8002bb0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fe fb38 	bl	800122c <HAL_DMA_Abort_IT>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d016      	beq.n	8002bf0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bcc:	4610      	mov	r0, r2
 8002bce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd0:	e00e      	b.n	8002bf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f9a4 	bl	8002f20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd8:	e00a      	b.n	8002bf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f9a0 	bl	8002f20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002be0:	e006      	b.n	8002bf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f99c 	bl	8002f20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002bee:	e170      	b.n	8002ed2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf0:	bf00      	nop
    return;
 8002bf2:	e16e      	b.n	8002ed2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	f040 814a 	bne.w	8002e92 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c02:	f003 0310 	and.w	r3, r3, #16
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 8143 	beq.w	8002e92 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 813c 	beq.w	8002e92 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3a:	2b40      	cmp	r3, #64	; 0x40
 8002c3c:	f040 80b4 	bne.w	8002da8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 8140 	beq.w	8002ed6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	f080 8139 	bcs.w	8002ed6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c6a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c76:	f000 8088 	beq.w	8002d8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	330c      	adds	r3, #12
 8002c80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c88:	e853 3f00 	ldrex	r3, [r3]
 8002c8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	330c      	adds	r3, #12
 8002ca2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002ca6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002caa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002cb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002cb6:	e841 2300 	strex	r3, r2, [r1]
 8002cba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002cbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1d9      	bne.n	8002c7a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	3314      	adds	r3, #20
 8002ccc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cd0:	e853 3f00 	ldrex	r3, [r3]
 8002cd4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002cd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cd8:	f023 0301 	bic.w	r3, r3, #1
 8002cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	3314      	adds	r3, #20
 8002ce6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002cee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002cf2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002cf6:	e841 2300 	strex	r3, r2, [r1]
 8002cfa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002cfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1e1      	bne.n	8002cc6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	3314      	adds	r3, #20
 8002d08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d0c:	e853 3f00 	ldrex	r3, [r3]
 8002d10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	3314      	adds	r3, #20
 8002d22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d2e:	e841 2300 	strex	r3, r2, [r1]
 8002d32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1e3      	bne.n	8002d02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	330c      	adds	r3, #12
 8002d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d52:	e853 3f00 	ldrex	r3, [r3]
 8002d56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d5a:	f023 0310 	bic.w	r3, r3, #16
 8002d5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	330c      	adds	r3, #12
 8002d68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002d6c:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d6e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d74:	e841 2300 	strex	r3, r2, [r1]
 8002d78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1e3      	bne.n	8002d48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7fe f9e1 	bl	800114c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	4619      	mov	r1, r3
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f8ca 	bl	8002f34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002da0:	e099      	b.n	8002ed6 <HAL_UART_IRQHandler+0x50e>
 8002da2:	bf00      	nop
 8002da4:	08003387 	.word	0x08003387
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 808b 	beq.w	8002eda <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002dc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 8086 	beq.w	8002eda <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	330c      	adds	r3, #12
 8002dd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd8:	e853 3f00 	ldrex	r3, [r3]
 8002ddc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002de4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	330c      	adds	r3, #12
 8002dee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002df2:	647a      	str	r2, [r7, #68]	; 0x44
 8002df4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002df8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002dfa:	e841 2300 	strex	r3, r2, [r1]
 8002dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1e3      	bne.n	8002dce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	3314      	adds	r3, #20
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	e853 3f00 	ldrex	r3, [r3]
 8002e14:	623b      	str	r3, [r7, #32]
   return(result);
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	f023 0301 	bic.w	r3, r3, #1
 8002e1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	3314      	adds	r3, #20
 8002e26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e2a:	633a      	str	r2, [r7, #48]	; 0x30
 8002e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e32:	e841 2300 	strex	r3, r2, [r1]
 8002e36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1e3      	bne.n	8002e06 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2220      	movs	r2, #32
 8002e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	330c      	adds	r3, #12
 8002e52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	e853 3f00 	ldrex	r3, [r3]
 8002e5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f023 0310 	bic.w	r3, r3, #16
 8002e62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	330c      	adds	r3, #12
 8002e6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002e70:	61fa      	str	r2, [r7, #28]
 8002e72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e74:	69b9      	ldr	r1, [r7, #24]
 8002e76:	69fa      	ldr	r2, [r7, #28]
 8002e78:	e841 2300 	strex	r3, r2, [r1]
 8002e7c:	617b      	str	r3, [r7, #20]
   return(result);
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1e3      	bne.n	8002e4c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e88:	4619      	mov	r1, r3
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f852 	bl	8002f34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e90:	e023      	b.n	8002eda <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d009      	beq.n	8002eb2 <HAL_UART_IRQHandler+0x4ea>
 8002e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 fa7f 	bl	80033ae <UART_Transmit_IT>
    return;
 8002eb0:	e014      	b.n	8002edc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00e      	beq.n	8002edc <HAL_UART_IRQHandler+0x514>
 8002ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d008      	beq.n	8002edc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 fabf 	bl	800344e <UART_EndTransmit_IT>
    return;
 8002ed0:	e004      	b.n	8002edc <HAL_UART_IRQHandler+0x514>
    return;
 8002ed2:	bf00      	nop
 8002ed4:	e002      	b.n	8002edc <HAL_UART_IRQHandler+0x514>
      return;
 8002ed6:	bf00      	nop
 8002ed8:	e000      	b.n	8002edc <HAL_UART_IRQHandler+0x514>
      return;
 8002eda:	bf00      	nop
  }
}
 8002edc:	37e8      	adds	r7, #232	; 0xe8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop

08002ee4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b09c      	sub	sp, #112	; 0x70
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f58:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d172      	bne.n	800304e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	330c      	adds	r3, #12
 8002f74:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f78:	e853 3f00 	ldrex	r3, [r3]
 8002f7c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f84:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	330c      	adds	r3, #12
 8002f8c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002f8e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f90:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f92:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f96:	e841 2300 	strex	r3, r2, [r1]
 8002f9a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002f9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1e5      	bne.n	8002f6e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	3314      	adds	r3, #20
 8002fa8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fac:	e853 3f00 	ldrex	r3, [r3]
 8002fb0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb4:	f023 0301 	bic.w	r3, r3, #1
 8002fb8:	667b      	str	r3, [r7, #100]	; 0x64
 8002fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	3314      	adds	r3, #20
 8002fc0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002fc2:	647a      	str	r2, [r7, #68]	; 0x44
 8002fc4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002fc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fca:	e841 2300 	strex	r3, r2, [r1]
 8002fce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1e5      	bne.n	8002fa2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	3314      	adds	r3, #20
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	e853 3f00 	ldrex	r3, [r3]
 8002fe4:	623b      	str	r3, [r7, #32]
   return(result);
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fec:	663b      	str	r3, [r7, #96]	; 0x60
 8002fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	3314      	adds	r3, #20
 8002ff4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ff6:	633a      	str	r2, [r7, #48]	; 0x30
 8002ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ffe:	e841 2300 	strex	r3, r2, [r1]
 8003002:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1e5      	bne.n	8002fd6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800300a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800300c:	2220      	movs	r2, #32
 800300e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	2b01      	cmp	r3, #1
 8003018:	d119      	bne.n	800304e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800301a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	330c      	adds	r3, #12
 8003020:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	e853 3f00 	ldrex	r3, [r3]
 8003028:	60fb      	str	r3, [r7, #12]
   return(result);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f023 0310 	bic.w	r3, r3, #16
 8003030:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	330c      	adds	r3, #12
 8003038:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800303a:	61fa      	str	r2, [r7, #28]
 800303c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800303e:	69b9      	ldr	r1, [r7, #24]
 8003040:	69fa      	ldr	r2, [r7, #28]
 8003042:	e841 2300 	strex	r3, r2, [r1]
 8003046:	617b      	str	r3, [r7, #20]
   return(result);
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1e5      	bne.n	800301a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800304e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003052:	2b01      	cmp	r3, #1
 8003054:	d106      	bne.n	8003064 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003058:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800305a:	4619      	mov	r1, r3
 800305c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800305e:	f7ff ff69 	bl	8002f34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003062:	e002      	b.n	800306a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003064:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003066:	f7ff ff47 	bl	8002ef8 <HAL_UART_RxCpltCallback>
}
 800306a:	bf00      	nop
 800306c:	3770      	adds	r7, #112	; 0x70
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b084      	sub	sp, #16
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003084:	2b01      	cmp	r3, #1
 8003086:	d108      	bne.n	800309a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800308c:	085b      	lsrs	r3, r3, #1
 800308e:	b29b      	uxth	r3, r3
 8003090:	4619      	mov	r1, r3
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f7ff ff4e 	bl	8002f34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003098:	e002      	b.n	80030a0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f7ff ff36 	bl	8002f0c <HAL_UART_RxHalfCpltCallback>
}
 80030a0:	bf00      	nop
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c4:	2b80      	cmp	r3, #128	; 0x80
 80030c6:	bf0c      	ite	eq
 80030c8:	2301      	moveq	r3, #1
 80030ca:	2300      	movne	r3, #0
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b21      	cmp	r3, #33	; 0x21
 80030da:	d108      	bne.n	80030ee <UART_DMAError+0x46>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d005      	beq.n	80030ee <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2200      	movs	r2, #0
 80030e6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80030e8:	68b8      	ldr	r0, [r7, #8]
 80030ea:	f000 f8c1 	bl	8003270 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f8:	2b40      	cmp	r3, #64	; 0x40
 80030fa:	bf0c      	ite	eq
 80030fc:	2301      	moveq	r3, #1
 80030fe:	2300      	movne	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b22      	cmp	r3, #34	; 0x22
 800310e:	d108      	bne.n	8003122 <UART_DMAError+0x7a>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d005      	beq.n	8003122 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2200      	movs	r2, #0
 800311a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800311c:	68b8      	ldr	r0, [r7, #8]
 800311e:	f000 f8cf 	bl	80032c0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	f043 0210 	orr.w	r2, r3, #16
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800312e:	68b8      	ldr	r0, [r7, #8]
 8003130:	f7ff fef6 	bl	8002f20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003134:	bf00      	nop
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b098      	sub	sp, #96	; 0x60
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	4613      	mov	r3, r2
 8003148:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	88fa      	ldrh	r2, [r7, #6]
 8003154:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2222      	movs	r2, #34	; 0x22
 8003160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003168:	4a3e      	ldr	r2, [pc, #248]	; (8003264 <UART_Start_Receive_DMA+0x128>)
 800316a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003170:	4a3d      	ldr	r2, [pc, #244]	; (8003268 <UART_Start_Receive_DMA+0x12c>)
 8003172:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003178:	4a3c      	ldr	r2, [pc, #240]	; (800326c <UART_Start_Receive_DMA+0x130>)
 800317a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003180:	2200      	movs	r2, #0
 8003182:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003184:	f107 0308 	add.w	r3, r7, #8
 8003188:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	3304      	adds	r3, #4
 8003194:	4619      	mov	r1, r3
 8003196:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	88fb      	ldrh	r3, [r7, #6]
 800319c:	f7fd ff7e 	bl	800109c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80031a0:	2300      	movs	r3, #0
 80031a2:	613b      	str	r3, [r7, #16]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	613b      	str	r3, [r7, #16]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	613b      	str	r3, [r7, #16]
 80031b4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	330c      	adds	r3, #12
 80031c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031c8:	e853 3f00 	ldrex	r3, [r3]
 80031cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80031ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	330c      	adds	r3, #12
 80031dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031de:	64fa      	str	r2, [r7, #76]	; 0x4c
 80031e0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80031e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031e6:	e841 2300 	strex	r3, r2, [r1]
 80031ea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80031ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1e5      	bne.n	80031be <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	3314      	adds	r3, #20
 80031f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fc:	e853 3f00 	ldrex	r3, [r3]
 8003200:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003204:	f043 0301 	orr.w	r3, r3, #1
 8003208:	657b      	str	r3, [r7, #84]	; 0x54
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	3314      	adds	r3, #20
 8003210:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003212:	63ba      	str	r2, [r7, #56]	; 0x38
 8003214:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003216:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003218:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800321a:	e841 2300 	strex	r3, r2, [r1]
 800321e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1e5      	bne.n	80031f2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	3314      	adds	r3, #20
 800322c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	e853 3f00 	ldrex	r3, [r3]
 8003234:	617b      	str	r3, [r7, #20]
   return(result);
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800323c:	653b      	str	r3, [r7, #80]	; 0x50
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	3314      	adds	r3, #20
 8003244:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003246:	627a      	str	r2, [r7, #36]	; 0x24
 8003248:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800324a:	6a39      	ldr	r1, [r7, #32]
 800324c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800324e:	e841 2300 	strex	r3, r2, [r1]
 8003252:	61fb      	str	r3, [r7, #28]
   return(result);
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1e5      	bne.n	8003226 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3760      	adds	r7, #96	; 0x60
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	08002f4d 	.word	0x08002f4d
 8003268:	08003073 	.word	0x08003073
 800326c:	080030a9 	.word	0x080030a9

08003270 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003270:	b480      	push	{r7}
 8003272:	b089      	sub	sp, #36	; 0x24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	330c      	adds	r3, #12
 800327e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	e853 3f00 	ldrex	r3, [r3]
 8003286:	60bb      	str	r3, [r7, #8]
   return(result);
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800328e:	61fb      	str	r3, [r7, #28]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	330c      	adds	r3, #12
 8003296:	69fa      	ldr	r2, [r7, #28]
 8003298:	61ba      	str	r2, [r7, #24]
 800329a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329c:	6979      	ldr	r1, [r7, #20]
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	e841 2300 	strex	r3, r2, [r1]
 80032a4:	613b      	str	r3, [r7, #16]
   return(result);
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1e5      	bne.n	8003278 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2220      	movs	r2, #32
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80032b4:	bf00      	nop
 80032b6:	3724      	adds	r7, #36	; 0x24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b095      	sub	sp, #84	; 0x54
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	330c      	adds	r3, #12
 80032ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d2:	e853 3f00 	ldrex	r3, [r3]
 80032d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80032d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	330c      	adds	r3, #12
 80032e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032e8:	643a      	str	r2, [r7, #64]	; 0x40
 80032ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80032ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80032f0:	e841 2300 	strex	r3, r2, [r1]
 80032f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80032f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1e5      	bne.n	80032c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	3314      	adds	r3, #20
 8003302:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	e853 3f00 	ldrex	r3, [r3]
 800330a:	61fb      	str	r3, [r7, #28]
   return(result);
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	f023 0301 	bic.w	r3, r3, #1
 8003312:	64bb      	str	r3, [r7, #72]	; 0x48
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	3314      	adds	r3, #20
 800331a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800331c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800331e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003320:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003324:	e841 2300 	strex	r3, r2, [r1]
 8003328:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1e5      	bne.n	80032fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003334:	2b01      	cmp	r3, #1
 8003336:	d119      	bne.n	800336c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	330c      	adds	r3, #12
 800333e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	e853 3f00 	ldrex	r3, [r3]
 8003346:	60bb      	str	r3, [r7, #8]
   return(result);
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	f023 0310 	bic.w	r3, r3, #16
 800334e:	647b      	str	r3, [r7, #68]	; 0x44
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	330c      	adds	r3, #12
 8003356:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003358:	61ba      	str	r2, [r7, #24]
 800335a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335c:	6979      	ldr	r1, [r7, #20]
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	e841 2300 	strex	r3, r2, [r1]
 8003364:	613b      	str	r3, [r7, #16]
   return(result);
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1e5      	bne.n	8003338 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2220      	movs	r2, #32
 8003370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	631a      	str	r2, [r3, #48]	; 0x30
}
 800337a:	bf00      	nop
 800337c:	3754      	adds	r7, #84	; 0x54
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b084      	sub	sp, #16
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003392:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f7ff fdbd 	bl	8002f20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033a6:	bf00      	nop
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b085      	sub	sp, #20
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b21      	cmp	r3, #33	; 0x21
 80033c0:	d13e      	bne.n	8003440 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ca:	d114      	bne.n	80033f6 <UART_Transmit_IT+0x48>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d110      	bne.n	80033f6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	461a      	mov	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	1c9a      	adds	r2, r3, #2
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	621a      	str	r2, [r3, #32]
 80033f4:	e008      	b.n	8003408 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	1c59      	adds	r1, r3, #1
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	6211      	str	r1, [r2, #32]
 8003400:	781a      	ldrb	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800340c:	b29b      	uxth	r3, r3
 800340e:	3b01      	subs	r3, #1
 8003410:	b29b      	uxth	r3, r3
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	4619      	mov	r1, r3
 8003416:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10f      	bne.n	800343c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800342a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800343a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800343c:	2300      	movs	r3, #0
 800343e:	e000      	b.n	8003442 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003440:	2302      	movs	r3, #2
  }
}
 8003442:	4618      	mov	r0, r3
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b082      	sub	sp, #8
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68da      	ldr	r2, [r3, #12]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003464:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2220      	movs	r2, #32
 800346a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7ff fd38 	bl	8002ee4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b08c      	sub	sp, #48	; 0x30
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b22      	cmp	r3, #34	; 0x22
 8003490:	f040 80ab 	bne.w	80035ea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800349c:	d117      	bne.n	80034ce <UART_Receive_IT+0x50>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d113      	bne.n	80034ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80034a6:	2300      	movs	r3, #0
 80034a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034bc:	b29a      	uxth	r2, r3
 80034be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c6:	1c9a      	adds	r2, r3, #2
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	629a      	str	r2, [r3, #40]	; 0x28
 80034cc:	e026      	b.n	800351c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034e0:	d007      	beq.n	80034f2 <UART_Receive_IT+0x74>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10a      	bne.n	8003500 <UART_Receive_IT+0x82>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d106      	bne.n	8003500 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fc:	701a      	strb	r2, [r3, #0]
 80034fe:	e008      	b.n	8003512 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	b2db      	uxtb	r3, r3
 8003508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800350c:	b2da      	uxtb	r2, r3
 800350e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003510:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003516:	1c5a      	adds	r2, r3, #1
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003520:	b29b      	uxth	r3, r3
 8003522:	3b01      	subs	r3, #1
 8003524:	b29b      	uxth	r3, r3
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	4619      	mov	r1, r3
 800352a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800352c:	2b00      	cmp	r3, #0
 800352e:	d15a      	bne.n	80035e6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0220 	bic.w	r2, r2, #32
 800353e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800354e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	695a      	ldr	r2, [r3, #20]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0201 	bic.w	r2, r2, #1
 800355e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356c:	2b01      	cmp	r3, #1
 800356e:	d135      	bne.n	80035dc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	330c      	adds	r3, #12
 800357c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	e853 3f00 	ldrex	r3, [r3]
 8003584:	613b      	str	r3, [r7, #16]
   return(result);
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	f023 0310 	bic.w	r3, r3, #16
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	330c      	adds	r3, #12
 8003594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003596:	623a      	str	r2, [r7, #32]
 8003598:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800359a:	69f9      	ldr	r1, [r7, #28]
 800359c:	6a3a      	ldr	r2, [r7, #32]
 800359e:	e841 2300 	strex	r3, r2, [r1]
 80035a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1e5      	bne.n	8003576 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0310 	and.w	r3, r3, #16
 80035b4:	2b10      	cmp	r3, #16
 80035b6:	d10a      	bne.n	80035ce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035b8:	2300      	movs	r3, #0
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80035d2:	4619      	mov	r1, r3
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f7ff fcad 	bl	8002f34 <HAL_UARTEx_RxEventCallback>
 80035da:	e002      	b.n	80035e2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7ff fc8b 	bl	8002ef8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80035e2:	2300      	movs	r3, #0
 80035e4:	e002      	b.n	80035ec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80035e6:	2300      	movs	r3, #0
 80035e8:	e000      	b.n	80035ec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80035ea:	2302      	movs	r3, #2
  }
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3730      	adds	r7, #48	; 0x30
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035f8:	b09f      	sub	sp, #124	; 0x7c
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800360a:	68d9      	ldr	r1, [r3, #12]
 800360c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	ea40 0301 	orr.w	r3, r0, r1
 8003614:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	431a      	orrs	r2, r3
 8003620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	431a      	orrs	r2, r3
 8003626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	4313      	orrs	r3, r2
 800362c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800362e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003638:	f021 010c 	bic.w	r1, r1, #12
 800363c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003642:	430b      	orrs	r3, r1
 8003644:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003652:	6999      	ldr	r1, [r3, #24]
 8003654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	ea40 0301 	orr.w	r3, r0, r1
 800365c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800365e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	4bc5      	ldr	r3, [pc, #788]	; (8003978 <UART_SetConfig+0x384>)
 8003664:	429a      	cmp	r2, r3
 8003666:	d004      	beq.n	8003672 <UART_SetConfig+0x7e>
 8003668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	4bc3      	ldr	r3, [pc, #780]	; (800397c <UART_SetConfig+0x388>)
 800366e:	429a      	cmp	r2, r3
 8003670:	d103      	bne.n	800367a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003672:	f7fe fe65 	bl	8002340 <HAL_RCC_GetPCLK2Freq>
 8003676:	6778      	str	r0, [r7, #116]	; 0x74
 8003678:	e002      	b.n	8003680 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800367a:	f7fe fe4d 	bl	8002318 <HAL_RCC_GetPCLK1Freq>
 800367e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003688:	f040 80b6 	bne.w	80037f8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800368c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800368e:	461c      	mov	r4, r3
 8003690:	f04f 0500 	mov.w	r5, #0
 8003694:	4622      	mov	r2, r4
 8003696:	462b      	mov	r3, r5
 8003698:	1891      	adds	r1, r2, r2
 800369a:	6439      	str	r1, [r7, #64]	; 0x40
 800369c:	415b      	adcs	r3, r3
 800369e:	647b      	str	r3, [r7, #68]	; 0x44
 80036a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80036a4:	1912      	adds	r2, r2, r4
 80036a6:	eb45 0303 	adc.w	r3, r5, r3
 80036aa:	f04f 0000 	mov.w	r0, #0
 80036ae:	f04f 0100 	mov.w	r1, #0
 80036b2:	00d9      	lsls	r1, r3, #3
 80036b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036b8:	00d0      	lsls	r0, r2, #3
 80036ba:	4602      	mov	r2, r0
 80036bc:	460b      	mov	r3, r1
 80036be:	1911      	adds	r1, r2, r4
 80036c0:	6639      	str	r1, [r7, #96]	; 0x60
 80036c2:	416b      	adcs	r3, r5
 80036c4:	667b      	str	r3, [r7, #100]	; 0x64
 80036c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	461a      	mov	r2, r3
 80036cc:	f04f 0300 	mov.w	r3, #0
 80036d0:	1891      	adds	r1, r2, r2
 80036d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80036d4:	415b      	adcs	r3, r3
 80036d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80036dc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80036e0:	f7fc fd7e 	bl	80001e0 <__aeabi_uldivmod>
 80036e4:	4602      	mov	r2, r0
 80036e6:	460b      	mov	r3, r1
 80036e8:	4ba5      	ldr	r3, [pc, #660]	; (8003980 <UART_SetConfig+0x38c>)
 80036ea:	fba3 2302 	umull	r2, r3, r3, r2
 80036ee:	095b      	lsrs	r3, r3, #5
 80036f0:	011e      	lsls	r6, r3, #4
 80036f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036f4:	461c      	mov	r4, r3
 80036f6:	f04f 0500 	mov.w	r5, #0
 80036fa:	4622      	mov	r2, r4
 80036fc:	462b      	mov	r3, r5
 80036fe:	1891      	adds	r1, r2, r2
 8003700:	6339      	str	r1, [r7, #48]	; 0x30
 8003702:	415b      	adcs	r3, r3
 8003704:	637b      	str	r3, [r7, #52]	; 0x34
 8003706:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800370a:	1912      	adds	r2, r2, r4
 800370c:	eb45 0303 	adc.w	r3, r5, r3
 8003710:	f04f 0000 	mov.w	r0, #0
 8003714:	f04f 0100 	mov.w	r1, #0
 8003718:	00d9      	lsls	r1, r3, #3
 800371a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800371e:	00d0      	lsls	r0, r2, #3
 8003720:	4602      	mov	r2, r0
 8003722:	460b      	mov	r3, r1
 8003724:	1911      	adds	r1, r2, r4
 8003726:	65b9      	str	r1, [r7, #88]	; 0x58
 8003728:	416b      	adcs	r3, r5
 800372a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800372c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	461a      	mov	r2, r3
 8003732:	f04f 0300 	mov.w	r3, #0
 8003736:	1891      	adds	r1, r2, r2
 8003738:	62b9      	str	r1, [r7, #40]	; 0x28
 800373a:	415b      	adcs	r3, r3
 800373c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800373e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003742:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003746:	f7fc fd4b 	bl	80001e0 <__aeabi_uldivmod>
 800374a:	4602      	mov	r2, r0
 800374c:	460b      	mov	r3, r1
 800374e:	4b8c      	ldr	r3, [pc, #560]	; (8003980 <UART_SetConfig+0x38c>)
 8003750:	fba3 1302 	umull	r1, r3, r3, r2
 8003754:	095b      	lsrs	r3, r3, #5
 8003756:	2164      	movs	r1, #100	; 0x64
 8003758:	fb01 f303 	mul.w	r3, r1, r3
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	3332      	adds	r3, #50	; 0x32
 8003762:	4a87      	ldr	r2, [pc, #540]	; (8003980 <UART_SetConfig+0x38c>)
 8003764:	fba2 2303 	umull	r2, r3, r2, r3
 8003768:	095b      	lsrs	r3, r3, #5
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003770:	441e      	add	r6, r3
 8003772:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003774:	4618      	mov	r0, r3
 8003776:	f04f 0100 	mov.w	r1, #0
 800377a:	4602      	mov	r2, r0
 800377c:	460b      	mov	r3, r1
 800377e:	1894      	adds	r4, r2, r2
 8003780:	623c      	str	r4, [r7, #32]
 8003782:	415b      	adcs	r3, r3
 8003784:	627b      	str	r3, [r7, #36]	; 0x24
 8003786:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800378a:	1812      	adds	r2, r2, r0
 800378c:	eb41 0303 	adc.w	r3, r1, r3
 8003790:	f04f 0400 	mov.w	r4, #0
 8003794:	f04f 0500 	mov.w	r5, #0
 8003798:	00dd      	lsls	r5, r3, #3
 800379a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800379e:	00d4      	lsls	r4, r2, #3
 80037a0:	4622      	mov	r2, r4
 80037a2:	462b      	mov	r3, r5
 80037a4:	1814      	adds	r4, r2, r0
 80037a6:	653c      	str	r4, [r7, #80]	; 0x50
 80037a8:	414b      	adcs	r3, r1
 80037aa:	657b      	str	r3, [r7, #84]	; 0x54
 80037ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	461a      	mov	r2, r3
 80037b2:	f04f 0300 	mov.w	r3, #0
 80037b6:	1891      	adds	r1, r2, r2
 80037b8:	61b9      	str	r1, [r7, #24]
 80037ba:	415b      	adcs	r3, r3
 80037bc:	61fb      	str	r3, [r7, #28]
 80037be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037c2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80037c6:	f7fc fd0b 	bl	80001e0 <__aeabi_uldivmod>
 80037ca:	4602      	mov	r2, r0
 80037cc:	460b      	mov	r3, r1
 80037ce:	4b6c      	ldr	r3, [pc, #432]	; (8003980 <UART_SetConfig+0x38c>)
 80037d0:	fba3 1302 	umull	r1, r3, r3, r2
 80037d4:	095b      	lsrs	r3, r3, #5
 80037d6:	2164      	movs	r1, #100	; 0x64
 80037d8:	fb01 f303 	mul.w	r3, r1, r3
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	3332      	adds	r3, #50	; 0x32
 80037e2:	4a67      	ldr	r2, [pc, #412]	; (8003980 <UART_SetConfig+0x38c>)
 80037e4:	fba2 2303 	umull	r2, r3, r2, r3
 80037e8:	095b      	lsrs	r3, r3, #5
 80037ea:	f003 0207 	and.w	r2, r3, #7
 80037ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4432      	add	r2, r6
 80037f4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037f6:	e0b9      	b.n	800396c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037fa:	461c      	mov	r4, r3
 80037fc:	f04f 0500 	mov.w	r5, #0
 8003800:	4622      	mov	r2, r4
 8003802:	462b      	mov	r3, r5
 8003804:	1891      	adds	r1, r2, r2
 8003806:	6139      	str	r1, [r7, #16]
 8003808:	415b      	adcs	r3, r3
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003810:	1912      	adds	r2, r2, r4
 8003812:	eb45 0303 	adc.w	r3, r5, r3
 8003816:	f04f 0000 	mov.w	r0, #0
 800381a:	f04f 0100 	mov.w	r1, #0
 800381e:	00d9      	lsls	r1, r3, #3
 8003820:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003824:	00d0      	lsls	r0, r2, #3
 8003826:	4602      	mov	r2, r0
 8003828:	460b      	mov	r3, r1
 800382a:	eb12 0804 	adds.w	r8, r2, r4
 800382e:	eb43 0905 	adc.w	r9, r3, r5
 8003832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	4618      	mov	r0, r3
 8003838:	f04f 0100 	mov.w	r1, #0
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	f04f 0300 	mov.w	r3, #0
 8003844:	008b      	lsls	r3, r1, #2
 8003846:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800384a:	0082      	lsls	r2, r0, #2
 800384c:	4640      	mov	r0, r8
 800384e:	4649      	mov	r1, r9
 8003850:	f7fc fcc6 	bl	80001e0 <__aeabi_uldivmod>
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	4b49      	ldr	r3, [pc, #292]	; (8003980 <UART_SetConfig+0x38c>)
 800385a:	fba3 2302 	umull	r2, r3, r3, r2
 800385e:	095b      	lsrs	r3, r3, #5
 8003860:	011e      	lsls	r6, r3, #4
 8003862:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003864:	4618      	mov	r0, r3
 8003866:	f04f 0100 	mov.w	r1, #0
 800386a:	4602      	mov	r2, r0
 800386c:	460b      	mov	r3, r1
 800386e:	1894      	adds	r4, r2, r2
 8003870:	60bc      	str	r4, [r7, #8]
 8003872:	415b      	adcs	r3, r3
 8003874:	60fb      	str	r3, [r7, #12]
 8003876:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800387a:	1812      	adds	r2, r2, r0
 800387c:	eb41 0303 	adc.w	r3, r1, r3
 8003880:	f04f 0400 	mov.w	r4, #0
 8003884:	f04f 0500 	mov.w	r5, #0
 8003888:	00dd      	lsls	r5, r3, #3
 800388a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800388e:	00d4      	lsls	r4, r2, #3
 8003890:	4622      	mov	r2, r4
 8003892:	462b      	mov	r3, r5
 8003894:	1814      	adds	r4, r2, r0
 8003896:	64bc      	str	r4, [r7, #72]	; 0x48
 8003898:	414b      	adcs	r3, r1
 800389a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800389c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f04f 0100 	mov.w	r1, #0
 80038a6:	f04f 0200 	mov.w	r2, #0
 80038aa:	f04f 0300 	mov.w	r3, #0
 80038ae:	008b      	lsls	r3, r1, #2
 80038b0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80038b4:	0082      	lsls	r2, r0, #2
 80038b6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80038ba:	f7fc fc91 	bl	80001e0 <__aeabi_uldivmod>
 80038be:	4602      	mov	r2, r0
 80038c0:	460b      	mov	r3, r1
 80038c2:	4b2f      	ldr	r3, [pc, #188]	; (8003980 <UART_SetConfig+0x38c>)
 80038c4:	fba3 1302 	umull	r1, r3, r3, r2
 80038c8:	095b      	lsrs	r3, r3, #5
 80038ca:	2164      	movs	r1, #100	; 0x64
 80038cc:	fb01 f303 	mul.w	r3, r1, r3
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	3332      	adds	r3, #50	; 0x32
 80038d6:	4a2a      	ldr	r2, [pc, #168]	; (8003980 <UART_SetConfig+0x38c>)
 80038d8:	fba2 2303 	umull	r2, r3, r2, r3
 80038dc:	095b      	lsrs	r3, r3, #5
 80038de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038e2:	441e      	add	r6, r3
 80038e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038e6:	4618      	mov	r0, r3
 80038e8:	f04f 0100 	mov.w	r1, #0
 80038ec:	4602      	mov	r2, r0
 80038ee:	460b      	mov	r3, r1
 80038f0:	1894      	adds	r4, r2, r2
 80038f2:	603c      	str	r4, [r7, #0]
 80038f4:	415b      	adcs	r3, r3
 80038f6:	607b      	str	r3, [r7, #4]
 80038f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038fc:	1812      	adds	r2, r2, r0
 80038fe:	eb41 0303 	adc.w	r3, r1, r3
 8003902:	f04f 0400 	mov.w	r4, #0
 8003906:	f04f 0500 	mov.w	r5, #0
 800390a:	00dd      	lsls	r5, r3, #3
 800390c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003910:	00d4      	lsls	r4, r2, #3
 8003912:	4622      	mov	r2, r4
 8003914:	462b      	mov	r3, r5
 8003916:	eb12 0a00 	adds.w	sl, r2, r0
 800391a:	eb43 0b01 	adc.w	fp, r3, r1
 800391e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	4618      	mov	r0, r3
 8003924:	f04f 0100 	mov.w	r1, #0
 8003928:	f04f 0200 	mov.w	r2, #0
 800392c:	f04f 0300 	mov.w	r3, #0
 8003930:	008b      	lsls	r3, r1, #2
 8003932:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003936:	0082      	lsls	r2, r0, #2
 8003938:	4650      	mov	r0, sl
 800393a:	4659      	mov	r1, fp
 800393c:	f7fc fc50 	bl	80001e0 <__aeabi_uldivmod>
 8003940:	4602      	mov	r2, r0
 8003942:	460b      	mov	r3, r1
 8003944:	4b0e      	ldr	r3, [pc, #56]	; (8003980 <UART_SetConfig+0x38c>)
 8003946:	fba3 1302 	umull	r1, r3, r3, r2
 800394a:	095b      	lsrs	r3, r3, #5
 800394c:	2164      	movs	r1, #100	; 0x64
 800394e:	fb01 f303 	mul.w	r3, r1, r3
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	3332      	adds	r3, #50	; 0x32
 8003958:	4a09      	ldr	r2, [pc, #36]	; (8003980 <UART_SetConfig+0x38c>)
 800395a:	fba2 2303 	umull	r2, r3, r2, r3
 800395e:	095b      	lsrs	r3, r3, #5
 8003960:	f003 020f 	and.w	r2, r3, #15
 8003964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4432      	add	r2, r6
 800396a:	609a      	str	r2, [r3, #8]
}
 800396c:	bf00      	nop
 800396e:	377c      	adds	r7, #124	; 0x7c
 8003970:	46bd      	mov	sp, r7
 8003972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003976:	bf00      	nop
 8003978:	40011000 	.word	0x40011000
 800397c:	40011400 	.word	0x40011400
 8003980:	51eb851f 	.word	0x51eb851f

08003984 <__NVIC_SetPriority>:
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	4603      	mov	r3, r0
 800398c:	6039      	str	r1, [r7, #0]
 800398e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003994:	2b00      	cmp	r3, #0
 8003996:	db0a      	blt.n	80039ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	b2da      	uxtb	r2, r3
 800399c:	490c      	ldr	r1, [pc, #48]	; (80039d0 <__NVIC_SetPriority+0x4c>)
 800399e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a2:	0112      	lsls	r2, r2, #4
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	440b      	add	r3, r1
 80039a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80039ac:	e00a      	b.n	80039c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	b2da      	uxtb	r2, r3
 80039b2:	4908      	ldr	r1, [pc, #32]	; (80039d4 <__NVIC_SetPriority+0x50>)
 80039b4:	79fb      	ldrb	r3, [r7, #7]
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	3b04      	subs	r3, #4
 80039bc:	0112      	lsls	r2, r2, #4
 80039be:	b2d2      	uxtb	r2, r2
 80039c0:	440b      	add	r3, r1
 80039c2:	761a      	strb	r2, [r3, #24]
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	e000e100 	.word	0xe000e100
 80039d4:	e000ed00 	.word	0xe000ed00

080039d8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80039dc:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <SysTick_Handler+0x1c>)
 80039de:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80039e0:	f001 fdd4 	bl	800558c <xTaskGetSchedulerState>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d001      	beq.n	80039ee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80039ea:	f002 fbbd 	bl	8006168 <xPortSysTickHandler>
  }
}
 80039ee:	bf00      	nop
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	e000e010 	.word	0xe000e010

080039f8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80039fc:	2100      	movs	r1, #0
 80039fe:	f06f 0004 	mvn.w	r0, #4
 8003a02:	f7ff ffbf 	bl	8003984 <__NVIC_SetPriority>
#endif
}
 8003a06:	bf00      	nop
 8003a08:	bd80      	pop	{r7, pc}
	...

08003a0c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a12:	f3ef 8305 	mrs	r3, IPSR
 8003a16:	603b      	str	r3, [r7, #0]
  return(result);
 8003a18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003a1e:	f06f 0305 	mvn.w	r3, #5
 8003a22:	607b      	str	r3, [r7, #4]
 8003a24:	e00c      	b.n	8003a40 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003a26:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <osKernelInitialize+0x44>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d105      	bne.n	8003a3a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003a2e:	4b08      	ldr	r3, [pc, #32]	; (8003a50 <osKernelInitialize+0x44>)
 8003a30:	2201      	movs	r2, #1
 8003a32:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	607b      	str	r3, [r7, #4]
 8003a38:	e002      	b.n	8003a40 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a40:	687b      	ldr	r3, [r7, #4]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	20000094 	.word	0x20000094

08003a54 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a5a:	f3ef 8305 	mrs	r3, IPSR
 8003a5e:	603b      	str	r3, [r7, #0]
  return(result);
 8003a60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d003      	beq.n	8003a6e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003a66:	f06f 0305 	mvn.w	r3, #5
 8003a6a:	607b      	str	r3, [r7, #4]
 8003a6c:	e010      	b.n	8003a90 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003a6e:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <osKernelStart+0x48>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d109      	bne.n	8003a8a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003a76:	f7ff ffbf 	bl	80039f8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003a7a:	4b08      	ldr	r3, [pc, #32]	; (8003a9c <osKernelStart+0x48>)
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003a80:	f001 f928 	bl	8004cd4 <vTaskStartScheduler>
      stat = osOK;
 8003a84:	2300      	movs	r3, #0
 8003a86:	607b      	str	r3, [r7, #4]
 8003a88:	e002      	b.n	8003a90 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a90:	687b      	ldr	r3, [r7, #4]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	20000094 	.word	0x20000094

08003aa0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08e      	sub	sp, #56	; 0x38
 8003aa4:	af04      	add	r7, sp, #16
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003aac:	2300      	movs	r3, #0
 8003aae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ab0:	f3ef 8305 	mrs	r3, IPSR
 8003ab4:	617b      	str	r3, [r7, #20]
  return(result);
 8003ab6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d17e      	bne.n	8003bba <osThreadNew+0x11a>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d07b      	beq.n	8003bba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003ac2:	2380      	movs	r3, #128	; 0x80
 8003ac4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003ac6:	2318      	movs	r3, #24
 8003ac8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003aca:	2300      	movs	r3, #0
 8003acc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003ace:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d045      	beq.n	8003b66 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <osThreadNew+0x48>
        name = attr->name;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d002      	beq.n	8003af6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d008      	beq.n	8003b0e <osThreadNew+0x6e>
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	2b38      	cmp	r3, #56	; 0x38
 8003b00:	d805      	bhi.n	8003b0e <osThreadNew+0x6e>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <osThreadNew+0x72>
        return (NULL);
 8003b0e:	2300      	movs	r3, #0
 8003b10:	e054      	b.n	8003bbc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	089b      	lsrs	r3, r3, #2
 8003b20:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00e      	beq.n	8003b48 <osThreadNew+0xa8>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	2bbb      	cmp	r3, #187	; 0xbb
 8003b30:	d90a      	bls.n	8003b48 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d006      	beq.n	8003b48 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <osThreadNew+0xa8>
        mem = 1;
 8003b42:	2301      	movs	r3, #1
 8003b44:	61bb      	str	r3, [r7, #24]
 8003b46:	e010      	b.n	8003b6a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10c      	bne.n	8003b6a <osThreadNew+0xca>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d108      	bne.n	8003b6a <osThreadNew+0xca>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d104      	bne.n	8003b6a <osThreadNew+0xca>
          mem = 0;
 8003b60:	2300      	movs	r3, #0
 8003b62:	61bb      	str	r3, [r7, #24]
 8003b64:	e001      	b.n	8003b6a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003b66:	2300      	movs	r3, #0
 8003b68:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d110      	bne.n	8003b92 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b78:	9202      	str	r2, [sp, #8]
 8003b7a:	9301      	str	r3, [sp, #4]
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	6a3a      	ldr	r2, [r7, #32]
 8003b84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 feb8 	bl	80048fc <xTaskCreateStatic>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	613b      	str	r3, [r7, #16]
 8003b90:	e013      	b.n	8003bba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d110      	bne.n	8003bba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003b98:	6a3b      	ldr	r3, [r7, #32]
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	f107 0310 	add.w	r3, r7, #16
 8003ba0:	9301      	str	r3, [sp, #4]
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 ff03 	bl	80049b6 <xTaskCreate>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d001      	beq.n	8003bba <osThreadNew+0x11a>
            hTask = NULL;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003bba:	693b      	ldr	r3, [r7, #16]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3728      	adds	r7, #40	; 0x28
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bcc:	f3ef 8305 	mrs	r3, IPSR
 8003bd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bd2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <osDelay+0x1c>
    stat = osErrorISR;
 8003bd8:	f06f 0305 	mvn.w	r3, #5
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	e007      	b.n	8003bf0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003be0:	2300      	movs	r3, #0
 8003be2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d002      	beq.n	8003bf0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f001 f83e 	bl	8004c6c <vTaskDelay>
    }
  }

  return (stat);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b08a      	sub	sp, #40	; 0x28
 8003bfe:	af02      	add	r7, sp, #8
 8003c00:	60f8      	str	r0, [r7, #12]
 8003c02:	60b9      	str	r1, [r7, #8]
 8003c04:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003c06:	2300      	movs	r3, #0
 8003c08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c0a:	f3ef 8305 	mrs	r3, IPSR
 8003c0e:	613b      	str	r3, [r7, #16]
  return(result);
 8003c10:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d15f      	bne.n	8003cd6 <osMessageQueueNew+0xdc>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d05c      	beq.n	8003cd6 <osMessageQueueNew+0xdc>
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d059      	beq.n	8003cd6 <osMessageQueueNew+0xdc>
    mem = -1;
 8003c22:	f04f 33ff 	mov.w	r3, #4294967295
 8003c26:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d029      	beq.n	8003c82 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d012      	beq.n	8003c5c <osMessageQueueNew+0x62>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	2b4f      	cmp	r3, #79	; 0x4f
 8003c3c:	d90e      	bls.n	8003c5c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00a      	beq.n	8003c5c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	695a      	ldr	r2, [r3, #20]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	68b9      	ldr	r1, [r7, #8]
 8003c4e:	fb01 f303 	mul.w	r3, r1, r3
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d302      	bcc.n	8003c5c <osMessageQueueNew+0x62>
        mem = 1;
 8003c56:	2301      	movs	r3, #1
 8003c58:	61bb      	str	r3, [r7, #24]
 8003c5a:	e014      	b.n	8003c86 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d110      	bne.n	8003c86 <osMessageQueueNew+0x8c>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10c      	bne.n	8003c86 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d108      	bne.n	8003c86 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d104      	bne.n	8003c86 <osMessageQueueNew+0x8c>
          mem = 0;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	61bb      	str	r3, [r7, #24]
 8003c80:	e001      	b.n	8003c86 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003c82:	2300      	movs	r3, #0
 8003c84:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d10b      	bne.n	8003ca4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	691a      	ldr	r2, [r3, #16]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	2100      	movs	r1, #0
 8003c96:	9100      	str	r1, [sp, #0]
 8003c98:	68b9      	ldr	r1, [r7, #8]
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 f970 	bl	8003f80 <xQueueGenericCreateStatic>
 8003ca0:	61f8      	str	r0, [r7, #28]
 8003ca2:	e008      	b.n	8003cb6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d105      	bne.n	8003cb6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003caa:	2200      	movs	r2, #0
 8003cac:	68b9      	ldr	r1, [r7, #8]
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 f9de 	bl	8004070 <xQueueGenericCreate>
 8003cb4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00c      	beq.n	8003cd6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <osMessageQueueNew+0xd0>
        name = attr->name;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	617b      	str	r3, [r7, #20]
 8003cc8:	e001      	b.n	8003cce <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003cce:	6979      	ldr	r1, [r7, #20]
 8003cd0:	69f8      	ldr	r0, [r7, #28]
 8003cd2:	f000 fdb5 	bl	8004840 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003cd6:	69fb      	ldr	r3, [r7, #28]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3720      	adds	r7, #32
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	4a07      	ldr	r2, [pc, #28]	; (8003d0c <vApplicationGetIdleTaskMemory+0x2c>)
 8003cf0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	4a06      	ldr	r2, [pc, #24]	; (8003d10 <vApplicationGetIdleTaskMemory+0x30>)
 8003cf6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2280      	movs	r2, #128	; 0x80
 8003cfc:	601a      	str	r2, [r3, #0]
}
 8003cfe:	bf00      	nop
 8003d00:	3714      	adds	r7, #20
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	20000098 	.word	0x20000098
 8003d10:	20000154 	.word	0x20000154

08003d14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4a07      	ldr	r2, [pc, #28]	; (8003d40 <vApplicationGetTimerTaskMemory+0x2c>)
 8003d24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	4a06      	ldr	r2, [pc, #24]	; (8003d44 <vApplicationGetTimerTaskMemory+0x30>)
 8003d2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d32:	601a      	str	r2, [r3, #0]
}
 8003d34:	bf00      	nop
 8003d36:	3714      	adds	r7, #20
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	20000354 	.word	0x20000354
 8003d44:	20000410 	.word	0x20000410

08003d48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f103 0208 	add.w	r2, r3, #8
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f103 0208 	add.w	r2, r3, #8
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f103 0208 	add.w	r2, r3, #8
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003da2:	b480      	push	{r7}
 8003da4:	b085      	sub	sp, #20
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
 8003daa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	689a      	ldr	r2, [r3, #8]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	1c5a      	adds	r2, r3, #1
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	601a      	str	r2, [r3, #0]
}
 8003dde:	bf00      	nop
 8003de0:	3714      	adds	r7, #20
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003dea:	b480      	push	{r7}
 8003dec:	b085      	sub	sp, #20
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
 8003df2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e00:	d103      	bne.n	8003e0a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	e00c      	b.n	8003e24 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	3308      	adds	r3, #8
 8003e0e:	60fb      	str	r3, [r7, #12]
 8003e10:	e002      	b.n	8003e18 <vListInsert+0x2e>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d2f6      	bcs.n	8003e12 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	1c5a      	adds	r2, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	601a      	str	r2, [r3, #0]
}
 8003e50:	bf00      	nop
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6892      	ldr	r2, [r2, #8]
 8003e72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6852      	ldr	r2, [r2, #4]
 8003e7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d103      	bne.n	8003e90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	1e5a      	subs	r2, r3, #1
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3714      	adds	r7, #20
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10a      	bne.n	8003eda <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec8:	f383 8811 	msr	BASEPRI, r3
 8003ecc:	f3bf 8f6f 	isb	sy
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003ed6:	bf00      	nop
 8003ed8:	e7fe      	b.n	8003ed8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003eda:	f002 f8b3 	bl	8006044 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee6:	68f9      	ldr	r1, [r7, #12]
 8003ee8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003eea:	fb01 f303 	mul.w	r3, r1, r3
 8003eee:	441a      	add	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	68f9      	ldr	r1, [r7, #12]
 8003f0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f10:	fb01 f303 	mul.w	r3, r1, r3
 8003f14:	441a      	add	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	22ff      	movs	r2, #255	; 0xff
 8003f1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	22ff      	movs	r2, #255	; 0xff
 8003f26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d114      	bne.n	8003f5a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d01a      	beq.n	8003f6e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	3310      	adds	r3, #16
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f001 f963 	bl	8005208 <xTaskRemoveFromEventList>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d012      	beq.n	8003f6e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003f48:	4b0c      	ldr	r3, [pc, #48]	; (8003f7c <xQueueGenericReset+0xcc>)
 8003f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	f3bf 8f4f 	dsb	sy
 8003f54:	f3bf 8f6f 	isb	sy
 8003f58:	e009      	b.n	8003f6e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	3310      	adds	r3, #16
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff fef2 	bl	8003d48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	3324      	adds	r3, #36	; 0x24
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7ff feed 	bl	8003d48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003f6e:	f002 f899 	bl	80060a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003f72:	2301      	movs	r3, #1
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	e000ed04 	.word	0xe000ed04

08003f80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08e      	sub	sp, #56	; 0x38
 8003f84:	af02      	add	r7, sp, #8
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
 8003f8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10a      	bne.n	8003faa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f98:	f383 8811 	msr	BASEPRI, r3
 8003f9c:	f3bf 8f6f 	isb	sy
 8003fa0:	f3bf 8f4f 	dsb	sy
 8003fa4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003fa6:	bf00      	nop
 8003fa8:	e7fe      	b.n	8003fa8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10a      	bne.n	8003fc6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb4:	f383 8811 	msr	BASEPRI, r3
 8003fb8:	f3bf 8f6f 	isb	sy
 8003fbc:	f3bf 8f4f 	dsb	sy
 8003fc0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003fc2:	bf00      	nop
 8003fc4:	e7fe      	b.n	8003fc4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d002      	beq.n	8003fd2 <xQueueGenericCreateStatic+0x52>
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <xQueueGenericCreateStatic+0x56>
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e000      	b.n	8003fd8 <xQueueGenericCreateStatic+0x58>
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10a      	bne.n	8003ff2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe0:	f383 8811 	msr	BASEPRI, r3
 8003fe4:	f3bf 8f6f 	isb	sy
 8003fe8:	f3bf 8f4f 	dsb	sy
 8003fec:	623b      	str	r3, [r7, #32]
}
 8003fee:	bf00      	nop
 8003ff0:	e7fe      	b.n	8003ff0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d102      	bne.n	8003ffe <xQueueGenericCreateStatic+0x7e>
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <xQueueGenericCreateStatic+0x82>
 8003ffe:	2301      	movs	r3, #1
 8004000:	e000      	b.n	8004004 <xQueueGenericCreateStatic+0x84>
 8004002:	2300      	movs	r3, #0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10a      	bne.n	800401e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400c:	f383 8811 	msr	BASEPRI, r3
 8004010:	f3bf 8f6f 	isb	sy
 8004014:	f3bf 8f4f 	dsb	sy
 8004018:	61fb      	str	r3, [r7, #28]
}
 800401a:	bf00      	nop
 800401c:	e7fe      	b.n	800401c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800401e:	2350      	movs	r3, #80	; 0x50
 8004020:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2b50      	cmp	r3, #80	; 0x50
 8004026:	d00a      	beq.n	800403e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402c:	f383 8811 	msr	BASEPRI, r3
 8004030:	f3bf 8f6f 	isb	sy
 8004034:	f3bf 8f4f 	dsb	sy
 8004038:	61bb      	str	r3, [r7, #24]
}
 800403a:	bf00      	nop
 800403c:	e7fe      	b.n	800403c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800403e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00d      	beq.n	8004066 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800404a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004052:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	4613      	mov	r3, r2
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	68b9      	ldr	r1, [r7, #8]
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f000 f83f 	bl	80040e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004068:	4618      	mov	r0, r3
 800406a:	3730      	adds	r7, #48	; 0x30
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004070:	b580      	push	{r7, lr}
 8004072:	b08a      	sub	sp, #40	; 0x28
 8004074:	af02      	add	r7, sp, #8
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	4613      	mov	r3, r2
 800407c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10a      	bne.n	800409a <xQueueGenericCreate+0x2a>
	__asm volatile
 8004084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004088:	f383 8811 	msr	BASEPRI, r3
 800408c:	f3bf 8f6f 	isb	sy
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	613b      	str	r3, [r7, #16]
}
 8004096:	bf00      	nop
 8004098:	e7fe      	b.n	8004098 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	fb02 f303 	mul.w	r3, r2, r3
 80040a2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	3350      	adds	r3, #80	; 0x50
 80040a8:	4618      	mov	r0, r3
 80040aa:	f002 f8ed 	bl	8006288 <pvPortMalloc>
 80040ae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d011      	beq.n	80040da <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	3350      	adds	r3, #80	; 0x50
 80040be:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040c8:	79fa      	ldrb	r2, [r7, #7]
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	4613      	mov	r3, r2
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	68b9      	ldr	r1, [r7, #8]
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f000 f805 	bl	80040e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80040da:	69bb      	ldr	r3, [r7, #24]
	}
 80040dc:	4618      	mov	r0, r3
 80040de:	3720      	adds	r7, #32
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
 80040f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d103      	bne.n	8004100 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	e002      	b.n	8004106 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	68ba      	ldr	r2, [r7, #8]
 8004110:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004112:	2101      	movs	r1, #1
 8004114:	69b8      	ldr	r0, [r7, #24]
 8004116:	f7ff fecb 	bl	8003eb0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	78fa      	ldrb	r2, [r7, #3]
 800411e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004122:	bf00      	nop
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
	...

0800412c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b08e      	sub	sp, #56	; 0x38
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
 8004138:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800413a:	2300      	movs	r3, #0
 800413c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10a      	bne.n	800415e <xQueueGenericSend+0x32>
	__asm volatile
 8004148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414c:	f383 8811 	msr	BASEPRI, r3
 8004150:	f3bf 8f6f 	isb	sy
 8004154:	f3bf 8f4f 	dsb	sy
 8004158:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800415a:	bf00      	nop
 800415c:	e7fe      	b.n	800415c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d103      	bne.n	800416c <xQueueGenericSend+0x40>
 8004164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004168:	2b00      	cmp	r3, #0
 800416a:	d101      	bne.n	8004170 <xQueueGenericSend+0x44>
 800416c:	2301      	movs	r3, #1
 800416e:	e000      	b.n	8004172 <xQueueGenericSend+0x46>
 8004170:	2300      	movs	r3, #0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10a      	bne.n	800418c <xQueueGenericSend+0x60>
	__asm volatile
 8004176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417a:	f383 8811 	msr	BASEPRI, r3
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	f3bf 8f4f 	dsb	sy
 8004186:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004188:	bf00      	nop
 800418a:	e7fe      	b.n	800418a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	2b02      	cmp	r3, #2
 8004190:	d103      	bne.n	800419a <xQueueGenericSend+0x6e>
 8004192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004196:	2b01      	cmp	r3, #1
 8004198:	d101      	bne.n	800419e <xQueueGenericSend+0x72>
 800419a:	2301      	movs	r3, #1
 800419c:	e000      	b.n	80041a0 <xQueueGenericSend+0x74>
 800419e:	2300      	movs	r3, #0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10a      	bne.n	80041ba <xQueueGenericSend+0x8e>
	__asm volatile
 80041a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	623b      	str	r3, [r7, #32]
}
 80041b6:	bf00      	nop
 80041b8:	e7fe      	b.n	80041b8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041ba:	f001 f9e7 	bl	800558c <xTaskGetSchedulerState>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d102      	bne.n	80041ca <xQueueGenericSend+0x9e>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <xQueueGenericSend+0xa2>
 80041ca:	2301      	movs	r3, #1
 80041cc:	e000      	b.n	80041d0 <xQueueGenericSend+0xa4>
 80041ce:	2300      	movs	r3, #0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10a      	bne.n	80041ea <xQueueGenericSend+0xbe>
	__asm volatile
 80041d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d8:	f383 8811 	msr	BASEPRI, r3
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	61fb      	str	r3, [r7, #28]
}
 80041e6:	bf00      	nop
 80041e8:	e7fe      	b.n	80041e8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80041ea:	f001 ff2b 	bl	8006044 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d302      	bcc.n	8004200 <xQueueGenericSend+0xd4>
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d129      	bne.n	8004254 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	68b9      	ldr	r1, [r7, #8]
 8004204:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004206:	f000 fa0b 	bl	8004620 <prvCopyDataToQueue>
 800420a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800420c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	2b00      	cmp	r3, #0
 8004212:	d010      	beq.n	8004236 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004216:	3324      	adds	r3, #36	; 0x24
 8004218:	4618      	mov	r0, r3
 800421a:	f000 fff5 	bl	8005208 <xTaskRemoveFromEventList>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d013      	beq.n	800424c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004224:	4b3f      	ldr	r3, [pc, #252]	; (8004324 <xQueueGenericSend+0x1f8>)
 8004226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	f3bf 8f4f 	dsb	sy
 8004230:	f3bf 8f6f 	isb	sy
 8004234:	e00a      	b.n	800424c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004238:	2b00      	cmp	r3, #0
 800423a:	d007      	beq.n	800424c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800423c:	4b39      	ldr	r3, [pc, #228]	; (8004324 <xQueueGenericSend+0x1f8>)
 800423e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800424c:	f001 ff2a 	bl	80060a4 <vPortExitCritical>
				return pdPASS;
 8004250:	2301      	movs	r3, #1
 8004252:	e063      	b.n	800431c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d103      	bne.n	8004262 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800425a:	f001 ff23 	bl	80060a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800425e:	2300      	movs	r3, #0
 8004260:	e05c      	b.n	800431c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004264:	2b00      	cmp	r3, #0
 8004266:	d106      	bne.n	8004276 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004268:	f107 0314 	add.w	r3, r7, #20
 800426c:	4618      	mov	r0, r3
 800426e:	f001 f82f 	bl	80052d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004272:	2301      	movs	r3, #1
 8004274:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004276:	f001 ff15 	bl	80060a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800427a:	f000 fd9b 	bl	8004db4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800427e:	f001 fee1 	bl	8006044 <vPortEnterCritical>
 8004282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004284:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004288:	b25b      	sxtb	r3, r3
 800428a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428e:	d103      	bne.n	8004298 <xQueueGenericSend+0x16c>
 8004290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800429e:	b25b      	sxtb	r3, r3
 80042a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a4:	d103      	bne.n	80042ae <xQueueGenericSend+0x182>
 80042a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042ae:	f001 fef9 	bl	80060a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042b2:	1d3a      	adds	r2, r7, #4
 80042b4:	f107 0314 	add.w	r3, r7, #20
 80042b8:	4611      	mov	r1, r2
 80042ba:	4618      	mov	r0, r3
 80042bc:	f001 f81e 	bl	80052fc <xTaskCheckForTimeOut>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d124      	bne.n	8004310 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80042c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042c8:	f000 faa2 	bl	8004810 <prvIsQueueFull>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d018      	beq.n	8004304 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80042d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d4:	3310      	adds	r3, #16
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	4611      	mov	r1, r2
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 ff44 	bl	8005168 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80042e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042e2:	f000 fa2d 	bl	8004740 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80042e6:	f000 fd73 	bl	8004dd0 <xTaskResumeAll>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f47f af7c 	bne.w	80041ea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80042f2:	4b0c      	ldr	r3, [pc, #48]	; (8004324 <xQueueGenericSend+0x1f8>)
 80042f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	f3bf 8f6f 	isb	sy
 8004302:	e772      	b.n	80041ea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004304:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004306:	f000 fa1b 	bl	8004740 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800430a:	f000 fd61 	bl	8004dd0 <xTaskResumeAll>
 800430e:	e76c      	b.n	80041ea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004310:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004312:	f000 fa15 	bl	8004740 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004316:	f000 fd5b 	bl	8004dd0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800431a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800431c:	4618      	mov	r0, r3
 800431e:	3738      	adds	r7, #56	; 0x38
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	e000ed04 	.word	0xe000ed04

08004328 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b090      	sub	sp, #64	; 0x40
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
 8004334:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800433a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10a      	bne.n	8004356 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004344:	f383 8811 	msr	BASEPRI, r3
 8004348:	f3bf 8f6f 	isb	sy
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004352:	bf00      	nop
 8004354:	e7fe      	b.n	8004354 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d103      	bne.n	8004364 <xQueueGenericSendFromISR+0x3c>
 800435c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800435e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004360:	2b00      	cmp	r3, #0
 8004362:	d101      	bne.n	8004368 <xQueueGenericSendFromISR+0x40>
 8004364:	2301      	movs	r3, #1
 8004366:	e000      	b.n	800436a <xQueueGenericSendFromISR+0x42>
 8004368:	2300      	movs	r3, #0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10a      	bne.n	8004384 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800436e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004372:	f383 8811 	msr	BASEPRI, r3
 8004376:	f3bf 8f6f 	isb	sy
 800437a:	f3bf 8f4f 	dsb	sy
 800437e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004380:	bf00      	nop
 8004382:	e7fe      	b.n	8004382 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	2b02      	cmp	r3, #2
 8004388:	d103      	bne.n	8004392 <xQueueGenericSendFromISR+0x6a>
 800438a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800438c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438e:	2b01      	cmp	r3, #1
 8004390:	d101      	bne.n	8004396 <xQueueGenericSendFromISR+0x6e>
 8004392:	2301      	movs	r3, #1
 8004394:	e000      	b.n	8004398 <xQueueGenericSendFromISR+0x70>
 8004396:	2300      	movs	r3, #0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10a      	bne.n	80043b2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800439c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a0:	f383 8811 	msr	BASEPRI, r3
 80043a4:	f3bf 8f6f 	isb	sy
 80043a8:	f3bf 8f4f 	dsb	sy
 80043ac:	623b      	str	r3, [r7, #32]
}
 80043ae:	bf00      	nop
 80043b0:	e7fe      	b.n	80043b0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043b2:	f001 ff29 	bl	8006208 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80043b6:	f3ef 8211 	mrs	r2, BASEPRI
 80043ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	61fa      	str	r2, [r7, #28]
 80043cc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80043ce:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80043d0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043da:	429a      	cmp	r2, r3
 80043dc:	d302      	bcc.n	80043e4 <xQueueGenericSendFromISR+0xbc>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d12f      	bne.n	8004444 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80043e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	68b9      	ldr	r1, [r7, #8]
 80043f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80043fa:	f000 f911 	bl	8004620 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80043fe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004406:	d112      	bne.n	800442e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	2b00      	cmp	r3, #0
 800440e:	d016      	beq.n	800443e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004412:	3324      	adds	r3, #36	; 0x24
 8004414:	4618      	mov	r0, r3
 8004416:	f000 fef7 	bl	8005208 <xTaskRemoveFromEventList>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00e      	beq.n	800443e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00b      	beq.n	800443e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	e007      	b.n	800443e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800442e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004432:	3301      	adds	r3, #1
 8004434:	b2db      	uxtb	r3, r3
 8004436:	b25a      	sxtb	r2, r3
 8004438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800443e:	2301      	movs	r3, #1
 8004440:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004442:	e001      	b.n	8004448 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004444:	2300      	movs	r3, #0
 8004446:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800444a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004452:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004456:	4618      	mov	r0, r3
 8004458:	3740      	adds	r7, #64	; 0x40
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
	...

08004460 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b08c      	sub	sp, #48	; 0x30
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800446c:	2300      	movs	r3, #0
 800446e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10a      	bne.n	8004490 <xQueueReceive+0x30>
	__asm volatile
 800447a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447e:	f383 8811 	msr	BASEPRI, r3
 8004482:	f3bf 8f6f 	isb	sy
 8004486:	f3bf 8f4f 	dsb	sy
 800448a:	623b      	str	r3, [r7, #32]
}
 800448c:	bf00      	nop
 800448e:	e7fe      	b.n	800448e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d103      	bne.n	800449e <xQueueReceive+0x3e>
 8004496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <xQueueReceive+0x42>
 800449e:	2301      	movs	r3, #1
 80044a0:	e000      	b.n	80044a4 <xQueueReceive+0x44>
 80044a2:	2300      	movs	r3, #0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10a      	bne.n	80044be <xQueueReceive+0x5e>
	__asm volatile
 80044a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ac:	f383 8811 	msr	BASEPRI, r3
 80044b0:	f3bf 8f6f 	isb	sy
 80044b4:	f3bf 8f4f 	dsb	sy
 80044b8:	61fb      	str	r3, [r7, #28]
}
 80044ba:	bf00      	nop
 80044bc:	e7fe      	b.n	80044bc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044be:	f001 f865 	bl	800558c <xTaskGetSchedulerState>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d102      	bne.n	80044ce <xQueueReceive+0x6e>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <xQueueReceive+0x72>
 80044ce:	2301      	movs	r3, #1
 80044d0:	e000      	b.n	80044d4 <xQueueReceive+0x74>
 80044d2:	2300      	movs	r3, #0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d10a      	bne.n	80044ee <xQueueReceive+0x8e>
	__asm volatile
 80044d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044dc:	f383 8811 	msr	BASEPRI, r3
 80044e0:	f3bf 8f6f 	isb	sy
 80044e4:	f3bf 8f4f 	dsb	sy
 80044e8:	61bb      	str	r3, [r7, #24]
}
 80044ea:	bf00      	nop
 80044ec:	e7fe      	b.n	80044ec <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80044ee:	f001 fda9 	bl	8006044 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d01f      	beq.n	800453e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80044fe:	68b9      	ldr	r1, [r7, #8]
 8004500:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004502:	f000 f8f7 	bl	80046f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	1e5a      	subs	r2, r3, #1
 800450a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800450e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00f      	beq.n	8004536 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004518:	3310      	adds	r3, #16
 800451a:	4618      	mov	r0, r3
 800451c:	f000 fe74 	bl	8005208 <xTaskRemoveFromEventList>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d007      	beq.n	8004536 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004526:	4b3d      	ldr	r3, [pc, #244]	; (800461c <xQueueReceive+0x1bc>)
 8004528:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004536:	f001 fdb5 	bl	80060a4 <vPortExitCritical>
				return pdPASS;
 800453a:	2301      	movs	r3, #1
 800453c:	e069      	b.n	8004612 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d103      	bne.n	800454c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004544:	f001 fdae 	bl	80060a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004548:	2300      	movs	r3, #0
 800454a:	e062      	b.n	8004612 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800454c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800454e:	2b00      	cmp	r3, #0
 8004550:	d106      	bne.n	8004560 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004552:	f107 0310 	add.w	r3, r7, #16
 8004556:	4618      	mov	r0, r3
 8004558:	f000 feba 	bl	80052d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800455c:	2301      	movs	r3, #1
 800455e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004560:	f001 fda0 	bl	80060a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004564:	f000 fc26 	bl	8004db4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004568:	f001 fd6c 	bl	8006044 <vPortEnterCritical>
 800456c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004572:	b25b      	sxtb	r3, r3
 8004574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004578:	d103      	bne.n	8004582 <xQueueReceive+0x122>
 800457a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004584:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004588:	b25b      	sxtb	r3, r3
 800458a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800458e:	d103      	bne.n	8004598 <xQueueReceive+0x138>
 8004590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004592:	2200      	movs	r2, #0
 8004594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004598:	f001 fd84 	bl	80060a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800459c:	1d3a      	adds	r2, r7, #4
 800459e:	f107 0310 	add.w	r3, r7, #16
 80045a2:	4611      	mov	r1, r2
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 fea9 	bl	80052fc <xTaskCheckForTimeOut>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d123      	bne.n	80045f8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045b2:	f000 f917 	bl	80047e4 <prvIsQueueEmpty>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d017      	beq.n	80045ec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80045bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045be:	3324      	adds	r3, #36	; 0x24
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	4611      	mov	r1, r2
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 fdcf 	bl	8005168 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80045ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045cc:	f000 f8b8 	bl	8004740 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80045d0:	f000 fbfe 	bl	8004dd0 <xTaskResumeAll>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d189      	bne.n	80044ee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80045da:	4b10      	ldr	r3, [pc, #64]	; (800461c <xQueueReceive+0x1bc>)
 80045dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	e780      	b.n	80044ee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80045ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045ee:	f000 f8a7 	bl	8004740 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045f2:	f000 fbed 	bl	8004dd0 <xTaskResumeAll>
 80045f6:	e77a      	b.n	80044ee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80045f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045fa:	f000 f8a1 	bl	8004740 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045fe:	f000 fbe7 	bl	8004dd0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004602:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004604:	f000 f8ee 	bl	80047e4 <prvIsQueueEmpty>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	f43f af6f 	beq.w	80044ee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004610:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004612:	4618      	mov	r0, r3
 8004614:	3730      	adds	r7, #48	; 0x30
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	e000ed04 	.word	0xe000ed04

08004620 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800462c:	2300      	movs	r3, #0
 800462e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004634:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10d      	bne.n	800465a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d14d      	bne.n	80046e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	4618      	mov	r0, r3
 800464c:	f000 ffbc 	bl	80055c8 <xTaskPriorityDisinherit>
 8004650:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	609a      	str	r2, [r3, #8]
 8004658:	e043      	b.n	80046e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d119      	bne.n	8004694 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6858      	ldr	r0, [r3, #4]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004668:	461a      	mov	r2, r3
 800466a:	68b9      	ldr	r1, [r7, #8]
 800466c:	f002 fac3 	bl	8006bf6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004678:	441a      	add	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	429a      	cmp	r2, r3
 8004688:	d32b      	bcc.n	80046e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	605a      	str	r2, [r3, #4]
 8004692:	e026      	b.n	80046e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	68d8      	ldr	r0, [r3, #12]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469c:	461a      	mov	r2, r3
 800469e:	68b9      	ldr	r1, [r7, #8]
 80046a0:	f002 faa9 	bl	8006bf6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	68da      	ldr	r2, [r3, #12]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ac:	425b      	negs	r3, r3
 80046ae:	441a      	add	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	68da      	ldr	r2, [r3, #12]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d207      	bcs.n	80046d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c8:	425b      	negs	r3, r3
 80046ca:	441a      	add	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d105      	bne.n	80046e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d002      	beq.n	80046e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	3b01      	subs	r3, #1
 80046e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80046ea:	697b      	ldr	r3, [r7, #20]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3718      	adds	r7, #24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	2b00      	cmp	r3, #0
 8004704:	d018      	beq.n	8004738 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	441a      	add	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68da      	ldr	r2, [r3, #12]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	429a      	cmp	r2, r3
 800471e:	d303      	bcc.n	8004728 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68d9      	ldr	r1, [r3, #12]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004730:	461a      	mov	r2, r3
 8004732:	6838      	ldr	r0, [r7, #0]
 8004734:	f002 fa5f 	bl	8006bf6 <memcpy>
	}
}
 8004738:	bf00      	nop
 800473a:	3708      	adds	r7, #8
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004748:	f001 fc7c 	bl	8006044 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004752:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004754:	e011      	b.n	800477a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	2b00      	cmp	r3, #0
 800475c:	d012      	beq.n	8004784 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	3324      	adds	r3, #36	; 0x24
 8004762:	4618      	mov	r0, r3
 8004764:	f000 fd50 	bl	8005208 <xTaskRemoveFromEventList>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800476e:	f000 fe27 	bl	80053c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004772:	7bfb      	ldrb	r3, [r7, #15]
 8004774:	3b01      	subs	r3, #1
 8004776:	b2db      	uxtb	r3, r3
 8004778:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800477a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800477e:	2b00      	cmp	r3, #0
 8004780:	dce9      	bgt.n	8004756 <prvUnlockQueue+0x16>
 8004782:	e000      	b.n	8004786 <prvUnlockQueue+0x46>
					break;
 8004784:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	22ff      	movs	r2, #255	; 0xff
 800478a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800478e:	f001 fc89 	bl	80060a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004792:	f001 fc57 	bl	8006044 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800479c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800479e:	e011      	b.n	80047c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d012      	beq.n	80047ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	3310      	adds	r3, #16
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 fd2b 	bl	8005208 <xTaskRemoveFromEventList>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d001      	beq.n	80047bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80047b8:	f000 fe02 	bl	80053c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80047bc:	7bbb      	ldrb	r3, [r7, #14]
 80047be:	3b01      	subs	r3, #1
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	dce9      	bgt.n	80047a0 <prvUnlockQueue+0x60>
 80047cc:	e000      	b.n	80047d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80047ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	22ff      	movs	r2, #255	; 0xff
 80047d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80047d8:	f001 fc64 	bl	80060a4 <vPortExitCritical>
}
 80047dc:	bf00      	nop
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80047ec:	f001 fc2a 	bl	8006044 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d102      	bne.n	80047fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80047f8:	2301      	movs	r3, #1
 80047fa:	60fb      	str	r3, [r7, #12]
 80047fc:	e001      	b.n	8004802 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80047fe:	2300      	movs	r3, #0
 8004800:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004802:	f001 fc4f 	bl	80060a4 <vPortExitCritical>

	return xReturn;
 8004806:	68fb      	ldr	r3, [r7, #12]
}
 8004808:	4618      	mov	r0, r3
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004818:	f001 fc14 	bl	8006044 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004824:	429a      	cmp	r2, r3
 8004826:	d102      	bne.n	800482e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004828:	2301      	movs	r3, #1
 800482a:	60fb      	str	r3, [r7, #12]
 800482c:	e001      	b.n	8004832 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800482e:	2300      	movs	r3, #0
 8004830:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004832:	f001 fc37 	bl	80060a4 <vPortExitCritical>

	return xReturn;
 8004836:	68fb      	ldr	r3, [r7, #12]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800484a:	2300      	movs	r3, #0
 800484c:	60fb      	str	r3, [r7, #12]
 800484e:	e014      	b.n	800487a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004850:	4a0f      	ldr	r2, [pc, #60]	; (8004890 <vQueueAddToRegistry+0x50>)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10b      	bne.n	8004874 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800485c:	490c      	ldr	r1, [pc, #48]	; (8004890 <vQueueAddToRegistry+0x50>)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004866:	4a0a      	ldr	r2, [pc, #40]	; (8004890 <vQueueAddToRegistry+0x50>)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	4413      	add	r3, r2
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004872:	e006      	b.n	8004882 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	3301      	adds	r3, #1
 8004878:	60fb      	str	r3, [r7, #12]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2b07      	cmp	r3, #7
 800487e:	d9e7      	bls.n	8004850 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004880:	bf00      	nop
 8004882:	bf00      	nop
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	20004bdc 	.word	0x20004bdc

08004894 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80048a4:	f001 fbce 	bl	8006044 <vPortEnterCritical>
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048ae:	b25b      	sxtb	r3, r3
 80048b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b4:	d103      	bne.n	80048be <vQueueWaitForMessageRestricted+0x2a>
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048c4:	b25b      	sxtb	r3, r3
 80048c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ca:	d103      	bne.n	80048d4 <vQueueWaitForMessageRestricted+0x40>
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048d4:	f001 fbe6 	bl	80060a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d106      	bne.n	80048ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	3324      	adds	r3, #36	; 0x24
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	68b9      	ldr	r1, [r7, #8]
 80048e8:	4618      	mov	r0, r3
 80048ea:	f000 fc61 	bl	80051b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80048ee:	6978      	ldr	r0, [r7, #20]
 80048f0:	f7ff ff26 	bl	8004740 <prvUnlockQueue>
	}
 80048f4:	bf00      	nop
 80048f6:	3718      	adds	r7, #24
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b08e      	sub	sp, #56	; 0x38
 8004900:	af04      	add	r7, sp, #16
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800490a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10a      	bne.n	8004926 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004914:	f383 8811 	msr	BASEPRI, r3
 8004918:	f3bf 8f6f 	isb	sy
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	623b      	str	r3, [r7, #32]
}
 8004922:	bf00      	nop
 8004924:	e7fe      	b.n	8004924 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10a      	bne.n	8004942 <xTaskCreateStatic+0x46>
	__asm volatile
 800492c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004930:	f383 8811 	msr	BASEPRI, r3
 8004934:	f3bf 8f6f 	isb	sy
 8004938:	f3bf 8f4f 	dsb	sy
 800493c:	61fb      	str	r3, [r7, #28]
}
 800493e:	bf00      	nop
 8004940:	e7fe      	b.n	8004940 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004942:	23bc      	movs	r3, #188	; 0xbc
 8004944:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	2bbc      	cmp	r3, #188	; 0xbc
 800494a:	d00a      	beq.n	8004962 <xTaskCreateStatic+0x66>
	__asm volatile
 800494c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004950:	f383 8811 	msr	BASEPRI, r3
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	61bb      	str	r3, [r7, #24]
}
 800495e:	bf00      	nop
 8004960:	e7fe      	b.n	8004960 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004962:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004966:	2b00      	cmp	r3, #0
 8004968:	d01e      	beq.n	80049a8 <xTaskCreateStatic+0xac>
 800496a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800496c:	2b00      	cmp	r3, #0
 800496e:	d01b      	beq.n	80049a8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004972:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004978:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	2202      	movs	r2, #2
 800497e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004982:	2300      	movs	r3, #0
 8004984:	9303      	str	r3, [sp, #12]
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004988:	9302      	str	r3, [sp, #8]
 800498a:	f107 0314 	add.w	r3, r7, #20
 800498e:	9301      	str	r3, [sp, #4]
 8004990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	68b9      	ldr	r1, [r7, #8]
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f000 f850 	bl	8004a40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049a2:	f000 f8f3 	bl	8004b8c <prvAddNewTaskToReadyList>
 80049a6:	e001      	b.n	80049ac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80049a8:	2300      	movs	r3, #0
 80049aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80049ac:	697b      	ldr	r3, [r7, #20]
	}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3728      	adds	r7, #40	; 0x28
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b08c      	sub	sp, #48	; 0x30
 80049ba:	af04      	add	r7, sp, #16
 80049bc:	60f8      	str	r0, [r7, #12]
 80049be:	60b9      	str	r1, [r7, #8]
 80049c0:	603b      	str	r3, [r7, #0]
 80049c2:	4613      	mov	r3, r2
 80049c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80049c6:	88fb      	ldrh	r3, [r7, #6]
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4618      	mov	r0, r3
 80049cc:	f001 fc5c 	bl	8006288 <pvPortMalloc>
 80049d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00e      	beq.n	80049f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80049d8:	20bc      	movs	r0, #188	; 0xbc
 80049da:	f001 fc55 	bl	8006288 <pvPortMalloc>
 80049de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	631a      	str	r2, [r3, #48]	; 0x30
 80049ec:	e005      	b.n	80049fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80049ee:	6978      	ldr	r0, [r7, #20]
 80049f0:	f001 fd16 	bl	8006420 <vPortFree>
 80049f4:	e001      	b.n	80049fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80049f6:	2300      	movs	r3, #0
 80049f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d017      	beq.n	8004a30 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a08:	88fa      	ldrh	r2, [r7, #6]
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	9303      	str	r3, [sp, #12]
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	9302      	str	r3, [sp, #8]
 8004a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a14:	9301      	str	r3, [sp, #4]
 8004a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	68b9      	ldr	r1, [r7, #8]
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f000 f80e 	bl	8004a40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a24:	69f8      	ldr	r0, [r7, #28]
 8004a26:	f000 f8b1 	bl	8004b8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	61bb      	str	r3, [r7, #24]
 8004a2e:	e002      	b.n	8004a36 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004a30:	f04f 33ff 	mov.w	r3, #4294967295
 8004a34:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004a36:	69bb      	ldr	r3, [r7, #24]
	}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3720      	adds	r7, #32
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b088      	sub	sp, #32
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
 8004a4c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a50:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	461a      	mov	r2, r3
 8004a58:	21a5      	movs	r1, #165	; 0xa5
 8004a5a:	f002 f8da 	bl	8006c12 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	f023 0307 	bic.w	r3, r3, #7
 8004a76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	f003 0307 	and.w	r3, r3, #7
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00a      	beq.n	8004a98 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	617b      	str	r3, [r7, #20]
}
 8004a94:	bf00      	nop
 8004a96:	e7fe      	b.n	8004a96 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d01f      	beq.n	8004ade <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	61fb      	str	r3, [r7, #28]
 8004aa2:	e012      	b.n	8004aca <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	7819      	ldrb	r1, [r3, #0]
 8004aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	3334      	adds	r3, #52	; 0x34
 8004ab4:	460a      	mov	r2, r1
 8004ab6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	4413      	add	r3, r2
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d006      	beq.n	8004ad2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	61fb      	str	r3, [r7, #28]
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	2b0f      	cmp	r3, #15
 8004ace:	d9e9      	bls.n	8004aa4 <prvInitialiseNewTask+0x64>
 8004ad0:	e000      	b.n	8004ad4 <prvInitialiseNewTask+0x94>
			{
				break;
 8004ad2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004adc:	e003      	b.n	8004ae6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae8:	2b37      	cmp	r3, #55	; 0x37
 8004aea:	d901      	bls.n	8004af0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004aec:	2337      	movs	r3, #55	; 0x37
 8004aee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004af4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004afa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afe:	2200      	movs	r2, #0
 8004b00:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b04:	3304      	adds	r3, #4
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7ff f93e 	bl	8003d88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0e:	3318      	adds	r3, #24
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7ff f939 	bl	8003d88 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b1a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b24:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b2a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3e:	3354      	adds	r3, #84	; 0x54
 8004b40:	2260      	movs	r2, #96	; 0x60
 8004b42:	2100      	movs	r1, #0
 8004b44:	4618      	mov	r0, r3
 8004b46:	f002 f864 	bl	8006c12 <memset>
 8004b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4c:	4a0c      	ldr	r2, [pc, #48]	; (8004b80 <prvInitialiseNewTask+0x140>)
 8004b4e:	659a      	str	r2, [r3, #88]	; 0x58
 8004b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b52:	4a0c      	ldr	r2, [pc, #48]	; (8004b84 <prvInitialiseNewTask+0x144>)
 8004b54:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b58:	4a0b      	ldr	r2, [pc, #44]	; (8004b88 <prvInitialiseNewTask+0x148>)
 8004b5a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	68f9      	ldr	r1, [r7, #12]
 8004b60:	69b8      	ldr	r0, [r7, #24]
 8004b62:	f001 f941 	bl	8005de8 <pxPortInitialiseStack>
 8004b66:	4602      	mov	r2, r0
 8004b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d002      	beq.n	8004b78 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b76:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b78:	bf00      	nop
 8004b7a:	3720      	adds	r7, #32
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	08007664 	.word	0x08007664
 8004b84:	08007684 	.word	0x08007684
 8004b88:	08007644 	.word	0x08007644

08004b8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b94:	f001 fa56 	bl	8006044 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004b98:	4b2d      	ldr	r3, [pc, #180]	; (8004c50 <prvAddNewTaskToReadyList+0xc4>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	4a2c      	ldr	r2, [pc, #176]	; (8004c50 <prvAddNewTaskToReadyList+0xc4>)
 8004ba0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004ba2:	4b2c      	ldr	r3, [pc, #176]	; (8004c54 <prvAddNewTaskToReadyList+0xc8>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d109      	bne.n	8004bbe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004baa:	4a2a      	ldr	r2, [pc, #168]	; (8004c54 <prvAddNewTaskToReadyList+0xc8>)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004bb0:	4b27      	ldr	r3, [pc, #156]	; (8004c50 <prvAddNewTaskToReadyList+0xc4>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d110      	bne.n	8004bda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004bb8:	f000 fc26 	bl	8005408 <prvInitialiseTaskLists>
 8004bbc:	e00d      	b.n	8004bda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004bbe:	4b26      	ldr	r3, [pc, #152]	; (8004c58 <prvAddNewTaskToReadyList+0xcc>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d109      	bne.n	8004bda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004bc6:	4b23      	ldr	r3, [pc, #140]	; (8004c54 <prvAddNewTaskToReadyList+0xc8>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d802      	bhi.n	8004bda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004bd4:	4a1f      	ldr	r2, [pc, #124]	; (8004c54 <prvAddNewTaskToReadyList+0xc8>)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004bda:	4b20      	ldr	r3, [pc, #128]	; (8004c5c <prvAddNewTaskToReadyList+0xd0>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	3301      	adds	r3, #1
 8004be0:	4a1e      	ldr	r2, [pc, #120]	; (8004c5c <prvAddNewTaskToReadyList+0xd0>)
 8004be2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004be4:	4b1d      	ldr	r3, [pc, #116]	; (8004c5c <prvAddNewTaskToReadyList+0xd0>)
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf0:	4b1b      	ldr	r3, [pc, #108]	; (8004c60 <prvAddNewTaskToReadyList+0xd4>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d903      	bls.n	8004c00 <prvAddNewTaskToReadyList+0x74>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfc:	4a18      	ldr	r2, [pc, #96]	; (8004c60 <prvAddNewTaskToReadyList+0xd4>)
 8004bfe:	6013      	str	r3, [r2, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c04:	4613      	mov	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4a15      	ldr	r2, [pc, #84]	; (8004c64 <prvAddNewTaskToReadyList+0xd8>)
 8004c0e:	441a      	add	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	3304      	adds	r3, #4
 8004c14:	4619      	mov	r1, r3
 8004c16:	4610      	mov	r0, r2
 8004c18:	f7ff f8c3 	bl	8003da2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004c1c:	f001 fa42 	bl	80060a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004c20:	4b0d      	ldr	r3, [pc, #52]	; (8004c58 <prvAddNewTaskToReadyList+0xcc>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00e      	beq.n	8004c46 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004c28:	4b0a      	ldr	r3, [pc, #40]	; (8004c54 <prvAddNewTaskToReadyList+0xc8>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d207      	bcs.n	8004c46 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004c36:	4b0c      	ldr	r3, [pc, #48]	; (8004c68 <prvAddNewTaskToReadyList+0xdc>)
 8004c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c3c:	601a      	str	r2, [r3, #0]
 8004c3e:	f3bf 8f4f 	dsb	sy
 8004c42:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c46:	bf00      	nop
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	20000ce4 	.word	0x20000ce4
 8004c54:	20000810 	.word	0x20000810
 8004c58:	20000cf0 	.word	0x20000cf0
 8004c5c:	20000d00 	.word	0x20000d00
 8004c60:	20000cec 	.word	0x20000cec
 8004c64:	20000814 	.word	0x20000814
 8004c68:	e000ed04 	.word	0xe000ed04

08004c6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004c74:	2300      	movs	r3, #0
 8004c76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d017      	beq.n	8004cae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004c7e:	4b13      	ldr	r3, [pc, #76]	; (8004ccc <vTaskDelay+0x60>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00a      	beq.n	8004c9c <vTaskDelay+0x30>
	__asm volatile
 8004c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8a:	f383 8811 	msr	BASEPRI, r3
 8004c8e:	f3bf 8f6f 	isb	sy
 8004c92:	f3bf 8f4f 	dsb	sy
 8004c96:	60bb      	str	r3, [r7, #8]
}
 8004c98:	bf00      	nop
 8004c9a:	e7fe      	b.n	8004c9a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004c9c:	f000 f88a 	bl	8004db4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 fcfe 	bl	80056a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004ca8:	f000 f892 	bl	8004dd0 <xTaskResumeAll>
 8004cac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d107      	bne.n	8004cc4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004cb4:	4b06      	ldr	r3, [pc, #24]	; (8004cd0 <vTaskDelay+0x64>)
 8004cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004cc4:	bf00      	nop
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	20000d0c 	.word	0x20000d0c
 8004cd0:	e000ed04 	.word	0xe000ed04

08004cd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b08a      	sub	sp, #40	; 0x28
 8004cd8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004ce2:	463a      	mov	r2, r7
 8004ce4:	1d39      	adds	r1, r7, #4
 8004ce6:	f107 0308 	add.w	r3, r7, #8
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7fe fff8 	bl	8003ce0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004cf0:	6839      	ldr	r1, [r7, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	9202      	str	r2, [sp, #8]
 8004cf8:	9301      	str	r3, [sp, #4]
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	2300      	movs	r3, #0
 8004d00:	460a      	mov	r2, r1
 8004d02:	4924      	ldr	r1, [pc, #144]	; (8004d94 <vTaskStartScheduler+0xc0>)
 8004d04:	4824      	ldr	r0, [pc, #144]	; (8004d98 <vTaskStartScheduler+0xc4>)
 8004d06:	f7ff fdf9 	bl	80048fc <xTaskCreateStatic>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	4a23      	ldr	r2, [pc, #140]	; (8004d9c <vTaskStartScheduler+0xc8>)
 8004d0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004d10:	4b22      	ldr	r3, [pc, #136]	; (8004d9c <vTaskStartScheduler+0xc8>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d002      	beq.n	8004d1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	617b      	str	r3, [r7, #20]
 8004d1c:	e001      	b.n	8004d22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d102      	bne.n	8004d2e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004d28:	f000 fd10 	bl	800574c <xTimerCreateTimerTask>
 8004d2c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d11b      	bne.n	8004d6c <vTaskStartScheduler+0x98>
	__asm volatile
 8004d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d38:	f383 8811 	msr	BASEPRI, r3
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f3bf 8f4f 	dsb	sy
 8004d44:	613b      	str	r3, [r7, #16]
}
 8004d46:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004d48:	4b15      	ldr	r3, [pc, #84]	; (8004da0 <vTaskStartScheduler+0xcc>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3354      	adds	r3, #84	; 0x54
 8004d4e:	4a15      	ldr	r2, [pc, #84]	; (8004da4 <vTaskStartScheduler+0xd0>)
 8004d50:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004d52:	4b15      	ldr	r3, [pc, #84]	; (8004da8 <vTaskStartScheduler+0xd4>)
 8004d54:	f04f 32ff 	mov.w	r2, #4294967295
 8004d58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004d5a:	4b14      	ldr	r3, [pc, #80]	; (8004dac <vTaskStartScheduler+0xd8>)
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004d60:	4b13      	ldr	r3, [pc, #76]	; (8004db0 <vTaskStartScheduler+0xdc>)
 8004d62:	2200      	movs	r2, #0
 8004d64:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004d66:	f001 f8cb 	bl	8005f00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004d6a:	e00e      	b.n	8004d8a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d72:	d10a      	bne.n	8004d8a <vTaskStartScheduler+0xb6>
	__asm volatile
 8004d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d78:	f383 8811 	msr	BASEPRI, r3
 8004d7c:	f3bf 8f6f 	isb	sy
 8004d80:	f3bf 8f4f 	dsb	sy
 8004d84:	60fb      	str	r3, [r7, #12]
}
 8004d86:	bf00      	nop
 8004d88:	e7fe      	b.n	8004d88 <vTaskStartScheduler+0xb4>
}
 8004d8a:	bf00      	nop
 8004d8c:	3718      	adds	r7, #24
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	08007534 	.word	0x08007534
 8004d98:	080053d9 	.word	0x080053d9
 8004d9c:	20000d08 	.word	0x20000d08
 8004da0:	20000810 	.word	0x20000810
 8004da4:	20000010 	.word	0x20000010
 8004da8:	20000d04 	.word	0x20000d04
 8004dac:	20000cf0 	.word	0x20000cf0
 8004db0:	20000ce8 	.word	0x20000ce8

08004db4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004db4:	b480      	push	{r7}
 8004db6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004db8:	4b04      	ldr	r3, [pc, #16]	; (8004dcc <vTaskSuspendAll+0x18>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	4a03      	ldr	r2, [pc, #12]	; (8004dcc <vTaskSuspendAll+0x18>)
 8004dc0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004dc2:	bf00      	nop
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	20000d0c 	.word	0x20000d0c

08004dd0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004dde:	4b42      	ldr	r3, [pc, #264]	; (8004ee8 <xTaskResumeAll+0x118>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10a      	bne.n	8004dfc <xTaskResumeAll+0x2c>
	__asm volatile
 8004de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dea:	f383 8811 	msr	BASEPRI, r3
 8004dee:	f3bf 8f6f 	isb	sy
 8004df2:	f3bf 8f4f 	dsb	sy
 8004df6:	603b      	str	r3, [r7, #0]
}
 8004df8:	bf00      	nop
 8004dfa:	e7fe      	b.n	8004dfa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004dfc:	f001 f922 	bl	8006044 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004e00:	4b39      	ldr	r3, [pc, #228]	; (8004ee8 <xTaskResumeAll+0x118>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	3b01      	subs	r3, #1
 8004e06:	4a38      	ldr	r2, [pc, #224]	; (8004ee8 <xTaskResumeAll+0x118>)
 8004e08:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e0a:	4b37      	ldr	r3, [pc, #220]	; (8004ee8 <xTaskResumeAll+0x118>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d162      	bne.n	8004ed8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004e12:	4b36      	ldr	r3, [pc, #216]	; (8004eec <xTaskResumeAll+0x11c>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d05e      	beq.n	8004ed8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e1a:	e02f      	b.n	8004e7c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e1c:	4b34      	ldr	r3, [pc, #208]	; (8004ef0 <xTaskResumeAll+0x120>)
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	3318      	adds	r3, #24
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7ff f817 	bl	8003e5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	3304      	adds	r3, #4
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7ff f812 	bl	8003e5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e3c:	4b2d      	ldr	r3, [pc, #180]	; (8004ef4 <xTaskResumeAll+0x124>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d903      	bls.n	8004e4c <xTaskResumeAll+0x7c>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e48:	4a2a      	ldr	r2, [pc, #168]	; (8004ef4 <xTaskResumeAll+0x124>)
 8004e4a:	6013      	str	r3, [r2, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e50:	4613      	mov	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4a27      	ldr	r2, [pc, #156]	; (8004ef8 <xTaskResumeAll+0x128>)
 8004e5a:	441a      	add	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	3304      	adds	r3, #4
 8004e60:	4619      	mov	r1, r3
 8004e62:	4610      	mov	r0, r2
 8004e64:	f7fe ff9d 	bl	8003da2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e6c:	4b23      	ldr	r3, [pc, #140]	; (8004efc <xTaskResumeAll+0x12c>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d302      	bcc.n	8004e7c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004e76:	4b22      	ldr	r3, [pc, #136]	; (8004f00 <xTaskResumeAll+0x130>)
 8004e78:	2201      	movs	r2, #1
 8004e7a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e7c:	4b1c      	ldr	r3, [pc, #112]	; (8004ef0 <xTaskResumeAll+0x120>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1cb      	bne.n	8004e1c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d001      	beq.n	8004e8e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004e8a:	f000 fb5f 	bl	800554c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004e8e:	4b1d      	ldr	r3, [pc, #116]	; (8004f04 <xTaskResumeAll+0x134>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d010      	beq.n	8004ebc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004e9a:	f000 f847 	bl	8004f2c <xTaskIncrementTick>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d002      	beq.n	8004eaa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004ea4:	4b16      	ldr	r3, [pc, #88]	; (8004f00 <xTaskResumeAll+0x130>)
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	3b01      	subs	r3, #1
 8004eae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1f1      	bne.n	8004e9a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004eb6:	4b13      	ldr	r3, [pc, #76]	; (8004f04 <xTaskResumeAll+0x134>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004ebc:	4b10      	ldr	r3, [pc, #64]	; (8004f00 <xTaskResumeAll+0x130>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d009      	beq.n	8004ed8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004ec8:	4b0f      	ldr	r3, [pc, #60]	; (8004f08 <xTaskResumeAll+0x138>)
 8004eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ed8:	f001 f8e4 	bl	80060a4 <vPortExitCritical>

	return xAlreadyYielded;
 8004edc:	68bb      	ldr	r3, [r7, #8]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	20000d0c 	.word	0x20000d0c
 8004eec:	20000ce4 	.word	0x20000ce4
 8004ef0:	20000ca4 	.word	0x20000ca4
 8004ef4:	20000cec 	.word	0x20000cec
 8004ef8:	20000814 	.word	0x20000814
 8004efc:	20000810 	.word	0x20000810
 8004f00:	20000cf8 	.word	0x20000cf8
 8004f04:	20000cf4 	.word	0x20000cf4
 8004f08:	e000ed04 	.word	0xe000ed04

08004f0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004f12:	4b05      	ldr	r3, [pc, #20]	; (8004f28 <xTaskGetTickCount+0x1c>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004f18:	687b      	ldr	r3, [r7, #4]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	20000ce8 	.word	0x20000ce8

08004f2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004f32:	2300      	movs	r3, #0
 8004f34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f36:	4b4f      	ldr	r3, [pc, #316]	; (8005074 <xTaskIncrementTick+0x148>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f040 808f 	bne.w	800505e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004f40:	4b4d      	ldr	r3, [pc, #308]	; (8005078 <xTaskIncrementTick+0x14c>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	3301      	adds	r3, #1
 8004f46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004f48:	4a4b      	ldr	r2, [pc, #300]	; (8005078 <xTaskIncrementTick+0x14c>)
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d120      	bne.n	8004f96 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004f54:	4b49      	ldr	r3, [pc, #292]	; (800507c <xTaskIncrementTick+0x150>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00a      	beq.n	8004f74 <xTaskIncrementTick+0x48>
	__asm volatile
 8004f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f62:	f383 8811 	msr	BASEPRI, r3
 8004f66:	f3bf 8f6f 	isb	sy
 8004f6a:	f3bf 8f4f 	dsb	sy
 8004f6e:	603b      	str	r3, [r7, #0]
}
 8004f70:	bf00      	nop
 8004f72:	e7fe      	b.n	8004f72 <xTaskIncrementTick+0x46>
 8004f74:	4b41      	ldr	r3, [pc, #260]	; (800507c <xTaskIncrementTick+0x150>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	4b41      	ldr	r3, [pc, #260]	; (8005080 <xTaskIncrementTick+0x154>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a3f      	ldr	r2, [pc, #252]	; (800507c <xTaskIncrementTick+0x150>)
 8004f80:	6013      	str	r3, [r2, #0]
 8004f82:	4a3f      	ldr	r2, [pc, #252]	; (8005080 <xTaskIncrementTick+0x154>)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6013      	str	r3, [r2, #0]
 8004f88:	4b3e      	ldr	r3, [pc, #248]	; (8005084 <xTaskIncrementTick+0x158>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	4a3d      	ldr	r2, [pc, #244]	; (8005084 <xTaskIncrementTick+0x158>)
 8004f90:	6013      	str	r3, [r2, #0]
 8004f92:	f000 fadb 	bl	800554c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004f96:	4b3c      	ldr	r3, [pc, #240]	; (8005088 <xTaskIncrementTick+0x15c>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d349      	bcc.n	8005034 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fa0:	4b36      	ldr	r3, [pc, #216]	; (800507c <xTaskIncrementTick+0x150>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d104      	bne.n	8004fb4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004faa:	4b37      	ldr	r3, [pc, #220]	; (8005088 <xTaskIncrementTick+0x15c>)
 8004fac:	f04f 32ff 	mov.w	r2, #4294967295
 8004fb0:	601a      	str	r2, [r3, #0]
					break;
 8004fb2:	e03f      	b.n	8005034 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fb4:	4b31      	ldr	r3, [pc, #196]	; (800507c <xTaskIncrementTick+0x150>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d203      	bcs.n	8004fd4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004fcc:	4a2e      	ldr	r2, [pc, #184]	; (8005088 <xTaskIncrementTick+0x15c>)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004fd2:	e02f      	b.n	8005034 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	3304      	adds	r3, #4
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7fe ff3f 	bl	8003e5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d004      	beq.n	8004ff0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	3318      	adds	r3, #24
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7fe ff36 	bl	8003e5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ff4:	4b25      	ldr	r3, [pc, #148]	; (800508c <xTaskIncrementTick+0x160>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d903      	bls.n	8005004 <xTaskIncrementTick+0xd8>
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	4a22      	ldr	r2, [pc, #136]	; (800508c <xTaskIncrementTick+0x160>)
 8005002:	6013      	str	r3, [r2, #0]
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005008:	4613      	mov	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4413      	add	r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4a1f      	ldr	r2, [pc, #124]	; (8005090 <xTaskIncrementTick+0x164>)
 8005012:	441a      	add	r2, r3
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	3304      	adds	r3, #4
 8005018:	4619      	mov	r1, r3
 800501a:	4610      	mov	r0, r2
 800501c:	f7fe fec1 	bl	8003da2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005024:	4b1b      	ldr	r3, [pc, #108]	; (8005094 <xTaskIncrementTick+0x168>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502a:	429a      	cmp	r2, r3
 800502c:	d3b8      	bcc.n	8004fa0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800502e:	2301      	movs	r3, #1
 8005030:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005032:	e7b5      	b.n	8004fa0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005034:	4b17      	ldr	r3, [pc, #92]	; (8005094 <xTaskIncrementTick+0x168>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800503a:	4915      	ldr	r1, [pc, #84]	; (8005090 <xTaskIncrementTick+0x164>)
 800503c:	4613      	mov	r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4413      	add	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	440b      	add	r3, r1
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d901      	bls.n	8005050 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800504c:	2301      	movs	r3, #1
 800504e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005050:	4b11      	ldr	r3, [pc, #68]	; (8005098 <xTaskIncrementTick+0x16c>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d007      	beq.n	8005068 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005058:	2301      	movs	r3, #1
 800505a:	617b      	str	r3, [r7, #20]
 800505c:	e004      	b.n	8005068 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800505e:	4b0f      	ldr	r3, [pc, #60]	; (800509c <xTaskIncrementTick+0x170>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	3301      	adds	r3, #1
 8005064:	4a0d      	ldr	r2, [pc, #52]	; (800509c <xTaskIncrementTick+0x170>)
 8005066:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005068:	697b      	ldr	r3, [r7, #20]
}
 800506a:	4618      	mov	r0, r3
 800506c:	3718      	adds	r7, #24
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	20000d0c 	.word	0x20000d0c
 8005078:	20000ce8 	.word	0x20000ce8
 800507c:	20000c9c 	.word	0x20000c9c
 8005080:	20000ca0 	.word	0x20000ca0
 8005084:	20000cfc 	.word	0x20000cfc
 8005088:	20000d04 	.word	0x20000d04
 800508c:	20000cec 	.word	0x20000cec
 8005090:	20000814 	.word	0x20000814
 8005094:	20000810 	.word	0x20000810
 8005098:	20000cf8 	.word	0x20000cf8
 800509c:	20000cf4 	.word	0x20000cf4

080050a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80050a6:	4b2a      	ldr	r3, [pc, #168]	; (8005150 <vTaskSwitchContext+0xb0>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80050ae:	4b29      	ldr	r3, [pc, #164]	; (8005154 <vTaskSwitchContext+0xb4>)
 80050b0:	2201      	movs	r2, #1
 80050b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80050b4:	e046      	b.n	8005144 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80050b6:	4b27      	ldr	r3, [pc, #156]	; (8005154 <vTaskSwitchContext+0xb4>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050bc:	4b26      	ldr	r3, [pc, #152]	; (8005158 <vTaskSwitchContext+0xb8>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	60fb      	str	r3, [r7, #12]
 80050c2:	e010      	b.n	80050e6 <vTaskSwitchContext+0x46>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10a      	bne.n	80050e0 <vTaskSwitchContext+0x40>
	__asm volatile
 80050ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ce:	f383 8811 	msr	BASEPRI, r3
 80050d2:	f3bf 8f6f 	isb	sy
 80050d6:	f3bf 8f4f 	dsb	sy
 80050da:	607b      	str	r3, [r7, #4]
}
 80050dc:	bf00      	nop
 80050de:	e7fe      	b.n	80050de <vTaskSwitchContext+0x3e>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	3b01      	subs	r3, #1
 80050e4:	60fb      	str	r3, [r7, #12]
 80050e6:	491d      	ldr	r1, [pc, #116]	; (800515c <vTaskSwitchContext+0xbc>)
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	4613      	mov	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4413      	add	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	440b      	add	r3, r1
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d0e4      	beq.n	80050c4 <vTaskSwitchContext+0x24>
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	4613      	mov	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4413      	add	r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4a15      	ldr	r2, [pc, #84]	; (800515c <vTaskSwitchContext+0xbc>)
 8005106:	4413      	add	r3, r2
 8005108:	60bb      	str	r3, [r7, #8]
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	605a      	str	r2, [r3, #4]
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	3308      	adds	r3, #8
 800511c:	429a      	cmp	r2, r3
 800511e:	d104      	bne.n	800512a <vTaskSwitchContext+0x8a>
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	685a      	ldr	r2, [r3, #4]
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	605a      	str	r2, [r3, #4]
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	4a0b      	ldr	r2, [pc, #44]	; (8005160 <vTaskSwitchContext+0xc0>)
 8005132:	6013      	str	r3, [r2, #0]
 8005134:	4a08      	ldr	r2, [pc, #32]	; (8005158 <vTaskSwitchContext+0xb8>)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800513a:	4b09      	ldr	r3, [pc, #36]	; (8005160 <vTaskSwitchContext+0xc0>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	3354      	adds	r3, #84	; 0x54
 8005140:	4a08      	ldr	r2, [pc, #32]	; (8005164 <vTaskSwitchContext+0xc4>)
 8005142:	6013      	str	r3, [r2, #0]
}
 8005144:	bf00      	nop
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr
 8005150:	20000d0c 	.word	0x20000d0c
 8005154:	20000cf8 	.word	0x20000cf8
 8005158:	20000cec 	.word	0x20000cec
 800515c:	20000814 	.word	0x20000814
 8005160:	20000810 	.word	0x20000810
 8005164:	20000010 	.word	0x20000010

08005168 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10a      	bne.n	800518e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517c:	f383 8811 	msr	BASEPRI, r3
 8005180:	f3bf 8f6f 	isb	sy
 8005184:	f3bf 8f4f 	dsb	sy
 8005188:	60fb      	str	r3, [r7, #12]
}
 800518a:	bf00      	nop
 800518c:	e7fe      	b.n	800518c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800518e:	4b07      	ldr	r3, [pc, #28]	; (80051ac <vTaskPlaceOnEventList+0x44>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	3318      	adds	r3, #24
 8005194:	4619      	mov	r1, r3
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7fe fe27 	bl	8003dea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800519c:	2101      	movs	r1, #1
 800519e:	6838      	ldr	r0, [r7, #0]
 80051a0:	f000 fa80 	bl	80056a4 <prvAddCurrentTaskToDelayedList>
}
 80051a4:	bf00      	nop
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	20000810 	.word	0x20000810

080051b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10a      	bne.n	80051d8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80051c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c6:	f383 8811 	msr	BASEPRI, r3
 80051ca:	f3bf 8f6f 	isb	sy
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	617b      	str	r3, [r7, #20]
}
 80051d4:	bf00      	nop
 80051d6:	e7fe      	b.n	80051d6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80051d8:	4b0a      	ldr	r3, [pc, #40]	; (8005204 <vTaskPlaceOnEventListRestricted+0x54>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	3318      	adds	r3, #24
 80051de:	4619      	mov	r1, r3
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f7fe fdde 	bl	8003da2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d002      	beq.n	80051f2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80051ec:	f04f 33ff 	mov.w	r3, #4294967295
 80051f0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80051f2:	6879      	ldr	r1, [r7, #4]
 80051f4:	68b8      	ldr	r0, [r7, #8]
 80051f6:	f000 fa55 	bl	80056a4 <prvAddCurrentTaskToDelayedList>
	}
 80051fa:	bf00      	nop
 80051fc:	3718      	adds	r7, #24
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	20000810 	.word	0x20000810

08005208 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10a      	bne.n	8005234 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800521e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	60fb      	str	r3, [r7, #12]
}
 8005230:	bf00      	nop
 8005232:	e7fe      	b.n	8005232 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	3318      	adds	r3, #24
 8005238:	4618      	mov	r0, r3
 800523a:	f7fe fe0f 	bl	8003e5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800523e:	4b1e      	ldr	r3, [pc, #120]	; (80052b8 <xTaskRemoveFromEventList+0xb0>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d11d      	bne.n	8005282 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	3304      	adds	r3, #4
 800524a:	4618      	mov	r0, r3
 800524c:	f7fe fe06 	bl	8003e5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005254:	4b19      	ldr	r3, [pc, #100]	; (80052bc <xTaskRemoveFromEventList+0xb4>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	429a      	cmp	r2, r3
 800525a:	d903      	bls.n	8005264 <xTaskRemoveFromEventList+0x5c>
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005260:	4a16      	ldr	r2, [pc, #88]	; (80052bc <xTaskRemoveFromEventList+0xb4>)
 8005262:	6013      	str	r3, [r2, #0]
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005268:	4613      	mov	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	4413      	add	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4a13      	ldr	r2, [pc, #76]	; (80052c0 <xTaskRemoveFromEventList+0xb8>)
 8005272:	441a      	add	r2, r3
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	3304      	adds	r3, #4
 8005278:	4619      	mov	r1, r3
 800527a:	4610      	mov	r0, r2
 800527c:	f7fe fd91 	bl	8003da2 <vListInsertEnd>
 8005280:	e005      	b.n	800528e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	3318      	adds	r3, #24
 8005286:	4619      	mov	r1, r3
 8005288:	480e      	ldr	r0, [pc, #56]	; (80052c4 <xTaskRemoveFromEventList+0xbc>)
 800528a:	f7fe fd8a 	bl	8003da2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005292:	4b0d      	ldr	r3, [pc, #52]	; (80052c8 <xTaskRemoveFromEventList+0xc0>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005298:	429a      	cmp	r2, r3
 800529a:	d905      	bls.n	80052a8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800529c:	2301      	movs	r3, #1
 800529e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80052a0:	4b0a      	ldr	r3, [pc, #40]	; (80052cc <xTaskRemoveFromEventList+0xc4>)
 80052a2:	2201      	movs	r2, #1
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	e001      	b.n	80052ac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80052a8:	2300      	movs	r3, #0
 80052aa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80052ac:	697b      	ldr	r3, [r7, #20]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3718      	adds	r7, #24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	20000d0c 	.word	0x20000d0c
 80052bc:	20000cec 	.word	0x20000cec
 80052c0:	20000814 	.word	0x20000814
 80052c4:	20000ca4 	.word	0x20000ca4
 80052c8:	20000810 	.word	0x20000810
 80052cc:	20000cf8 	.word	0x20000cf8

080052d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80052d8:	4b06      	ldr	r3, [pc, #24]	; (80052f4 <vTaskInternalSetTimeOutState+0x24>)
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80052e0:	4b05      	ldr	r3, [pc, #20]	; (80052f8 <vTaskInternalSetTimeOutState+0x28>)
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	605a      	str	r2, [r3, #4]
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr
 80052f4:	20000cfc 	.word	0x20000cfc
 80052f8:	20000ce8 	.word	0x20000ce8

080052fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b088      	sub	sp, #32
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d10a      	bne.n	8005322 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800530c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005310:	f383 8811 	msr	BASEPRI, r3
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	f3bf 8f4f 	dsb	sy
 800531c:	613b      	str	r3, [r7, #16]
}
 800531e:	bf00      	nop
 8005320:	e7fe      	b.n	8005320 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10a      	bne.n	800533e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532c:	f383 8811 	msr	BASEPRI, r3
 8005330:	f3bf 8f6f 	isb	sy
 8005334:	f3bf 8f4f 	dsb	sy
 8005338:	60fb      	str	r3, [r7, #12]
}
 800533a:	bf00      	nop
 800533c:	e7fe      	b.n	800533c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800533e:	f000 fe81 	bl	8006044 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005342:	4b1d      	ldr	r3, [pc, #116]	; (80053b8 <xTaskCheckForTimeOut+0xbc>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535a:	d102      	bne.n	8005362 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800535c:	2300      	movs	r3, #0
 800535e:	61fb      	str	r3, [r7, #28]
 8005360:	e023      	b.n	80053aa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	4b15      	ldr	r3, [pc, #84]	; (80053bc <xTaskCheckForTimeOut+0xc0>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	429a      	cmp	r2, r3
 800536c:	d007      	beq.n	800537e <xTaskCheckForTimeOut+0x82>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	69ba      	ldr	r2, [r7, #24]
 8005374:	429a      	cmp	r2, r3
 8005376:	d302      	bcc.n	800537e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005378:	2301      	movs	r3, #1
 800537a:	61fb      	str	r3, [r7, #28]
 800537c:	e015      	b.n	80053aa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	429a      	cmp	r2, r3
 8005386:	d20b      	bcs.n	80053a0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	1ad2      	subs	r2, r2, r3
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7ff ff9b 	bl	80052d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800539a:	2300      	movs	r3, #0
 800539c:	61fb      	str	r3, [r7, #28]
 800539e:	e004      	b.n	80053aa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	2200      	movs	r2, #0
 80053a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80053a6:	2301      	movs	r3, #1
 80053a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80053aa:	f000 fe7b 	bl	80060a4 <vPortExitCritical>

	return xReturn;
 80053ae:	69fb      	ldr	r3, [r7, #28]
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3720      	adds	r7, #32
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	20000ce8 	.word	0x20000ce8
 80053bc:	20000cfc 	.word	0x20000cfc

080053c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80053c0:	b480      	push	{r7}
 80053c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80053c4:	4b03      	ldr	r3, [pc, #12]	; (80053d4 <vTaskMissedYield+0x14>)
 80053c6:	2201      	movs	r2, #1
 80053c8:	601a      	str	r2, [r3, #0]
}
 80053ca:	bf00      	nop
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr
 80053d4:	20000cf8 	.word	0x20000cf8

080053d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80053e0:	f000 f852 	bl	8005488 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80053e4:	4b06      	ldr	r3, [pc, #24]	; (8005400 <prvIdleTask+0x28>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d9f9      	bls.n	80053e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80053ec:	4b05      	ldr	r3, [pc, #20]	; (8005404 <prvIdleTask+0x2c>)
 80053ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	f3bf 8f4f 	dsb	sy
 80053f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80053fc:	e7f0      	b.n	80053e0 <prvIdleTask+0x8>
 80053fe:	bf00      	nop
 8005400:	20000814 	.word	0x20000814
 8005404:	e000ed04 	.word	0xe000ed04

08005408 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800540e:	2300      	movs	r3, #0
 8005410:	607b      	str	r3, [r7, #4]
 8005412:	e00c      	b.n	800542e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	4613      	mov	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4413      	add	r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	4a12      	ldr	r2, [pc, #72]	; (8005468 <prvInitialiseTaskLists+0x60>)
 8005420:	4413      	add	r3, r2
 8005422:	4618      	mov	r0, r3
 8005424:	f7fe fc90 	bl	8003d48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	3301      	adds	r3, #1
 800542c:	607b      	str	r3, [r7, #4]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b37      	cmp	r3, #55	; 0x37
 8005432:	d9ef      	bls.n	8005414 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005434:	480d      	ldr	r0, [pc, #52]	; (800546c <prvInitialiseTaskLists+0x64>)
 8005436:	f7fe fc87 	bl	8003d48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800543a:	480d      	ldr	r0, [pc, #52]	; (8005470 <prvInitialiseTaskLists+0x68>)
 800543c:	f7fe fc84 	bl	8003d48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005440:	480c      	ldr	r0, [pc, #48]	; (8005474 <prvInitialiseTaskLists+0x6c>)
 8005442:	f7fe fc81 	bl	8003d48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005446:	480c      	ldr	r0, [pc, #48]	; (8005478 <prvInitialiseTaskLists+0x70>)
 8005448:	f7fe fc7e 	bl	8003d48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800544c:	480b      	ldr	r0, [pc, #44]	; (800547c <prvInitialiseTaskLists+0x74>)
 800544e:	f7fe fc7b 	bl	8003d48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005452:	4b0b      	ldr	r3, [pc, #44]	; (8005480 <prvInitialiseTaskLists+0x78>)
 8005454:	4a05      	ldr	r2, [pc, #20]	; (800546c <prvInitialiseTaskLists+0x64>)
 8005456:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005458:	4b0a      	ldr	r3, [pc, #40]	; (8005484 <prvInitialiseTaskLists+0x7c>)
 800545a:	4a05      	ldr	r2, [pc, #20]	; (8005470 <prvInitialiseTaskLists+0x68>)
 800545c:	601a      	str	r2, [r3, #0]
}
 800545e:	bf00      	nop
 8005460:	3708      	adds	r7, #8
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	20000814 	.word	0x20000814
 800546c:	20000c74 	.word	0x20000c74
 8005470:	20000c88 	.word	0x20000c88
 8005474:	20000ca4 	.word	0x20000ca4
 8005478:	20000cb8 	.word	0x20000cb8
 800547c:	20000cd0 	.word	0x20000cd0
 8005480:	20000c9c 	.word	0x20000c9c
 8005484:	20000ca0 	.word	0x20000ca0

08005488 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800548e:	e019      	b.n	80054c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005490:	f000 fdd8 	bl	8006044 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005494:	4b10      	ldr	r3, [pc, #64]	; (80054d8 <prvCheckTasksWaitingTermination+0x50>)
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	3304      	adds	r3, #4
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7fe fcdb 	bl	8003e5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80054a6:	4b0d      	ldr	r3, [pc, #52]	; (80054dc <prvCheckTasksWaitingTermination+0x54>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3b01      	subs	r3, #1
 80054ac:	4a0b      	ldr	r2, [pc, #44]	; (80054dc <prvCheckTasksWaitingTermination+0x54>)
 80054ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80054b0:	4b0b      	ldr	r3, [pc, #44]	; (80054e0 <prvCheckTasksWaitingTermination+0x58>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	3b01      	subs	r3, #1
 80054b6:	4a0a      	ldr	r2, [pc, #40]	; (80054e0 <prvCheckTasksWaitingTermination+0x58>)
 80054b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80054ba:	f000 fdf3 	bl	80060a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f810 	bl	80054e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054c4:	4b06      	ldr	r3, [pc, #24]	; (80054e0 <prvCheckTasksWaitingTermination+0x58>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1e1      	bne.n	8005490 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80054cc:	bf00      	nop
 80054ce:	bf00      	nop
 80054d0:	3708      	adds	r7, #8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	20000cb8 	.word	0x20000cb8
 80054dc:	20000ce4 	.word	0x20000ce4
 80054e0:	20000ccc 	.word	0x20000ccc

080054e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	3354      	adds	r3, #84	; 0x54
 80054f0:	4618      	mov	r0, r3
 80054f2:	f001 fc75 	bl	8006de0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d108      	bne.n	8005512 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005504:	4618      	mov	r0, r3
 8005506:	f000 ff8b 	bl	8006420 <vPortFree>
				vPortFree( pxTCB );
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 ff88 	bl	8006420 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005510:	e018      	b.n	8005544 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005518:	2b01      	cmp	r3, #1
 800551a:	d103      	bne.n	8005524 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 ff7f 	bl	8006420 <vPortFree>
	}
 8005522:	e00f      	b.n	8005544 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800552a:	2b02      	cmp	r3, #2
 800552c:	d00a      	beq.n	8005544 <prvDeleteTCB+0x60>
	__asm volatile
 800552e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005532:	f383 8811 	msr	BASEPRI, r3
 8005536:	f3bf 8f6f 	isb	sy
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	60fb      	str	r3, [r7, #12]
}
 8005540:	bf00      	nop
 8005542:	e7fe      	b.n	8005542 <prvDeleteTCB+0x5e>
	}
 8005544:	bf00      	nop
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005552:	4b0c      	ldr	r3, [pc, #48]	; (8005584 <prvResetNextTaskUnblockTime+0x38>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d104      	bne.n	8005566 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800555c:	4b0a      	ldr	r3, [pc, #40]	; (8005588 <prvResetNextTaskUnblockTime+0x3c>)
 800555e:	f04f 32ff 	mov.w	r2, #4294967295
 8005562:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005564:	e008      	b.n	8005578 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005566:	4b07      	ldr	r3, [pc, #28]	; (8005584 <prvResetNextTaskUnblockTime+0x38>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	4a04      	ldr	r2, [pc, #16]	; (8005588 <prvResetNextTaskUnblockTime+0x3c>)
 8005576:	6013      	str	r3, [r2, #0]
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr
 8005584:	20000c9c 	.word	0x20000c9c
 8005588:	20000d04 	.word	0x20000d04

0800558c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005592:	4b0b      	ldr	r3, [pc, #44]	; (80055c0 <xTaskGetSchedulerState+0x34>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d102      	bne.n	80055a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800559a:	2301      	movs	r3, #1
 800559c:	607b      	str	r3, [r7, #4]
 800559e:	e008      	b.n	80055b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055a0:	4b08      	ldr	r3, [pc, #32]	; (80055c4 <xTaskGetSchedulerState+0x38>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d102      	bne.n	80055ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80055a8:	2302      	movs	r3, #2
 80055aa:	607b      	str	r3, [r7, #4]
 80055ac:	e001      	b.n	80055b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80055ae:	2300      	movs	r3, #0
 80055b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80055b2:	687b      	ldr	r3, [r7, #4]
	}
 80055b4:	4618      	mov	r0, r3
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	20000cf0 	.word	0x20000cf0
 80055c4:	20000d0c 	.word	0x20000d0c

080055c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80055d4:	2300      	movs	r3, #0
 80055d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d056      	beq.n	800568c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80055de:	4b2e      	ldr	r3, [pc, #184]	; (8005698 <xTaskPriorityDisinherit+0xd0>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d00a      	beq.n	80055fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80055e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ec:	f383 8811 	msr	BASEPRI, r3
 80055f0:	f3bf 8f6f 	isb	sy
 80055f4:	f3bf 8f4f 	dsb	sy
 80055f8:	60fb      	str	r3, [r7, #12]
}
 80055fa:	bf00      	nop
 80055fc:	e7fe      	b.n	80055fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10a      	bne.n	800561c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	60bb      	str	r3, [r7, #8]
}
 8005618:	bf00      	nop
 800561a:	e7fe      	b.n	800561a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005620:	1e5a      	subs	r2, r3, #1
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800562e:	429a      	cmp	r2, r3
 8005630:	d02c      	beq.n	800568c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005636:	2b00      	cmp	r3, #0
 8005638:	d128      	bne.n	800568c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	3304      	adds	r3, #4
 800563e:	4618      	mov	r0, r3
 8005640:	f7fe fc0c 	bl	8003e5c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005650:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800565c:	4b0f      	ldr	r3, [pc, #60]	; (800569c <xTaskPriorityDisinherit+0xd4>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	429a      	cmp	r2, r3
 8005662:	d903      	bls.n	800566c <xTaskPriorityDisinherit+0xa4>
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005668:	4a0c      	ldr	r2, [pc, #48]	; (800569c <xTaskPriorityDisinherit+0xd4>)
 800566a:	6013      	str	r3, [r2, #0]
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005670:	4613      	mov	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4a09      	ldr	r2, [pc, #36]	; (80056a0 <xTaskPriorityDisinherit+0xd8>)
 800567a:	441a      	add	r2, r3
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	3304      	adds	r3, #4
 8005680:	4619      	mov	r1, r3
 8005682:	4610      	mov	r0, r2
 8005684:	f7fe fb8d 	bl	8003da2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005688:	2301      	movs	r3, #1
 800568a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800568c:	697b      	ldr	r3, [r7, #20]
	}
 800568e:	4618      	mov	r0, r3
 8005690:	3718      	adds	r7, #24
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	20000810 	.word	0x20000810
 800569c:	20000cec 	.word	0x20000cec
 80056a0:	20000814 	.word	0x20000814

080056a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80056ae:	4b21      	ldr	r3, [pc, #132]	; (8005734 <prvAddCurrentTaskToDelayedList+0x90>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056b4:	4b20      	ldr	r3, [pc, #128]	; (8005738 <prvAddCurrentTaskToDelayedList+0x94>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	3304      	adds	r3, #4
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7fe fbce 	bl	8003e5c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c6:	d10a      	bne.n	80056de <prvAddCurrentTaskToDelayedList+0x3a>
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d007      	beq.n	80056de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056ce:	4b1a      	ldr	r3, [pc, #104]	; (8005738 <prvAddCurrentTaskToDelayedList+0x94>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	3304      	adds	r3, #4
 80056d4:	4619      	mov	r1, r3
 80056d6:	4819      	ldr	r0, [pc, #100]	; (800573c <prvAddCurrentTaskToDelayedList+0x98>)
 80056d8:	f7fe fb63 	bl	8003da2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80056dc:	e026      	b.n	800572c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4413      	add	r3, r2
 80056e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80056e6:	4b14      	ldr	r3, [pc, #80]	; (8005738 <prvAddCurrentTaskToDelayedList+0x94>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d209      	bcs.n	800570a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056f6:	4b12      	ldr	r3, [pc, #72]	; (8005740 <prvAddCurrentTaskToDelayedList+0x9c>)
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	4b0f      	ldr	r3, [pc, #60]	; (8005738 <prvAddCurrentTaskToDelayedList+0x94>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	3304      	adds	r3, #4
 8005700:	4619      	mov	r1, r3
 8005702:	4610      	mov	r0, r2
 8005704:	f7fe fb71 	bl	8003dea <vListInsert>
}
 8005708:	e010      	b.n	800572c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800570a:	4b0e      	ldr	r3, [pc, #56]	; (8005744 <prvAddCurrentTaskToDelayedList+0xa0>)
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	4b0a      	ldr	r3, [pc, #40]	; (8005738 <prvAddCurrentTaskToDelayedList+0x94>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	3304      	adds	r3, #4
 8005714:	4619      	mov	r1, r3
 8005716:	4610      	mov	r0, r2
 8005718:	f7fe fb67 	bl	8003dea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800571c:	4b0a      	ldr	r3, [pc, #40]	; (8005748 <prvAddCurrentTaskToDelayedList+0xa4>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	429a      	cmp	r2, r3
 8005724:	d202      	bcs.n	800572c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005726:	4a08      	ldr	r2, [pc, #32]	; (8005748 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	6013      	str	r3, [r2, #0]
}
 800572c:	bf00      	nop
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	20000ce8 	.word	0x20000ce8
 8005738:	20000810 	.word	0x20000810
 800573c:	20000cd0 	.word	0x20000cd0
 8005740:	20000ca0 	.word	0x20000ca0
 8005744:	20000c9c 	.word	0x20000c9c
 8005748:	20000d04 	.word	0x20000d04

0800574c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b08a      	sub	sp, #40	; 0x28
 8005750:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005752:	2300      	movs	r3, #0
 8005754:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005756:	f000 fb07 	bl	8005d68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800575a:	4b1c      	ldr	r3, [pc, #112]	; (80057cc <xTimerCreateTimerTask+0x80>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d021      	beq.n	80057a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005762:	2300      	movs	r3, #0
 8005764:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005766:	2300      	movs	r3, #0
 8005768:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800576a:	1d3a      	adds	r2, r7, #4
 800576c:	f107 0108 	add.w	r1, r7, #8
 8005770:	f107 030c 	add.w	r3, r7, #12
 8005774:	4618      	mov	r0, r3
 8005776:	f7fe facd 	bl	8003d14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800577a:	6879      	ldr	r1, [r7, #4]
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	9202      	str	r2, [sp, #8]
 8005782:	9301      	str	r3, [sp, #4]
 8005784:	2302      	movs	r3, #2
 8005786:	9300      	str	r3, [sp, #0]
 8005788:	2300      	movs	r3, #0
 800578a:	460a      	mov	r2, r1
 800578c:	4910      	ldr	r1, [pc, #64]	; (80057d0 <xTimerCreateTimerTask+0x84>)
 800578e:	4811      	ldr	r0, [pc, #68]	; (80057d4 <xTimerCreateTimerTask+0x88>)
 8005790:	f7ff f8b4 	bl	80048fc <xTaskCreateStatic>
 8005794:	4603      	mov	r3, r0
 8005796:	4a10      	ldr	r2, [pc, #64]	; (80057d8 <xTimerCreateTimerTask+0x8c>)
 8005798:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800579a:	4b0f      	ldr	r3, [pc, #60]	; (80057d8 <xTimerCreateTimerTask+0x8c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80057a2:	2301      	movs	r3, #1
 80057a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10a      	bne.n	80057c2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80057ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b0:	f383 8811 	msr	BASEPRI, r3
 80057b4:	f3bf 8f6f 	isb	sy
 80057b8:	f3bf 8f4f 	dsb	sy
 80057bc:	613b      	str	r3, [r7, #16]
}
 80057be:	bf00      	nop
 80057c0:	e7fe      	b.n	80057c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80057c2:	697b      	ldr	r3, [r7, #20]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3718      	adds	r7, #24
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	20000d40 	.word	0x20000d40
 80057d0:	0800753c 	.word	0x0800753c
 80057d4:	08005911 	.word	0x08005911
 80057d8:	20000d44 	.word	0x20000d44

080057dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b08a      	sub	sp, #40	; 0x28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
 80057e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80057ea:	2300      	movs	r3, #0
 80057ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10a      	bne.n	800580a <xTimerGenericCommand+0x2e>
	__asm volatile
 80057f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f8:	f383 8811 	msr	BASEPRI, r3
 80057fc:	f3bf 8f6f 	isb	sy
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	623b      	str	r3, [r7, #32]
}
 8005806:	bf00      	nop
 8005808:	e7fe      	b.n	8005808 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800580a:	4b1a      	ldr	r3, [pc, #104]	; (8005874 <xTimerGenericCommand+0x98>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d02a      	beq.n	8005868 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	2b05      	cmp	r3, #5
 8005822:	dc18      	bgt.n	8005856 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005824:	f7ff feb2 	bl	800558c <xTaskGetSchedulerState>
 8005828:	4603      	mov	r3, r0
 800582a:	2b02      	cmp	r3, #2
 800582c:	d109      	bne.n	8005842 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800582e:	4b11      	ldr	r3, [pc, #68]	; (8005874 <xTimerGenericCommand+0x98>)
 8005830:	6818      	ldr	r0, [r3, #0]
 8005832:	f107 0110 	add.w	r1, r7, #16
 8005836:	2300      	movs	r3, #0
 8005838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800583a:	f7fe fc77 	bl	800412c <xQueueGenericSend>
 800583e:	6278      	str	r0, [r7, #36]	; 0x24
 8005840:	e012      	b.n	8005868 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005842:	4b0c      	ldr	r3, [pc, #48]	; (8005874 <xTimerGenericCommand+0x98>)
 8005844:	6818      	ldr	r0, [r3, #0]
 8005846:	f107 0110 	add.w	r1, r7, #16
 800584a:	2300      	movs	r3, #0
 800584c:	2200      	movs	r2, #0
 800584e:	f7fe fc6d 	bl	800412c <xQueueGenericSend>
 8005852:	6278      	str	r0, [r7, #36]	; 0x24
 8005854:	e008      	b.n	8005868 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005856:	4b07      	ldr	r3, [pc, #28]	; (8005874 <xTimerGenericCommand+0x98>)
 8005858:	6818      	ldr	r0, [r3, #0]
 800585a:	f107 0110 	add.w	r1, r7, #16
 800585e:	2300      	movs	r3, #0
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	f7fe fd61 	bl	8004328 <xQueueGenericSendFromISR>
 8005866:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800586a:	4618      	mov	r0, r3
 800586c:	3728      	adds	r7, #40	; 0x28
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	20000d40 	.word	0x20000d40

08005878 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b088      	sub	sp, #32
 800587c:	af02      	add	r7, sp, #8
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005882:	4b22      	ldr	r3, [pc, #136]	; (800590c <prvProcessExpiredTimer+0x94>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	3304      	adds	r3, #4
 8005890:	4618      	mov	r0, r3
 8005892:	f7fe fae3 	bl	8003e5c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800589c:	f003 0304 	and.w	r3, r3, #4
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d022      	beq.n	80058ea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	699a      	ldr	r2, [r3, #24]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	18d1      	adds	r1, r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	6978      	ldr	r0, [r7, #20]
 80058b2:	f000 f8d1 	bl	8005a58 <prvInsertTimerInActiveList>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d01f      	beq.n	80058fc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80058bc:	2300      	movs	r3, #0
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	2300      	movs	r3, #0
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	2100      	movs	r1, #0
 80058c6:	6978      	ldr	r0, [r7, #20]
 80058c8:	f7ff ff88 	bl	80057dc <xTimerGenericCommand>
 80058cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d113      	bne.n	80058fc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80058d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d8:	f383 8811 	msr	BASEPRI, r3
 80058dc:	f3bf 8f6f 	isb	sy
 80058e0:	f3bf 8f4f 	dsb	sy
 80058e4:	60fb      	str	r3, [r7, #12]
}
 80058e6:	bf00      	nop
 80058e8:	e7fe      	b.n	80058e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058f0:	f023 0301 	bic.w	r3, r3, #1
 80058f4:	b2da      	uxtb	r2, r3
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	6978      	ldr	r0, [r7, #20]
 8005902:	4798      	blx	r3
}
 8005904:	bf00      	nop
 8005906:	3718      	adds	r7, #24
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	20000d38 	.word	0x20000d38

08005910 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005918:	f107 0308 	add.w	r3, r7, #8
 800591c:	4618      	mov	r0, r3
 800591e:	f000 f857 	bl	80059d0 <prvGetNextExpireTime>
 8005922:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	4619      	mov	r1, r3
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f000 f803 	bl	8005934 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800592e:	f000 f8d5 	bl	8005adc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005932:	e7f1      	b.n	8005918 <prvTimerTask+0x8>

08005934 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800593e:	f7ff fa39 	bl	8004db4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005942:	f107 0308 	add.w	r3, r7, #8
 8005946:	4618      	mov	r0, r3
 8005948:	f000 f866 	bl	8005a18 <prvSampleTimeNow>
 800594c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d130      	bne.n	80059b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10a      	bne.n	8005970 <prvProcessTimerOrBlockTask+0x3c>
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	429a      	cmp	r2, r3
 8005960:	d806      	bhi.n	8005970 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005962:	f7ff fa35 	bl	8004dd0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005966:	68f9      	ldr	r1, [r7, #12]
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f7ff ff85 	bl	8005878 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800596e:	e024      	b.n	80059ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d008      	beq.n	8005988 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005976:	4b13      	ldr	r3, [pc, #76]	; (80059c4 <prvProcessTimerOrBlockTask+0x90>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d101      	bne.n	8005984 <prvProcessTimerOrBlockTask+0x50>
 8005980:	2301      	movs	r3, #1
 8005982:	e000      	b.n	8005986 <prvProcessTimerOrBlockTask+0x52>
 8005984:	2300      	movs	r3, #0
 8005986:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005988:	4b0f      	ldr	r3, [pc, #60]	; (80059c8 <prvProcessTimerOrBlockTask+0x94>)
 800598a:	6818      	ldr	r0, [r3, #0]
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	683a      	ldr	r2, [r7, #0]
 8005994:	4619      	mov	r1, r3
 8005996:	f7fe ff7d 	bl	8004894 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800599a:	f7ff fa19 	bl	8004dd0 <xTaskResumeAll>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d10a      	bne.n	80059ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80059a4:	4b09      	ldr	r3, [pc, #36]	; (80059cc <prvProcessTimerOrBlockTask+0x98>)
 80059a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059aa:	601a      	str	r2, [r3, #0]
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	f3bf 8f6f 	isb	sy
}
 80059b4:	e001      	b.n	80059ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80059b6:	f7ff fa0b 	bl	8004dd0 <xTaskResumeAll>
}
 80059ba:	bf00      	nop
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	20000d3c 	.word	0x20000d3c
 80059c8:	20000d40 	.word	0x20000d40
 80059cc:	e000ed04 	.word	0xe000ed04

080059d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80059d8:	4b0e      	ldr	r3, [pc, #56]	; (8005a14 <prvGetNextExpireTime+0x44>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <prvGetNextExpireTime+0x16>
 80059e2:	2201      	movs	r2, #1
 80059e4:	e000      	b.n	80059e8 <prvGetNextExpireTime+0x18>
 80059e6:	2200      	movs	r2, #0
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d105      	bne.n	8005a00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059f4:	4b07      	ldr	r3, [pc, #28]	; (8005a14 <prvGetNextExpireTime+0x44>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	60fb      	str	r3, [r7, #12]
 80059fe:	e001      	b.n	8005a04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005a00:	2300      	movs	r3, #0
 8005a02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005a04:	68fb      	ldr	r3, [r7, #12]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	20000d38 	.word	0x20000d38

08005a18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005a20:	f7ff fa74 	bl	8004f0c <xTaskGetTickCount>
 8005a24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005a26:	4b0b      	ldr	r3, [pc, #44]	; (8005a54 <prvSampleTimeNow+0x3c>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d205      	bcs.n	8005a3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005a30:	f000 f936 	bl	8005ca0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	601a      	str	r2, [r3, #0]
 8005a3a:	e002      	b.n	8005a42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005a42:	4a04      	ldr	r2, [pc, #16]	; (8005a54 <prvSampleTimeNow+0x3c>)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005a48:	68fb      	ldr	r3, [r7, #12]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	20000d48 	.word	0x20000d48

08005a58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b086      	sub	sp, #24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
 8005a64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005a66:	2300      	movs	r3, #0
 8005a68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d812      	bhi.n	8005aa4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	1ad2      	subs	r2, r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d302      	bcc.n	8005a92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	617b      	str	r3, [r7, #20]
 8005a90:	e01b      	b.n	8005aca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005a92:	4b10      	ldr	r3, [pc, #64]	; (8005ad4 <prvInsertTimerInActiveList+0x7c>)
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	3304      	adds	r3, #4
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	4610      	mov	r0, r2
 8005a9e:	f7fe f9a4 	bl	8003dea <vListInsert>
 8005aa2:	e012      	b.n	8005aca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d206      	bcs.n	8005aba <prvInsertTimerInActiveList+0x62>
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d302      	bcc.n	8005aba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	617b      	str	r3, [r7, #20]
 8005ab8:	e007      	b.n	8005aca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005aba:	4b07      	ldr	r3, [pc, #28]	; (8005ad8 <prvInsertTimerInActiveList+0x80>)
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	3304      	adds	r3, #4
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	4610      	mov	r0, r2
 8005ac6:	f7fe f990 	bl	8003dea <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005aca:	697b      	ldr	r3, [r7, #20]
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3718      	adds	r7, #24
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	20000d3c 	.word	0x20000d3c
 8005ad8:	20000d38 	.word	0x20000d38

08005adc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b08e      	sub	sp, #56	; 0x38
 8005ae0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ae2:	e0ca      	b.n	8005c7a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	da18      	bge.n	8005b1c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005aea:	1d3b      	adds	r3, r7, #4
 8005aec:	3304      	adds	r3, #4
 8005aee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10a      	bne.n	8005b0c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afa:	f383 8811 	msr	BASEPRI, r3
 8005afe:	f3bf 8f6f 	isb	sy
 8005b02:	f3bf 8f4f 	dsb	sy
 8005b06:	61fb      	str	r3, [r7, #28]
}
 8005b08:	bf00      	nop
 8005b0a:	e7fe      	b.n	8005b0a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b12:	6850      	ldr	r0, [r2, #4]
 8005b14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b16:	6892      	ldr	r2, [r2, #8]
 8005b18:	4611      	mov	r1, r2
 8005b1a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f2c0 80aa 	blt.w	8005c78 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d004      	beq.n	8005b3a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b32:	3304      	adds	r3, #4
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7fe f991 	bl	8003e5c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b3a:	463b      	mov	r3, r7
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7ff ff6b 	bl	8005a18 <prvSampleTimeNow>
 8005b42:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b09      	cmp	r3, #9
 8005b48:	f200 8097 	bhi.w	8005c7a <prvProcessReceivedCommands+0x19e>
 8005b4c:	a201      	add	r2, pc, #4	; (adr r2, 8005b54 <prvProcessReceivedCommands+0x78>)
 8005b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b52:	bf00      	nop
 8005b54:	08005b7d 	.word	0x08005b7d
 8005b58:	08005b7d 	.word	0x08005b7d
 8005b5c:	08005b7d 	.word	0x08005b7d
 8005b60:	08005bf1 	.word	0x08005bf1
 8005b64:	08005c05 	.word	0x08005c05
 8005b68:	08005c4f 	.word	0x08005c4f
 8005b6c:	08005b7d 	.word	0x08005b7d
 8005b70:	08005b7d 	.word	0x08005b7d
 8005b74:	08005bf1 	.word	0x08005bf1
 8005b78:	08005c05 	.word	0x08005c05
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b82:	f043 0301 	orr.w	r3, r3, #1
 8005b86:	b2da      	uxtb	r2, r3
 8005b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	18d1      	adds	r1, r2, r3
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b9c:	f7ff ff5c 	bl	8005a58 <prvInsertTimerInActiveList>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d069      	beq.n	8005c7a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bb4:	f003 0304 	and.w	r3, r3, #4
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d05e      	beq.n	8005c7a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	441a      	add	r2, r3
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	9300      	str	r3, [sp, #0]
 8005bc8:	2300      	movs	r3, #0
 8005bca:	2100      	movs	r1, #0
 8005bcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bce:	f7ff fe05 	bl	80057dc <xTimerGenericCommand>
 8005bd2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005bd4:	6a3b      	ldr	r3, [r7, #32]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d14f      	bne.n	8005c7a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bde:	f383 8811 	msr	BASEPRI, r3
 8005be2:	f3bf 8f6f 	isb	sy
 8005be6:	f3bf 8f4f 	dsb	sy
 8005bea:	61bb      	str	r3, [r7, #24]
}
 8005bec:	bf00      	nop
 8005bee:	e7fe      	b.n	8005bee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bf6:	f023 0301 	bic.w	r3, r3, #1
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005c02:	e03a      	b.n	8005c7a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c0a:	f043 0301 	orr.w	r3, r3, #1
 8005c0e:	b2da      	uxtb	r2, r3
 8005c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10a      	bne.n	8005c3a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c28:	f383 8811 	msr	BASEPRI, r3
 8005c2c:	f3bf 8f6f 	isb	sy
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	617b      	str	r3, [r7, #20]
}
 8005c36:	bf00      	nop
 8005c38:	e7fe      	b.n	8005c38 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3c:	699a      	ldr	r2, [r3, #24]
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c40:	18d1      	adds	r1, r2, r3
 8005c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c48:	f7ff ff06 	bl	8005a58 <prvInsertTimerInActiveList>
					break;
 8005c4c:	e015      	b.n	8005c7a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c54:	f003 0302 	and.w	r3, r3, #2
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d103      	bne.n	8005c64 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005c5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c5e:	f000 fbdf 	bl	8006420 <vPortFree>
 8005c62:	e00a      	b.n	8005c7a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c6a:	f023 0301 	bic.w	r3, r3, #1
 8005c6e:	b2da      	uxtb	r2, r3
 8005c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005c76:	e000      	b.n	8005c7a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005c78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c7a:	4b08      	ldr	r3, [pc, #32]	; (8005c9c <prvProcessReceivedCommands+0x1c0>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	1d39      	adds	r1, r7, #4
 8005c80:	2200      	movs	r2, #0
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7fe fbec 	bl	8004460 <xQueueReceive>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f47f af2a 	bne.w	8005ae4 <prvProcessReceivedCommands+0x8>
	}
}
 8005c90:	bf00      	nop
 8005c92:	bf00      	nop
 8005c94:	3730      	adds	r7, #48	; 0x30
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	20000d40 	.word	0x20000d40

08005ca0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b088      	sub	sp, #32
 8005ca4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ca6:	e048      	b.n	8005d3a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ca8:	4b2d      	ldr	r3, [pc, #180]	; (8005d60 <prvSwitchTimerLists+0xc0>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cb2:	4b2b      	ldr	r3, [pc, #172]	; (8005d60 <prvSwitchTimerLists+0xc0>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	3304      	adds	r3, #4
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7fe f8cb 	bl	8003e5c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cd4:	f003 0304 	and.w	r3, r3, #4
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d02e      	beq.n	8005d3a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d90e      	bls.n	8005d0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005cfa:	4b19      	ldr	r3, [pc, #100]	; (8005d60 <prvSwitchTimerLists+0xc0>)
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	3304      	adds	r3, #4
 8005d02:	4619      	mov	r1, r3
 8005d04:	4610      	mov	r0, r2
 8005d06:	f7fe f870 	bl	8003dea <vListInsert>
 8005d0a:	e016      	b.n	8005d3a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	9300      	str	r3, [sp, #0]
 8005d10:	2300      	movs	r3, #0
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	2100      	movs	r1, #0
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f7ff fd60 	bl	80057dc <xTimerGenericCommand>
 8005d1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10a      	bne.n	8005d3a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d28:	f383 8811 	msr	BASEPRI, r3
 8005d2c:	f3bf 8f6f 	isb	sy
 8005d30:	f3bf 8f4f 	dsb	sy
 8005d34:	603b      	str	r3, [r7, #0]
}
 8005d36:	bf00      	nop
 8005d38:	e7fe      	b.n	8005d38 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d3a:	4b09      	ldr	r3, [pc, #36]	; (8005d60 <prvSwitchTimerLists+0xc0>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1b1      	bne.n	8005ca8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005d44:	4b06      	ldr	r3, [pc, #24]	; (8005d60 <prvSwitchTimerLists+0xc0>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005d4a:	4b06      	ldr	r3, [pc, #24]	; (8005d64 <prvSwitchTimerLists+0xc4>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a04      	ldr	r2, [pc, #16]	; (8005d60 <prvSwitchTimerLists+0xc0>)
 8005d50:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005d52:	4a04      	ldr	r2, [pc, #16]	; (8005d64 <prvSwitchTimerLists+0xc4>)
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	6013      	str	r3, [r2, #0]
}
 8005d58:	bf00      	nop
 8005d5a:	3718      	adds	r7, #24
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	20000d38 	.word	0x20000d38
 8005d64:	20000d3c 	.word	0x20000d3c

08005d68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005d6e:	f000 f969 	bl	8006044 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005d72:	4b15      	ldr	r3, [pc, #84]	; (8005dc8 <prvCheckForValidListAndQueue+0x60>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d120      	bne.n	8005dbc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005d7a:	4814      	ldr	r0, [pc, #80]	; (8005dcc <prvCheckForValidListAndQueue+0x64>)
 8005d7c:	f7fd ffe4 	bl	8003d48 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005d80:	4813      	ldr	r0, [pc, #76]	; (8005dd0 <prvCheckForValidListAndQueue+0x68>)
 8005d82:	f7fd ffe1 	bl	8003d48 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005d86:	4b13      	ldr	r3, [pc, #76]	; (8005dd4 <prvCheckForValidListAndQueue+0x6c>)
 8005d88:	4a10      	ldr	r2, [pc, #64]	; (8005dcc <prvCheckForValidListAndQueue+0x64>)
 8005d8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005d8c:	4b12      	ldr	r3, [pc, #72]	; (8005dd8 <prvCheckForValidListAndQueue+0x70>)
 8005d8e:	4a10      	ldr	r2, [pc, #64]	; (8005dd0 <prvCheckForValidListAndQueue+0x68>)
 8005d90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005d92:	2300      	movs	r3, #0
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	4b11      	ldr	r3, [pc, #68]	; (8005ddc <prvCheckForValidListAndQueue+0x74>)
 8005d98:	4a11      	ldr	r2, [pc, #68]	; (8005de0 <prvCheckForValidListAndQueue+0x78>)
 8005d9a:	2110      	movs	r1, #16
 8005d9c:	200a      	movs	r0, #10
 8005d9e:	f7fe f8ef 	bl	8003f80 <xQueueGenericCreateStatic>
 8005da2:	4603      	mov	r3, r0
 8005da4:	4a08      	ldr	r2, [pc, #32]	; (8005dc8 <prvCheckForValidListAndQueue+0x60>)
 8005da6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005da8:	4b07      	ldr	r3, [pc, #28]	; (8005dc8 <prvCheckForValidListAndQueue+0x60>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d005      	beq.n	8005dbc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005db0:	4b05      	ldr	r3, [pc, #20]	; (8005dc8 <prvCheckForValidListAndQueue+0x60>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	490b      	ldr	r1, [pc, #44]	; (8005de4 <prvCheckForValidListAndQueue+0x7c>)
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7fe fd42 	bl	8004840 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005dbc:	f000 f972 	bl	80060a4 <vPortExitCritical>
}
 8005dc0:	bf00      	nop
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	20000d40 	.word	0x20000d40
 8005dcc:	20000d10 	.word	0x20000d10
 8005dd0:	20000d24 	.word	0x20000d24
 8005dd4:	20000d38 	.word	0x20000d38
 8005dd8:	20000d3c 	.word	0x20000d3c
 8005ddc:	20000dec 	.word	0x20000dec
 8005de0:	20000d4c 	.word	0x20000d4c
 8005de4:	08007544 	.word	0x08007544

08005de8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	3b04      	subs	r3, #4
 8005df8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	3b04      	subs	r3, #4
 8005e06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	f023 0201 	bic.w	r2, r3, #1
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	3b04      	subs	r3, #4
 8005e16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005e18:	4a0c      	ldr	r2, [pc, #48]	; (8005e4c <pxPortInitialiseStack+0x64>)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	3b14      	subs	r3, #20
 8005e22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	3b04      	subs	r3, #4
 8005e2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f06f 0202 	mvn.w	r2, #2
 8005e36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	3b20      	subs	r3, #32
 8005e3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr
 8005e4c:	08005e51 	.word	0x08005e51

08005e50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005e56:	2300      	movs	r3, #0
 8005e58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005e5a:	4b12      	ldr	r3, [pc, #72]	; (8005ea4 <prvTaskExitError+0x54>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e62:	d00a      	beq.n	8005e7a <prvTaskExitError+0x2a>
	__asm volatile
 8005e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e68:	f383 8811 	msr	BASEPRI, r3
 8005e6c:	f3bf 8f6f 	isb	sy
 8005e70:	f3bf 8f4f 	dsb	sy
 8005e74:	60fb      	str	r3, [r7, #12]
}
 8005e76:	bf00      	nop
 8005e78:	e7fe      	b.n	8005e78 <prvTaskExitError+0x28>
	__asm volatile
 8005e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7e:	f383 8811 	msr	BASEPRI, r3
 8005e82:	f3bf 8f6f 	isb	sy
 8005e86:	f3bf 8f4f 	dsb	sy
 8005e8a:	60bb      	str	r3, [r7, #8]
}
 8005e8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005e8e:	bf00      	nop
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d0fc      	beq.n	8005e90 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e96:	bf00      	nop
 8005e98:	bf00      	nop
 8005e9a:	3714      	adds	r7, #20
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr
 8005ea4:	2000000c 	.word	0x2000000c
	...

08005eb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005eb0:	4b07      	ldr	r3, [pc, #28]	; (8005ed0 <pxCurrentTCBConst2>)
 8005eb2:	6819      	ldr	r1, [r3, #0]
 8005eb4:	6808      	ldr	r0, [r1, #0]
 8005eb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eba:	f380 8809 	msr	PSP, r0
 8005ebe:	f3bf 8f6f 	isb	sy
 8005ec2:	f04f 0000 	mov.w	r0, #0
 8005ec6:	f380 8811 	msr	BASEPRI, r0
 8005eca:	4770      	bx	lr
 8005ecc:	f3af 8000 	nop.w

08005ed0 <pxCurrentTCBConst2>:
 8005ed0:	20000810 	.word	0x20000810
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005ed4:	bf00      	nop
 8005ed6:	bf00      	nop

08005ed8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005ed8:	4808      	ldr	r0, [pc, #32]	; (8005efc <prvPortStartFirstTask+0x24>)
 8005eda:	6800      	ldr	r0, [r0, #0]
 8005edc:	6800      	ldr	r0, [r0, #0]
 8005ede:	f380 8808 	msr	MSP, r0
 8005ee2:	f04f 0000 	mov.w	r0, #0
 8005ee6:	f380 8814 	msr	CONTROL, r0
 8005eea:	b662      	cpsie	i
 8005eec:	b661      	cpsie	f
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	f3bf 8f6f 	isb	sy
 8005ef6:	df00      	svc	0
 8005ef8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005efa:	bf00      	nop
 8005efc:	e000ed08 	.word	0xe000ed08

08005f00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005f06:	4b46      	ldr	r3, [pc, #280]	; (8006020 <xPortStartScheduler+0x120>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a46      	ldr	r2, [pc, #280]	; (8006024 <xPortStartScheduler+0x124>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d10a      	bne.n	8005f26 <xPortStartScheduler+0x26>
	__asm volatile
 8005f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f14:	f383 8811 	msr	BASEPRI, r3
 8005f18:	f3bf 8f6f 	isb	sy
 8005f1c:	f3bf 8f4f 	dsb	sy
 8005f20:	613b      	str	r3, [r7, #16]
}
 8005f22:	bf00      	nop
 8005f24:	e7fe      	b.n	8005f24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005f26:	4b3e      	ldr	r3, [pc, #248]	; (8006020 <xPortStartScheduler+0x120>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a3f      	ldr	r2, [pc, #252]	; (8006028 <xPortStartScheduler+0x128>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d10a      	bne.n	8005f46 <xPortStartScheduler+0x46>
	__asm volatile
 8005f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f34:	f383 8811 	msr	BASEPRI, r3
 8005f38:	f3bf 8f6f 	isb	sy
 8005f3c:	f3bf 8f4f 	dsb	sy
 8005f40:	60fb      	str	r3, [r7, #12]
}
 8005f42:	bf00      	nop
 8005f44:	e7fe      	b.n	8005f44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005f46:	4b39      	ldr	r3, [pc, #228]	; (800602c <xPortStartScheduler+0x12c>)
 8005f48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	22ff      	movs	r2, #255	; 0xff
 8005f56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005f60:	78fb      	ldrb	r3, [r7, #3]
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005f68:	b2da      	uxtb	r2, r3
 8005f6a:	4b31      	ldr	r3, [pc, #196]	; (8006030 <xPortStartScheduler+0x130>)
 8005f6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005f6e:	4b31      	ldr	r3, [pc, #196]	; (8006034 <xPortStartScheduler+0x134>)
 8005f70:	2207      	movs	r2, #7
 8005f72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f74:	e009      	b.n	8005f8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005f76:	4b2f      	ldr	r3, [pc, #188]	; (8006034 <xPortStartScheduler+0x134>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	4a2d      	ldr	r2, [pc, #180]	; (8006034 <xPortStartScheduler+0x134>)
 8005f7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f80:	78fb      	ldrb	r3, [r7, #3]
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	005b      	lsls	r3, r3, #1
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f8a:	78fb      	ldrb	r3, [r7, #3]
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f92:	2b80      	cmp	r3, #128	; 0x80
 8005f94:	d0ef      	beq.n	8005f76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f96:	4b27      	ldr	r3, [pc, #156]	; (8006034 <xPortStartScheduler+0x134>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f1c3 0307 	rsb	r3, r3, #7
 8005f9e:	2b04      	cmp	r3, #4
 8005fa0:	d00a      	beq.n	8005fb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa6:	f383 8811 	msr	BASEPRI, r3
 8005faa:	f3bf 8f6f 	isb	sy
 8005fae:	f3bf 8f4f 	dsb	sy
 8005fb2:	60bb      	str	r3, [r7, #8]
}
 8005fb4:	bf00      	nop
 8005fb6:	e7fe      	b.n	8005fb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005fb8:	4b1e      	ldr	r3, [pc, #120]	; (8006034 <xPortStartScheduler+0x134>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	021b      	lsls	r3, r3, #8
 8005fbe:	4a1d      	ldr	r2, [pc, #116]	; (8006034 <xPortStartScheduler+0x134>)
 8005fc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005fc2:	4b1c      	ldr	r3, [pc, #112]	; (8006034 <xPortStartScheduler+0x134>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005fca:	4a1a      	ldr	r2, [pc, #104]	; (8006034 <xPortStartScheduler+0x134>)
 8005fcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	b2da      	uxtb	r2, r3
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005fd6:	4b18      	ldr	r3, [pc, #96]	; (8006038 <xPortStartScheduler+0x138>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a17      	ldr	r2, [pc, #92]	; (8006038 <xPortStartScheduler+0x138>)
 8005fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005fe0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005fe2:	4b15      	ldr	r3, [pc, #84]	; (8006038 <xPortStartScheduler+0x138>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a14      	ldr	r2, [pc, #80]	; (8006038 <xPortStartScheduler+0x138>)
 8005fe8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005fec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005fee:	f000 f8dd 	bl	80061ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ff2:	4b12      	ldr	r3, [pc, #72]	; (800603c <xPortStartScheduler+0x13c>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005ff8:	f000 f8fc 	bl	80061f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005ffc:	4b10      	ldr	r3, [pc, #64]	; (8006040 <xPortStartScheduler+0x140>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a0f      	ldr	r2, [pc, #60]	; (8006040 <xPortStartScheduler+0x140>)
 8006002:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006006:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006008:	f7ff ff66 	bl	8005ed8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800600c:	f7ff f848 	bl	80050a0 <vTaskSwitchContext>
	prvTaskExitError();
 8006010:	f7ff ff1e 	bl	8005e50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3718      	adds	r7, #24
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	e000ed00 	.word	0xe000ed00
 8006024:	410fc271 	.word	0x410fc271
 8006028:	410fc270 	.word	0x410fc270
 800602c:	e000e400 	.word	0xe000e400
 8006030:	20000e3c 	.word	0x20000e3c
 8006034:	20000e40 	.word	0x20000e40
 8006038:	e000ed20 	.word	0xe000ed20
 800603c:	2000000c 	.word	0x2000000c
 8006040:	e000ef34 	.word	0xe000ef34

08006044 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
	__asm volatile
 800604a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604e:	f383 8811 	msr	BASEPRI, r3
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	607b      	str	r3, [r7, #4]
}
 800605c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800605e:	4b0f      	ldr	r3, [pc, #60]	; (800609c <vPortEnterCritical+0x58>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	3301      	adds	r3, #1
 8006064:	4a0d      	ldr	r2, [pc, #52]	; (800609c <vPortEnterCritical+0x58>)
 8006066:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006068:	4b0c      	ldr	r3, [pc, #48]	; (800609c <vPortEnterCritical+0x58>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d10f      	bne.n	8006090 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006070:	4b0b      	ldr	r3, [pc, #44]	; (80060a0 <vPortEnterCritical+0x5c>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00a      	beq.n	8006090 <vPortEnterCritical+0x4c>
	__asm volatile
 800607a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607e:	f383 8811 	msr	BASEPRI, r3
 8006082:	f3bf 8f6f 	isb	sy
 8006086:	f3bf 8f4f 	dsb	sy
 800608a:	603b      	str	r3, [r7, #0]
}
 800608c:	bf00      	nop
 800608e:	e7fe      	b.n	800608e <vPortEnterCritical+0x4a>
	}
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr
 800609c:	2000000c 	.word	0x2000000c
 80060a0:	e000ed04 	.word	0xe000ed04

080060a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80060aa:	4b12      	ldr	r3, [pc, #72]	; (80060f4 <vPortExitCritical+0x50>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10a      	bne.n	80060c8 <vPortExitCritical+0x24>
	__asm volatile
 80060b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b6:	f383 8811 	msr	BASEPRI, r3
 80060ba:	f3bf 8f6f 	isb	sy
 80060be:	f3bf 8f4f 	dsb	sy
 80060c2:	607b      	str	r3, [r7, #4]
}
 80060c4:	bf00      	nop
 80060c6:	e7fe      	b.n	80060c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80060c8:	4b0a      	ldr	r3, [pc, #40]	; (80060f4 <vPortExitCritical+0x50>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	3b01      	subs	r3, #1
 80060ce:	4a09      	ldr	r2, [pc, #36]	; (80060f4 <vPortExitCritical+0x50>)
 80060d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80060d2:	4b08      	ldr	r3, [pc, #32]	; (80060f4 <vPortExitCritical+0x50>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d105      	bne.n	80060e6 <vPortExitCritical+0x42>
 80060da:	2300      	movs	r3, #0
 80060dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	f383 8811 	msr	BASEPRI, r3
}
 80060e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80060e6:	bf00      	nop
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	2000000c 	.word	0x2000000c
	...

08006100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006100:	f3ef 8009 	mrs	r0, PSP
 8006104:	f3bf 8f6f 	isb	sy
 8006108:	4b15      	ldr	r3, [pc, #84]	; (8006160 <pxCurrentTCBConst>)
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	f01e 0f10 	tst.w	lr, #16
 8006110:	bf08      	it	eq
 8006112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800611a:	6010      	str	r0, [r2, #0]
 800611c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006120:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006124:	f380 8811 	msr	BASEPRI, r0
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	f7fe ffb6 	bl	80050a0 <vTaskSwitchContext>
 8006134:	f04f 0000 	mov.w	r0, #0
 8006138:	f380 8811 	msr	BASEPRI, r0
 800613c:	bc09      	pop	{r0, r3}
 800613e:	6819      	ldr	r1, [r3, #0]
 8006140:	6808      	ldr	r0, [r1, #0]
 8006142:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006146:	f01e 0f10 	tst.w	lr, #16
 800614a:	bf08      	it	eq
 800614c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006150:	f380 8809 	msr	PSP, r0
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	f3af 8000 	nop.w

08006160 <pxCurrentTCBConst>:
 8006160:	20000810 	.word	0x20000810
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006164:	bf00      	nop
 8006166:	bf00      	nop

08006168 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
	__asm volatile
 800616e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006172:	f383 8811 	msr	BASEPRI, r3
 8006176:	f3bf 8f6f 	isb	sy
 800617a:	f3bf 8f4f 	dsb	sy
 800617e:	607b      	str	r3, [r7, #4]
}
 8006180:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006182:	f7fe fed3 	bl	8004f2c <xTaskIncrementTick>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d003      	beq.n	8006194 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800618c:	4b06      	ldr	r3, [pc, #24]	; (80061a8 <xPortSysTickHandler+0x40>)
 800618e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006192:	601a      	str	r2, [r3, #0]
 8006194:	2300      	movs	r3, #0
 8006196:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	f383 8811 	msr	BASEPRI, r3
}
 800619e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80061a0:	bf00      	nop
 80061a2:	3708      	adds	r7, #8
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	e000ed04 	.word	0xe000ed04

080061ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80061ac:	b480      	push	{r7}
 80061ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80061b0:	4b0b      	ldr	r3, [pc, #44]	; (80061e0 <vPortSetupTimerInterrupt+0x34>)
 80061b2:	2200      	movs	r2, #0
 80061b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80061b6:	4b0b      	ldr	r3, [pc, #44]	; (80061e4 <vPortSetupTimerInterrupt+0x38>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80061bc:	4b0a      	ldr	r3, [pc, #40]	; (80061e8 <vPortSetupTimerInterrupt+0x3c>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a0a      	ldr	r2, [pc, #40]	; (80061ec <vPortSetupTimerInterrupt+0x40>)
 80061c2:	fba2 2303 	umull	r2, r3, r2, r3
 80061c6:	099b      	lsrs	r3, r3, #6
 80061c8:	4a09      	ldr	r2, [pc, #36]	; (80061f0 <vPortSetupTimerInterrupt+0x44>)
 80061ca:	3b01      	subs	r3, #1
 80061cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80061ce:	4b04      	ldr	r3, [pc, #16]	; (80061e0 <vPortSetupTimerInterrupt+0x34>)
 80061d0:	2207      	movs	r2, #7
 80061d2:	601a      	str	r2, [r3, #0]
}
 80061d4:	bf00      	nop
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	e000e010 	.word	0xe000e010
 80061e4:	e000e018 	.word	0xe000e018
 80061e8:	20000000 	.word	0x20000000
 80061ec:	10624dd3 	.word	0x10624dd3
 80061f0:	e000e014 	.word	0xe000e014

080061f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80061f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006204 <vPortEnableVFP+0x10>
 80061f8:	6801      	ldr	r1, [r0, #0]
 80061fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80061fe:	6001      	str	r1, [r0, #0]
 8006200:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006202:	bf00      	nop
 8006204:	e000ed88 	.word	0xe000ed88

08006208 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800620e:	f3ef 8305 	mrs	r3, IPSR
 8006212:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2b0f      	cmp	r3, #15
 8006218:	d914      	bls.n	8006244 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800621a:	4a17      	ldr	r2, [pc, #92]	; (8006278 <vPortValidateInterruptPriority+0x70>)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	4413      	add	r3, r2
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006224:	4b15      	ldr	r3, [pc, #84]	; (800627c <vPortValidateInterruptPriority+0x74>)
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	7afa      	ldrb	r2, [r7, #11]
 800622a:	429a      	cmp	r2, r3
 800622c:	d20a      	bcs.n	8006244 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800622e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	607b      	str	r3, [r7, #4]
}
 8006240:	bf00      	nop
 8006242:	e7fe      	b.n	8006242 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006244:	4b0e      	ldr	r3, [pc, #56]	; (8006280 <vPortValidateInterruptPriority+0x78>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800624c:	4b0d      	ldr	r3, [pc, #52]	; (8006284 <vPortValidateInterruptPriority+0x7c>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	429a      	cmp	r2, r3
 8006252:	d90a      	bls.n	800626a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006258:	f383 8811 	msr	BASEPRI, r3
 800625c:	f3bf 8f6f 	isb	sy
 8006260:	f3bf 8f4f 	dsb	sy
 8006264:	603b      	str	r3, [r7, #0]
}
 8006266:	bf00      	nop
 8006268:	e7fe      	b.n	8006268 <vPortValidateInterruptPriority+0x60>
	}
 800626a:	bf00      	nop
 800626c:	3714      	adds	r7, #20
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	e000e3f0 	.word	0xe000e3f0
 800627c:	20000e3c 	.word	0x20000e3c
 8006280:	e000ed0c 	.word	0xe000ed0c
 8006284:	20000e40 	.word	0x20000e40

08006288 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b08a      	sub	sp, #40	; 0x28
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006290:	2300      	movs	r3, #0
 8006292:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006294:	f7fe fd8e 	bl	8004db4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006298:	4b5b      	ldr	r3, [pc, #364]	; (8006408 <pvPortMalloc+0x180>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d101      	bne.n	80062a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80062a0:	f000 f920 	bl	80064e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80062a4:	4b59      	ldr	r3, [pc, #356]	; (800640c <pvPortMalloc+0x184>)
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4013      	ands	r3, r2
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f040 8093 	bne.w	80063d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d01d      	beq.n	80062f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80062b8:	2208      	movs	r2, #8
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4413      	add	r3, r2
 80062be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f003 0307 	and.w	r3, r3, #7
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d014      	beq.n	80062f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f023 0307 	bic.w	r3, r3, #7
 80062d0:	3308      	adds	r3, #8
 80062d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f003 0307 	and.w	r3, r3, #7
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00a      	beq.n	80062f4 <pvPortMalloc+0x6c>
	__asm volatile
 80062de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e2:	f383 8811 	msr	BASEPRI, r3
 80062e6:	f3bf 8f6f 	isb	sy
 80062ea:	f3bf 8f4f 	dsb	sy
 80062ee:	617b      	str	r3, [r7, #20]
}
 80062f0:	bf00      	nop
 80062f2:	e7fe      	b.n	80062f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d06e      	beq.n	80063d8 <pvPortMalloc+0x150>
 80062fa:	4b45      	ldr	r3, [pc, #276]	; (8006410 <pvPortMalloc+0x188>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	429a      	cmp	r2, r3
 8006302:	d869      	bhi.n	80063d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006304:	4b43      	ldr	r3, [pc, #268]	; (8006414 <pvPortMalloc+0x18c>)
 8006306:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006308:	4b42      	ldr	r3, [pc, #264]	; (8006414 <pvPortMalloc+0x18c>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800630e:	e004      	b.n	800631a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	429a      	cmp	r2, r3
 8006322:	d903      	bls.n	800632c <pvPortMalloc+0xa4>
 8006324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1f1      	bne.n	8006310 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800632c:	4b36      	ldr	r3, [pc, #216]	; (8006408 <pvPortMalloc+0x180>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006332:	429a      	cmp	r2, r3
 8006334:	d050      	beq.n	80063d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006336:	6a3b      	ldr	r3, [r7, #32]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2208      	movs	r2, #8
 800633c:	4413      	add	r3, r2
 800633e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	6a3b      	ldr	r3, [r7, #32]
 8006346:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	1ad2      	subs	r2, r2, r3
 8006350:	2308      	movs	r3, #8
 8006352:	005b      	lsls	r3, r3, #1
 8006354:	429a      	cmp	r2, r3
 8006356:	d91f      	bls.n	8006398 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4413      	add	r3, r2
 800635e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	f003 0307 	and.w	r3, r3, #7
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00a      	beq.n	8006380 <pvPortMalloc+0xf8>
	__asm volatile
 800636a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636e:	f383 8811 	msr	BASEPRI, r3
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	f3bf 8f4f 	dsb	sy
 800637a:	613b      	str	r3, [r7, #16]
}
 800637c:	bf00      	nop
 800637e:	e7fe      	b.n	800637e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006382:	685a      	ldr	r2, [r3, #4]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	1ad2      	subs	r2, r2, r3
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800638c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006392:	69b8      	ldr	r0, [r7, #24]
 8006394:	f000 f908 	bl	80065a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006398:	4b1d      	ldr	r3, [pc, #116]	; (8006410 <pvPortMalloc+0x188>)
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	4a1b      	ldr	r2, [pc, #108]	; (8006410 <pvPortMalloc+0x188>)
 80063a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80063a6:	4b1a      	ldr	r3, [pc, #104]	; (8006410 <pvPortMalloc+0x188>)
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	4b1b      	ldr	r3, [pc, #108]	; (8006418 <pvPortMalloc+0x190>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d203      	bcs.n	80063ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80063b2:	4b17      	ldr	r3, [pc, #92]	; (8006410 <pvPortMalloc+0x188>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a18      	ldr	r2, [pc, #96]	; (8006418 <pvPortMalloc+0x190>)
 80063b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063bc:	685a      	ldr	r2, [r3, #4]
 80063be:	4b13      	ldr	r3, [pc, #76]	; (800640c <pvPortMalloc+0x184>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	431a      	orrs	r2, r3
 80063c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80063c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ca:	2200      	movs	r2, #0
 80063cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80063ce:	4b13      	ldr	r3, [pc, #76]	; (800641c <pvPortMalloc+0x194>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	3301      	adds	r3, #1
 80063d4:	4a11      	ldr	r2, [pc, #68]	; (800641c <pvPortMalloc+0x194>)
 80063d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80063d8:	f7fe fcfa 	bl	8004dd0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	f003 0307 	and.w	r3, r3, #7
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00a      	beq.n	80063fc <pvPortMalloc+0x174>
	__asm volatile
 80063e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ea:	f383 8811 	msr	BASEPRI, r3
 80063ee:	f3bf 8f6f 	isb	sy
 80063f2:	f3bf 8f4f 	dsb	sy
 80063f6:	60fb      	str	r3, [r7, #12]
}
 80063f8:	bf00      	nop
 80063fa:	e7fe      	b.n	80063fa <pvPortMalloc+0x172>
	return pvReturn;
 80063fc:	69fb      	ldr	r3, [r7, #28]
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3728      	adds	r7, #40	; 0x28
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	20004a4c 	.word	0x20004a4c
 800640c:	20004a60 	.word	0x20004a60
 8006410:	20004a50 	.word	0x20004a50
 8006414:	20004a44 	.word	0x20004a44
 8006418:	20004a54 	.word	0x20004a54
 800641c:	20004a58 	.word	0x20004a58

08006420 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d04d      	beq.n	80064ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006432:	2308      	movs	r3, #8
 8006434:	425b      	negs	r3, r3
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	4413      	add	r3, r2
 800643a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	685a      	ldr	r2, [r3, #4]
 8006444:	4b24      	ldr	r3, [pc, #144]	; (80064d8 <vPortFree+0xb8>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4013      	ands	r3, r2
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10a      	bne.n	8006464 <vPortFree+0x44>
	__asm volatile
 800644e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006452:	f383 8811 	msr	BASEPRI, r3
 8006456:	f3bf 8f6f 	isb	sy
 800645a:	f3bf 8f4f 	dsb	sy
 800645e:	60fb      	str	r3, [r7, #12]
}
 8006460:	bf00      	nop
 8006462:	e7fe      	b.n	8006462 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00a      	beq.n	8006482 <vPortFree+0x62>
	__asm volatile
 800646c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006470:	f383 8811 	msr	BASEPRI, r3
 8006474:	f3bf 8f6f 	isb	sy
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	60bb      	str	r3, [r7, #8]
}
 800647e:	bf00      	nop
 8006480:	e7fe      	b.n	8006480 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	685a      	ldr	r2, [r3, #4]
 8006486:	4b14      	ldr	r3, [pc, #80]	; (80064d8 <vPortFree+0xb8>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4013      	ands	r3, r2
 800648c:	2b00      	cmp	r3, #0
 800648e:	d01e      	beq.n	80064ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d11a      	bne.n	80064ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	4b0e      	ldr	r3, [pc, #56]	; (80064d8 <vPortFree+0xb8>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	43db      	mvns	r3, r3
 80064a2:	401a      	ands	r2, r3
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80064a8:	f7fe fc84 	bl	8004db4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	685a      	ldr	r2, [r3, #4]
 80064b0:	4b0a      	ldr	r3, [pc, #40]	; (80064dc <vPortFree+0xbc>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4413      	add	r3, r2
 80064b6:	4a09      	ldr	r2, [pc, #36]	; (80064dc <vPortFree+0xbc>)
 80064b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80064ba:	6938      	ldr	r0, [r7, #16]
 80064bc:	f000 f874 	bl	80065a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80064c0:	4b07      	ldr	r3, [pc, #28]	; (80064e0 <vPortFree+0xc0>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	3301      	adds	r3, #1
 80064c6:	4a06      	ldr	r2, [pc, #24]	; (80064e0 <vPortFree+0xc0>)
 80064c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80064ca:	f7fe fc81 	bl	8004dd0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80064ce:	bf00      	nop
 80064d0:	3718      	adds	r7, #24
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	20004a60 	.word	0x20004a60
 80064dc:	20004a50 	.word	0x20004a50
 80064e0:	20004a5c 	.word	0x20004a5c

080064e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80064ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80064ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80064f0:	4b27      	ldr	r3, [pc, #156]	; (8006590 <prvHeapInit+0xac>)
 80064f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f003 0307 	and.w	r3, r3, #7
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00c      	beq.n	8006518 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	3307      	adds	r3, #7
 8006502:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f023 0307 	bic.w	r3, r3, #7
 800650a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	4a1f      	ldr	r2, [pc, #124]	; (8006590 <prvHeapInit+0xac>)
 8006514:	4413      	add	r3, r2
 8006516:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800651c:	4a1d      	ldr	r2, [pc, #116]	; (8006594 <prvHeapInit+0xb0>)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006522:	4b1c      	ldr	r3, [pc, #112]	; (8006594 <prvHeapInit+0xb0>)
 8006524:	2200      	movs	r2, #0
 8006526:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68ba      	ldr	r2, [r7, #8]
 800652c:	4413      	add	r3, r2
 800652e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006530:	2208      	movs	r2, #8
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	1a9b      	subs	r3, r3, r2
 8006536:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f023 0307 	bic.w	r3, r3, #7
 800653e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	4a15      	ldr	r2, [pc, #84]	; (8006598 <prvHeapInit+0xb4>)
 8006544:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006546:	4b14      	ldr	r3, [pc, #80]	; (8006598 <prvHeapInit+0xb4>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2200      	movs	r2, #0
 800654c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800654e:	4b12      	ldr	r3, [pc, #72]	; (8006598 <prvHeapInit+0xb4>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2200      	movs	r2, #0
 8006554:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	1ad2      	subs	r2, r2, r3
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006564:	4b0c      	ldr	r3, [pc, #48]	; (8006598 <prvHeapInit+0xb4>)
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	4a0a      	ldr	r2, [pc, #40]	; (800659c <prvHeapInit+0xb8>)
 8006572:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	4a09      	ldr	r2, [pc, #36]	; (80065a0 <prvHeapInit+0xbc>)
 800657a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800657c:	4b09      	ldr	r3, [pc, #36]	; (80065a4 <prvHeapInit+0xc0>)
 800657e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006582:	601a      	str	r2, [r3, #0]
}
 8006584:	bf00      	nop
 8006586:	3714      	adds	r7, #20
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr
 8006590:	20000e44 	.word	0x20000e44
 8006594:	20004a44 	.word	0x20004a44
 8006598:	20004a4c 	.word	0x20004a4c
 800659c:	20004a54 	.word	0x20004a54
 80065a0:	20004a50 	.word	0x20004a50
 80065a4:	20004a60 	.word	0x20004a60

080065a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80065b0:	4b28      	ldr	r3, [pc, #160]	; (8006654 <prvInsertBlockIntoFreeList+0xac>)
 80065b2:	60fb      	str	r3, [r7, #12]
 80065b4:	e002      	b.n	80065bc <prvInsertBlockIntoFreeList+0x14>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	60fb      	str	r3, [r7, #12]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d8f7      	bhi.n	80065b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	4413      	add	r3, r2
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d108      	bne.n	80065ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	441a      	add	r2, r3
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	441a      	add	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d118      	bne.n	8006630 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	4b15      	ldr	r3, [pc, #84]	; (8006658 <prvInsertBlockIntoFreeList+0xb0>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	429a      	cmp	r2, r3
 8006608:	d00d      	beq.n	8006626 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	441a      	add	r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	601a      	str	r2, [r3, #0]
 8006624:	e008      	b.n	8006638 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006626:	4b0c      	ldr	r3, [pc, #48]	; (8006658 <prvInsertBlockIntoFreeList+0xb0>)
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	601a      	str	r2, [r3, #0]
 800662e:	e003      	b.n	8006638 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	429a      	cmp	r2, r3
 800663e:	d002      	beq.n	8006646 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006646:	bf00      	nop
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	20004a44 	.word	0x20004a44
 8006658:	20004a4c 	.word	0x20004a4c

0800665c <OS_Init>:

osThreadId_t			OS_UARTParserTaskHandle;


static void OS_Init (void)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b08a      	sub	sp, #40	; 0x28
 8006660:	af00      	add	r7, sp, #0

	HAL_UART_Receive_DMA(&huart2, rxBuffer, UART_DMA_BUFFER_SIZE);
 8006662:	2280      	movs	r2, #128	; 0x80
 8006664:	4915      	ldr	r1, [pc, #84]	; (80066bc <OS_Init+0x60>)
 8006666:	4816      	ldr	r0, [pc, #88]	; (80066c0 <OS_Init+0x64>)
 8006668:	f7fc f97d 	bl	8002966 <HAL_UART_Receive_DMA>

	osDelay(100);
 800666c:	2064      	movs	r0, #100	; 0x64
 800666e:	f7fd faa9 	bl	8003bc4 <osDelay>

	/* Создание задачи OS_UARTParserTask */
	const osThreadAttr_t OS_UARTParserTask_attributes = {
 8006672:	1d3b      	adds	r3, r7, #4
 8006674:	2224      	movs	r2, #36	; 0x24
 8006676:	2100      	movs	r1, #0
 8006678:	4618      	mov	r0, r3
 800667a:	f000 faca 	bl	8006c12 <memset>
 800667e:	4b11      	ldr	r3, [pc, #68]	; (80066c4 <OS_Init+0x68>)
 8006680:	607b      	str	r3, [r7, #4]
 8006682:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006686:	61bb      	str	r3, [r7, #24]
 8006688:	2318      	movs	r3, #24
 800668a:	61fb      	str	r3, [r7, #28]
	  .name = "OS_UARTParserTask",
	  .priority = (osPriority_t) osPriorityNormal,
	  .stack_size = 128 * 4
	};

	if( !(OS_UARTParserTaskHandle = osThreadNew(OS_UARTParserTask, NULL, &OS_UARTParserTask_attributes)) )
 800668c:	1d3b      	adds	r3, r7, #4
 800668e:	461a      	mov	r2, r3
 8006690:	2100      	movs	r1, #0
 8006692:	480d      	ldr	r0, [pc, #52]	; (80066c8 <OS_Init+0x6c>)
 8006694:	f7fd fa04 	bl	8003aa0 <osThreadNew>
 8006698:	4603      	mov	r3, r0
 800669a:	4a0c      	ldr	r2, [pc, #48]	; (80066cc <OS_Init+0x70>)
 800669c:	6013      	str	r3, [r2, #0]
 800669e:	4b0b      	ldr	r3, [pc, #44]	; (80066cc <OS_Init+0x70>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d103      	bne.n	80066ae <OS_Init+0x52>
	{
		printf("\nERROR: OS_UARTParserTask creation failed!\n");
 80066a6:	480a      	ldr	r0, [pc, #40]	; (80066d0 <OS_Init+0x74>)
 80066a8:	f000 fb84 	bl	8006db4 <puts>
	}
	else
	{
		printf("\nOS_UARTParserTask has been successfully initialized!\n");
	}
}
 80066ac:	e002      	b.n	80066b4 <OS_Init+0x58>
		printf("\nOS_UARTParserTask has been successfully initialized!\n");
 80066ae:	4809      	ldr	r0, [pc, #36]	; (80066d4 <OS_Init+0x78>)
 80066b0:	f000 fb80 	bl	8006db4 <puts>
}
 80066b4:	bf00      	nop
 80066b6:	3728      	adds	r7, #40	; 0x28
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	20004e20 	.word	0x20004e20
 80066c0:	20004b4c 	.word	0x20004b4c
 80066c4:	0800754c 	.word	0x0800754c
 80066c8:	080066f5 	.word	0x080066f5
 80066cc:	20004c1c 	.word	0x20004c1c
 80066d0:	08007560 	.word	0x08007560
 80066d4:	0800758c 	.word	0x0800758c

080066d8 <OS_MainTask>:


void OS_MainTask(void *argument)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]

	OS_Init();
 80066e0:	f7ff ffbc 	bl	800665c <OS_Init>

	osDelay(100);
 80066e4:	2064      	movs	r0, #100	; 0x64
 80066e6:	f7fd fa6d 	bl	8003bc4 <osDelay>

	while(1)
	{
		osDelay(1000);
 80066ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80066ee:	f7fd fa69 	bl	8003bc4 <osDelay>
 80066f2:	e7fa      	b.n	80066ea <OS_MainTask+0x12>

080066f4 <OS_UARTParserTask>:

uint8_t msg_list[PARSER_MESSAGE_LIST_SIZE][PARSER_MESSAGE_SIZE];		/* Массив для хранения принятых команд */


void OS_UARTParserTask(void *argument)
{
 80066f4:	b590      	push	{r4, r7, lr}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
    while(1)
    {
    	do
    	{
    	    dma_tail = UART_DMA_BUFFER_SIZE - huart2.hdmarx->Instance->NDTR;
 80066fc:	4b8c      	ldr	r3, [pc, #560]	; (8006930 <OS_UARTParserTask+0x23c>)
 80066fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8006708:	4a8a      	ldr	r2, [pc, #552]	; (8006934 <OS_UARTParserTask+0x240>)
 800670a:	6013      	str	r3, [r2, #0]

            if(dma_tail!=dma_head)
 800670c:	4b89      	ldr	r3, [pc, #548]	; (8006934 <OS_UARTParserTask+0x240>)
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	4b89      	ldr	r3, [pc, #548]	; (8006938 <OS_UARTParserTask+0x244>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	429a      	cmp	r2, r3
 8006716:	f000 812f 	beq.w	8006978 <OS_UARTParserTask+0x284>
            {
            	if(dma_head < dma_tail)
 800671a:	4b87      	ldr	r3, [pc, #540]	; (8006938 <OS_UARTParserTask+0x244>)
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	4b85      	ldr	r3, [pc, #532]	; (8006934 <OS_UARTParserTask+0x240>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	429a      	cmp	r2, r3
 8006724:	d267      	bcs.n	80067f6 <OS_UARTParserTask+0x102>
            	{
					for(register size_t i=dma_head; i<dma_tail; i++)
 8006726:	4b84      	ldr	r3, [pc, #528]	; (8006938 <OS_UARTParserTask+0x244>)
 8006728:	681c      	ldr	r4, [r3, #0]
 800672a:	e042      	b.n	80067b2 <OS_UARTParserTask+0xbe>
					{
								found = (found == 0 && rxBuffer[i] == '\r') ? 1
 800672c:	4b83      	ldr	r3, [pc, #524]	; (800693c <OS_UARTParserTask+0x248>)
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d103      	bne.n	800673c <OS_UARTParserTask+0x48>
 8006734:	4b82      	ldr	r3, [pc, #520]	; (8006940 <OS_UARTParserTask+0x24c>)
 8006736:	5d1b      	ldrb	r3, [r3, r4]
 8006738:	2b0d      	cmp	r3, #13
 800673a:	d00b      	beq.n	8006754 <OS_UARTParserTask+0x60>
								  : (found == 1 && rxBuffer[i] == '\n') ? 2
 800673c:	4b7f      	ldr	r3, [pc, #508]	; (800693c <OS_UARTParserTask+0x248>)
 800673e:	781b      	ldrb	r3, [r3, #0]
								found = (found == 0 && rxBuffer[i] == '\r') ? 1
 8006740:	2b01      	cmp	r3, #1
 8006742:	d105      	bne.n	8006750 <OS_UARTParserTask+0x5c>
								  : (found == 1 && rxBuffer[i] == '\n') ? 2
 8006744:	4b7e      	ldr	r3, [pc, #504]	; (8006940 <OS_UARTParserTask+0x24c>)
 8006746:	5d1b      	ldrb	r3, [r3, r4]
 8006748:	2b0a      	cmp	r3, #10
 800674a:	d101      	bne.n	8006750 <OS_UARTParserTask+0x5c>
								found = (found == 0 && rxBuffer[i] == '\r') ? 1
 800674c:	2302      	movs	r3, #2
 800674e:	e002      	b.n	8006756 <OS_UARTParserTask+0x62>
 8006750:	2300      	movs	r3, #0
 8006752:	e000      	b.n	8006756 <OS_UARTParserTask+0x62>
 8006754:	2301      	movs	r3, #1
 8006756:	4a79      	ldr	r2, [pc, #484]	; (800693c <OS_UARTParserTask+0x248>)
 8006758:	7013      	strb	r3, [r2, #0]
								  : 0;
						msg_list[cur_msg][cur_msg_sz++]= rxBuffer[i];
 800675a:	4b7a      	ldr	r3, [pc, #488]	; (8006944 <OS_UARTParserTask+0x250>)
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	4b7a      	ldr	r3, [pc, #488]	; (8006948 <OS_UARTParserTask+0x254>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	1c59      	adds	r1, r3, #1
 8006764:	4878      	ldr	r0, [pc, #480]	; (8006948 <OS_UARTParserTask+0x254>)
 8006766:	6001      	str	r1, [r0, #0]
 8006768:	4975      	ldr	r1, [pc, #468]	; (8006940 <OS_UARTParserTask+0x24c>)
 800676a:	5d08      	ldrb	r0, [r1, r4]
 800676c:	4977      	ldr	r1, [pc, #476]	; (800694c <OS_UARTParserTask+0x258>)
 800676e:	0152      	lsls	r2, r2, #5
 8006770:	440a      	add	r2, r1
 8006772:	4413      	add	r3, r2
 8006774:	4602      	mov	r2, r0
 8006776:	701a      	strb	r2, [r3, #0]

						if(found==2)
 8006778:	4b70      	ldr	r3, [pc, #448]	; (800693c <OS_UARTParserTask+0x248>)
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	2b02      	cmp	r3, #2
 800677e:	d117      	bne.n	80067b0 <OS_UARTParserTask+0xbc>
							{
								cur_msg = cur_msg == PARSER_MESSAGE_LIST_SIZE-1 ? 0 : cur_msg + 1;
 8006780:	4b70      	ldr	r3, [pc, #448]	; (8006944 <OS_UARTParserTask+0x250>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2b0f      	cmp	r3, #15
 8006786:	d003      	beq.n	8006790 <OS_UARTParserTask+0x9c>
 8006788:	4b6e      	ldr	r3, [pc, #440]	; (8006944 <OS_UARTParserTask+0x250>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	3301      	adds	r3, #1
 800678e:	e000      	b.n	8006792 <OS_UARTParserTask+0x9e>
 8006790:	2300      	movs	r3, #0
 8006792:	4a6c      	ldr	r2, [pc, #432]	; (8006944 <OS_UARTParserTask+0x250>)
 8006794:	6013      	str	r3, [r2, #0]
								memset(msg_list[cur_msg],0,PARSER_MESSAGE_SIZE);
 8006796:	4b6b      	ldr	r3, [pc, #428]	; (8006944 <OS_UARTParserTask+0x250>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	015b      	lsls	r3, r3, #5
 800679c:	4a6b      	ldr	r2, [pc, #428]	; (800694c <OS_UARTParserTask+0x258>)
 800679e:	4413      	add	r3, r2
 80067a0:	2220      	movs	r2, #32
 80067a2:	2100      	movs	r1, #0
 80067a4:	4618      	mov	r0, r3
 80067a6:	f000 fa34 	bl	8006c12 <memset>
								cur_msg_sz=0;
 80067aa:	4b67      	ldr	r3, [pc, #412]	; (8006948 <OS_UARTParserTask+0x254>)
 80067ac:	2200      	movs	r2, #0
 80067ae:	601a      	str	r2, [r3, #0]
					for(register size_t i=dma_head; i<dma_tail; i++)
 80067b0:	3401      	adds	r4, #1
 80067b2:	4b60      	ldr	r3, [pc, #384]	; (8006934 <OS_UARTParserTask+0x240>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	429c      	cmp	r4, r3
 80067b8:	d3b8      	bcc.n	800672c <OS_UARTParserTask+0x38>
//								HC05_RxCommandCallback();
							}
					}
					if(found != 2)
 80067ba:	4b60      	ldr	r3, [pc, #384]	; (800693c <OS_UARTParserTask+0x248>)
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	2b02      	cmp	r3, #2
 80067c0:	f000 80d6 	beq.w	8006970 <OS_UARTParserTask+0x27c>
					{
//						osQItem_t messageHC05;
//						messageHC05 = OS_MessageConstructor(0, OS_CMD_HC05_GET_COMMAND, OS_HC05_CMD_ERROR, 0);
//						xQueueSend (OS_HC05QueueHandle, &messageHC05, ( TickType_t ) portMAX_DELAY);
						cur_msg = cur_msg == PARSER_MESSAGE_LIST_SIZE-1 ? 0 : cur_msg + 1;
 80067c4:	4b5f      	ldr	r3, [pc, #380]	; (8006944 <OS_UARTParserTask+0x250>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2b0f      	cmp	r3, #15
 80067ca:	d003      	beq.n	80067d4 <OS_UARTParserTask+0xe0>
 80067cc:	4b5d      	ldr	r3, [pc, #372]	; (8006944 <OS_UARTParserTask+0x250>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	3301      	adds	r3, #1
 80067d2:	e000      	b.n	80067d6 <OS_UARTParserTask+0xe2>
 80067d4:	2300      	movs	r3, #0
 80067d6:	4a5b      	ldr	r2, [pc, #364]	; (8006944 <OS_UARTParserTask+0x250>)
 80067d8:	6013      	str	r3, [r2, #0]
						memset(msg_list[cur_msg],0,PARSER_MESSAGE_SIZE);
 80067da:	4b5a      	ldr	r3, [pc, #360]	; (8006944 <OS_UARTParserTask+0x250>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	015b      	lsls	r3, r3, #5
 80067e0:	4a5a      	ldr	r2, [pc, #360]	; (800694c <OS_UARTParserTask+0x258>)
 80067e2:	4413      	add	r3, r2
 80067e4:	2220      	movs	r2, #32
 80067e6:	2100      	movs	r1, #0
 80067e8:	4618      	mov	r0, r3
 80067ea:	f000 fa12 	bl	8006c12 <memset>
						cur_msg_sz=0;
 80067ee:	4b56      	ldr	r3, [pc, #344]	; (8006948 <OS_UARTParserTask+0x254>)
 80067f0:	2200      	movs	r2, #0
 80067f2:	601a      	str	r2, [r3, #0]
 80067f4:	e0bc      	b.n	8006970 <OS_UARTParserTask+0x27c>
					}

            	}
            	else
            	{
            	    for(register size_t i=dma_head; i<UART_DMA_BUFFER_SIZE; i++)
 80067f6:	4b50      	ldr	r3, [pc, #320]	; (8006938 <OS_UARTParserTask+0x244>)
 80067f8:	681c      	ldr	r4, [r3, #0]
 80067fa:	e042      	b.n	8006882 <OS_UARTParserTask+0x18e>
            	    {
							found = (found == 0 && rxBuffer[i] == '\r') ? 1
 80067fc:	4b4f      	ldr	r3, [pc, #316]	; (800693c <OS_UARTParserTask+0x248>)
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d103      	bne.n	800680c <OS_UARTParserTask+0x118>
 8006804:	4b4e      	ldr	r3, [pc, #312]	; (8006940 <OS_UARTParserTask+0x24c>)
 8006806:	5d1b      	ldrb	r3, [r3, r4]
 8006808:	2b0d      	cmp	r3, #13
 800680a:	d00b      	beq.n	8006824 <OS_UARTParserTask+0x130>
							  : (found == 1 && rxBuffer[i] == '\n') ? 2
 800680c:	4b4b      	ldr	r3, [pc, #300]	; (800693c <OS_UARTParserTask+0x248>)
 800680e:	781b      	ldrb	r3, [r3, #0]
							found = (found == 0 && rxBuffer[i] == '\r') ? 1
 8006810:	2b01      	cmp	r3, #1
 8006812:	d105      	bne.n	8006820 <OS_UARTParserTask+0x12c>
							  : (found == 1 && rxBuffer[i] == '\n') ? 2
 8006814:	4b4a      	ldr	r3, [pc, #296]	; (8006940 <OS_UARTParserTask+0x24c>)
 8006816:	5d1b      	ldrb	r3, [r3, r4]
 8006818:	2b0a      	cmp	r3, #10
 800681a:	d101      	bne.n	8006820 <OS_UARTParserTask+0x12c>
							found = (found == 0 && rxBuffer[i] == '\r') ? 1
 800681c:	2302      	movs	r3, #2
 800681e:	e002      	b.n	8006826 <OS_UARTParserTask+0x132>
 8006820:	2300      	movs	r3, #0
 8006822:	e000      	b.n	8006826 <OS_UARTParserTask+0x132>
 8006824:	2301      	movs	r3, #1
 8006826:	4a45      	ldr	r2, [pc, #276]	; (800693c <OS_UARTParserTask+0x248>)
 8006828:	7013      	strb	r3, [r2, #0]
							  : 0;
						msg_list[cur_msg][cur_msg_sz++]= rxBuffer[i];
 800682a:	4b46      	ldr	r3, [pc, #280]	; (8006944 <OS_UARTParserTask+0x250>)
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	4b46      	ldr	r3, [pc, #280]	; (8006948 <OS_UARTParserTask+0x254>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	1c59      	adds	r1, r3, #1
 8006834:	4844      	ldr	r0, [pc, #272]	; (8006948 <OS_UARTParserTask+0x254>)
 8006836:	6001      	str	r1, [r0, #0]
 8006838:	4941      	ldr	r1, [pc, #260]	; (8006940 <OS_UARTParserTask+0x24c>)
 800683a:	5d08      	ldrb	r0, [r1, r4]
 800683c:	4943      	ldr	r1, [pc, #268]	; (800694c <OS_UARTParserTask+0x258>)
 800683e:	0152      	lsls	r2, r2, #5
 8006840:	440a      	add	r2, r1
 8006842:	4413      	add	r3, r2
 8006844:	4602      	mov	r2, r0
 8006846:	701a      	strb	r2, [r3, #0]

						if(found==2)
 8006848:	4b3c      	ldr	r3, [pc, #240]	; (800693c <OS_UARTParserTask+0x248>)
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	2b02      	cmp	r3, #2
 800684e:	d117      	bne.n	8006880 <OS_UARTParserTask+0x18c>
						{
							cur_msg = cur_msg == PARSER_MESSAGE_LIST_SIZE-1 ? 0 : cur_msg + 1;
 8006850:	4b3c      	ldr	r3, [pc, #240]	; (8006944 <OS_UARTParserTask+0x250>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2b0f      	cmp	r3, #15
 8006856:	d003      	beq.n	8006860 <OS_UARTParserTask+0x16c>
 8006858:	4b3a      	ldr	r3, [pc, #232]	; (8006944 <OS_UARTParserTask+0x250>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	3301      	adds	r3, #1
 800685e:	e000      	b.n	8006862 <OS_UARTParserTask+0x16e>
 8006860:	2300      	movs	r3, #0
 8006862:	4a38      	ldr	r2, [pc, #224]	; (8006944 <OS_UARTParserTask+0x250>)
 8006864:	6013      	str	r3, [r2, #0]
							memset(msg_list[cur_msg],0,PARSER_MESSAGE_SIZE);
 8006866:	4b37      	ldr	r3, [pc, #220]	; (8006944 <OS_UARTParserTask+0x250>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	015b      	lsls	r3, r3, #5
 800686c:	4a37      	ldr	r2, [pc, #220]	; (800694c <OS_UARTParserTask+0x258>)
 800686e:	4413      	add	r3, r2
 8006870:	2220      	movs	r2, #32
 8006872:	2100      	movs	r1, #0
 8006874:	4618      	mov	r0, r3
 8006876:	f000 f9cc 	bl	8006c12 <memset>
									cur_msg_sz=0;
 800687a:	4b33      	ldr	r3, [pc, #204]	; (8006948 <OS_UARTParserTask+0x254>)
 800687c:	2200      	movs	r2, #0
 800687e:	601a      	str	r2, [r3, #0]
            	    for(register size_t i=dma_head; i<UART_DMA_BUFFER_SIZE; i++)
 8006880:	3401      	adds	r4, #1
 8006882:	2c7f      	cmp	r4, #127	; 0x7f
 8006884:	d9ba      	bls.n	80067fc <OS_UARTParserTask+0x108>
						}

            	    }

            	    for(register size_t i=0; i<dma_tail; i++)
 8006886:	2400      	movs	r4, #0
 8006888:	e042      	b.n	8006910 <OS_UARTParserTask+0x21c>
            	    {
							found = (found == 0 && rxBuffer[i] == '\r') ? 1
 800688a:	4b2c      	ldr	r3, [pc, #176]	; (800693c <OS_UARTParserTask+0x248>)
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d103      	bne.n	800689a <OS_UARTParserTask+0x1a6>
 8006892:	4b2b      	ldr	r3, [pc, #172]	; (8006940 <OS_UARTParserTask+0x24c>)
 8006894:	5d1b      	ldrb	r3, [r3, r4]
 8006896:	2b0d      	cmp	r3, #13
 8006898:	d00b      	beq.n	80068b2 <OS_UARTParserTask+0x1be>
							  : (found == 1 && rxBuffer[i] == '\n') ? 2
 800689a:	4b28      	ldr	r3, [pc, #160]	; (800693c <OS_UARTParserTask+0x248>)
 800689c:	781b      	ldrb	r3, [r3, #0]
							found = (found == 0 && rxBuffer[i] == '\r') ? 1
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d105      	bne.n	80068ae <OS_UARTParserTask+0x1ba>
							  : (found == 1 && rxBuffer[i] == '\n') ? 2
 80068a2:	4b27      	ldr	r3, [pc, #156]	; (8006940 <OS_UARTParserTask+0x24c>)
 80068a4:	5d1b      	ldrb	r3, [r3, r4]
 80068a6:	2b0a      	cmp	r3, #10
 80068a8:	d101      	bne.n	80068ae <OS_UARTParserTask+0x1ba>
							found = (found == 0 && rxBuffer[i] == '\r') ? 1
 80068aa:	2302      	movs	r3, #2
 80068ac:	e002      	b.n	80068b4 <OS_UARTParserTask+0x1c0>
 80068ae:	2300      	movs	r3, #0
 80068b0:	e000      	b.n	80068b4 <OS_UARTParserTask+0x1c0>
 80068b2:	2301      	movs	r3, #1
 80068b4:	4a21      	ldr	r2, [pc, #132]	; (800693c <OS_UARTParserTask+0x248>)
 80068b6:	7013      	strb	r3, [r2, #0]
							  : 0;

						msg_list[cur_msg][cur_msg_sz++]= rxBuffer[i];
 80068b8:	4b22      	ldr	r3, [pc, #136]	; (8006944 <OS_UARTParserTask+0x250>)
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	4b22      	ldr	r3, [pc, #136]	; (8006948 <OS_UARTParserTask+0x254>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	1c59      	adds	r1, r3, #1
 80068c2:	4821      	ldr	r0, [pc, #132]	; (8006948 <OS_UARTParserTask+0x254>)
 80068c4:	6001      	str	r1, [r0, #0]
 80068c6:	491e      	ldr	r1, [pc, #120]	; (8006940 <OS_UARTParserTask+0x24c>)
 80068c8:	5d08      	ldrb	r0, [r1, r4]
 80068ca:	4920      	ldr	r1, [pc, #128]	; (800694c <OS_UARTParserTask+0x258>)
 80068cc:	0152      	lsls	r2, r2, #5
 80068ce:	440a      	add	r2, r1
 80068d0:	4413      	add	r3, r2
 80068d2:	4602      	mov	r2, r0
 80068d4:	701a      	strb	r2, [r3, #0]

						if(found==2)
 80068d6:	4b19      	ldr	r3, [pc, #100]	; (800693c <OS_UARTParserTask+0x248>)
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d117      	bne.n	800690e <OS_UARTParserTask+0x21a>
						{
							cur_msg = cur_msg == PARSER_MESSAGE_LIST_SIZE-1 ? 0 : cur_msg + 1;
 80068de:	4b19      	ldr	r3, [pc, #100]	; (8006944 <OS_UARTParserTask+0x250>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2b0f      	cmp	r3, #15
 80068e4:	d003      	beq.n	80068ee <OS_UARTParserTask+0x1fa>
 80068e6:	4b17      	ldr	r3, [pc, #92]	; (8006944 <OS_UARTParserTask+0x250>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	3301      	adds	r3, #1
 80068ec:	e000      	b.n	80068f0 <OS_UARTParserTask+0x1fc>
 80068ee:	2300      	movs	r3, #0
 80068f0:	4a14      	ldr	r2, [pc, #80]	; (8006944 <OS_UARTParserTask+0x250>)
 80068f2:	6013      	str	r3, [r2, #0]
							memset(msg_list[cur_msg],0,PARSER_MESSAGE_SIZE);
 80068f4:	4b13      	ldr	r3, [pc, #76]	; (8006944 <OS_UARTParserTask+0x250>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	015b      	lsls	r3, r3, #5
 80068fa:	4a14      	ldr	r2, [pc, #80]	; (800694c <OS_UARTParserTask+0x258>)
 80068fc:	4413      	add	r3, r2
 80068fe:	2220      	movs	r2, #32
 8006900:	2100      	movs	r1, #0
 8006902:	4618      	mov	r0, r3
 8006904:	f000 f985 	bl	8006c12 <memset>
									cur_msg_sz=0;
 8006908:	4b0f      	ldr	r3, [pc, #60]	; (8006948 <OS_UARTParserTask+0x254>)
 800690a:	2200      	movs	r2, #0
 800690c:	601a      	str	r2, [r3, #0]
            	    for(register size_t i=0; i<dma_tail; i++)
 800690e:	3401      	adds	r4, #1
 8006910:	4b08      	ldr	r3, [pc, #32]	; (8006934 <OS_UARTParserTask+0x240>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	429c      	cmp	r4, r3
 8006916:	d3b8      	bcc.n	800688a <OS_UARTParserTask+0x196>
//									HC05_RxCommandCallback();
						}
            	    }
					if(found != 2)
 8006918:	4b08      	ldr	r3, [pc, #32]	; (800693c <OS_UARTParserTask+0x248>)
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	2b02      	cmp	r3, #2
 800691e:	d027      	beq.n	8006970 <OS_UARTParserTask+0x27c>
					{
//						osQItem_t messageHC05;
//						messageHC05 = OS_MessageConstructor(0, OS_CMD_HC05_GET_COMMAND, OS_HC05_CMD_ERROR, 0);
//						xQueueSend (OS_HC05QueueHandle, &messageHC05, ( TickType_t ) portMAX_DELAY);
						cur_msg = cur_msg == PARSER_MESSAGE_LIST_SIZE-1 ? 0 : cur_msg + 1;
 8006920:	4b08      	ldr	r3, [pc, #32]	; (8006944 <OS_UARTParserTask+0x250>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2b0f      	cmp	r3, #15
 8006926:	d013      	beq.n	8006950 <OS_UARTParserTask+0x25c>
 8006928:	4b06      	ldr	r3, [pc, #24]	; (8006944 <OS_UARTParserTask+0x250>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3301      	adds	r3, #1
 800692e:	e010      	b.n	8006952 <OS_UARTParserTask+0x25e>
 8006930:	20004b4c 	.word	0x20004b4c
 8006934:	20004a68 	.word	0x20004a68
 8006938:	20004a64 	.word	0x20004a64
 800693c:	20004a74 	.word	0x20004a74
 8006940:	20004e20 	.word	0x20004e20
 8006944:	20004a70 	.word	0x20004a70
 8006948:	20004a6c 	.word	0x20004a6c
 800694c:	20004c20 	.word	0x20004c20
 8006950:	2300      	movs	r3, #0
 8006952:	4a11      	ldr	r2, [pc, #68]	; (8006998 <OS_UARTParserTask+0x2a4>)
 8006954:	6013      	str	r3, [r2, #0]
						memset(msg_list[cur_msg],0,PARSER_MESSAGE_SIZE);
 8006956:	4b10      	ldr	r3, [pc, #64]	; (8006998 <OS_UARTParserTask+0x2a4>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	015b      	lsls	r3, r3, #5
 800695c:	4a0f      	ldr	r2, [pc, #60]	; (800699c <OS_UARTParserTask+0x2a8>)
 800695e:	4413      	add	r3, r2
 8006960:	2220      	movs	r2, #32
 8006962:	2100      	movs	r1, #0
 8006964:	4618      	mov	r0, r3
 8006966:	f000 f954 	bl	8006c12 <memset>
						cur_msg_sz=0;
 800696a:	4b0d      	ldr	r3, [pc, #52]	; (80069a0 <OS_UARTParserTask+0x2ac>)
 800696c:	2200      	movs	r2, #0
 800696e:	601a      	str	r2, [r3, #0]
					}
            	}
            	dma_head=dma_tail;
 8006970:	4b0c      	ldr	r3, [pc, #48]	; (80069a4 <OS_UARTParserTask+0x2b0>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a0c      	ldr	r2, [pc, #48]	; (80069a8 <OS_UARTParserTask+0x2b4>)
 8006976:	6013      	str	r3, [r2, #0]
            }
        }while(dma_head!=(UART_DMA_BUFFER_SIZE- huart2.hdmarx->Instance->NDTR));
 8006978:	4b0c      	ldr	r3, [pc, #48]	; (80069ac <OS_UARTParserTask+0x2b8>)
 800697a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	f1c3 0280 	rsb	r2, r3, #128	; 0x80
 8006984:	4b08      	ldr	r3, [pc, #32]	; (80069a8 <OS_UARTParserTask+0x2b4>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	429a      	cmp	r2, r3
 800698a:	f47f aeb7 	bne.w	80066fc <OS_UARTParserTask+0x8>

        osDelay(100); // this should be the minimum time difference between each frame
 800698e:	2064      	movs	r0, #100	; 0x64
 8006990:	f7fd f918 	bl	8003bc4 <osDelay>
    {
 8006994:	e6b2      	b.n	80066fc <OS_UARTParserTask+0x8>
 8006996:	bf00      	nop
 8006998:	20004a70 	.word	0x20004a70
 800699c:	20004c20 	.word	0x20004c20
 80069a0:	20004a6c 	.word	0x20004a6c
 80069a4:	20004a68 	.word	0x20004a68
 80069a8:	20004a64 	.word	0x20004a64
 80069ac:	20004b4c 	.word	0x20004b4c

080069b0 <__errno>:
 80069b0:	4b01      	ldr	r3, [pc, #4]	; (80069b8 <__errno+0x8>)
 80069b2:	6818      	ldr	r0, [r3, #0]
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	20000010 	.word	0x20000010

080069bc <std>:
 80069bc:	2300      	movs	r3, #0
 80069be:	b510      	push	{r4, lr}
 80069c0:	4604      	mov	r4, r0
 80069c2:	e9c0 3300 	strd	r3, r3, [r0]
 80069c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069ca:	6083      	str	r3, [r0, #8]
 80069cc:	8181      	strh	r1, [r0, #12]
 80069ce:	6643      	str	r3, [r0, #100]	; 0x64
 80069d0:	81c2      	strh	r2, [r0, #14]
 80069d2:	6183      	str	r3, [r0, #24]
 80069d4:	4619      	mov	r1, r3
 80069d6:	2208      	movs	r2, #8
 80069d8:	305c      	adds	r0, #92	; 0x5c
 80069da:	f000 f91a 	bl	8006c12 <memset>
 80069de:	4b05      	ldr	r3, [pc, #20]	; (80069f4 <std+0x38>)
 80069e0:	6263      	str	r3, [r4, #36]	; 0x24
 80069e2:	4b05      	ldr	r3, [pc, #20]	; (80069f8 <std+0x3c>)
 80069e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80069e6:	4b05      	ldr	r3, [pc, #20]	; (80069fc <std+0x40>)
 80069e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80069ea:	4b05      	ldr	r3, [pc, #20]	; (8006a00 <std+0x44>)
 80069ec:	6224      	str	r4, [r4, #32]
 80069ee:	6323      	str	r3, [r4, #48]	; 0x30
 80069f0:	bd10      	pop	{r4, pc}
 80069f2:	bf00      	nop
 80069f4:	08006eb9 	.word	0x08006eb9
 80069f8:	08006edb 	.word	0x08006edb
 80069fc:	08006f13 	.word	0x08006f13
 8006a00:	08006f37 	.word	0x08006f37

08006a04 <_cleanup_r>:
 8006a04:	4901      	ldr	r1, [pc, #4]	; (8006a0c <_cleanup_r+0x8>)
 8006a06:	f000 b8af 	b.w	8006b68 <_fwalk_reent>
 8006a0a:	bf00      	nop
 8006a0c:	08007211 	.word	0x08007211

08006a10 <__sfmoreglue>:
 8006a10:	b570      	push	{r4, r5, r6, lr}
 8006a12:	1e4a      	subs	r2, r1, #1
 8006a14:	2568      	movs	r5, #104	; 0x68
 8006a16:	4355      	muls	r5, r2
 8006a18:	460e      	mov	r6, r1
 8006a1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006a1e:	f000 f901 	bl	8006c24 <_malloc_r>
 8006a22:	4604      	mov	r4, r0
 8006a24:	b140      	cbz	r0, 8006a38 <__sfmoreglue+0x28>
 8006a26:	2100      	movs	r1, #0
 8006a28:	e9c0 1600 	strd	r1, r6, [r0]
 8006a2c:	300c      	adds	r0, #12
 8006a2e:	60a0      	str	r0, [r4, #8]
 8006a30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006a34:	f000 f8ed 	bl	8006c12 <memset>
 8006a38:	4620      	mov	r0, r4
 8006a3a:	bd70      	pop	{r4, r5, r6, pc}

08006a3c <__sfp_lock_acquire>:
 8006a3c:	4801      	ldr	r0, [pc, #4]	; (8006a44 <__sfp_lock_acquire+0x8>)
 8006a3e:	f000 b8d8 	b.w	8006bf2 <__retarget_lock_acquire_recursive>
 8006a42:	bf00      	nop
 8006a44:	20004ea8 	.word	0x20004ea8

08006a48 <__sfp_lock_release>:
 8006a48:	4801      	ldr	r0, [pc, #4]	; (8006a50 <__sfp_lock_release+0x8>)
 8006a4a:	f000 b8d3 	b.w	8006bf4 <__retarget_lock_release_recursive>
 8006a4e:	bf00      	nop
 8006a50:	20004ea8 	.word	0x20004ea8

08006a54 <__sinit_lock_acquire>:
 8006a54:	4801      	ldr	r0, [pc, #4]	; (8006a5c <__sinit_lock_acquire+0x8>)
 8006a56:	f000 b8cc 	b.w	8006bf2 <__retarget_lock_acquire_recursive>
 8006a5a:	bf00      	nop
 8006a5c:	20004ea3 	.word	0x20004ea3

08006a60 <__sinit_lock_release>:
 8006a60:	4801      	ldr	r0, [pc, #4]	; (8006a68 <__sinit_lock_release+0x8>)
 8006a62:	f000 b8c7 	b.w	8006bf4 <__retarget_lock_release_recursive>
 8006a66:	bf00      	nop
 8006a68:	20004ea3 	.word	0x20004ea3

08006a6c <__sinit>:
 8006a6c:	b510      	push	{r4, lr}
 8006a6e:	4604      	mov	r4, r0
 8006a70:	f7ff fff0 	bl	8006a54 <__sinit_lock_acquire>
 8006a74:	69a3      	ldr	r3, [r4, #24]
 8006a76:	b11b      	cbz	r3, 8006a80 <__sinit+0x14>
 8006a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a7c:	f7ff bff0 	b.w	8006a60 <__sinit_lock_release>
 8006a80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006a84:	6523      	str	r3, [r4, #80]	; 0x50
 8006a86:	4b13      	ldr	r3, [pc, #76]	; (8006ad4 <__sinit+0x68>)
 8006a88:	4a13      	ldr	r2, [pc, #76]	; (8006ad8 <__sinit+0x6c>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006a8e:	42a3      	cmp	r3, r4
 8006a90:	bf04      	itt	eq
 8006a92:	2301      	moveq	r3, #1
 8006a94:	61a3      	streq	r3, [r4, #24]
 8006a96:	4620      	mov	r0, r4
 8006a98:	f000 f820 	bl	8006adc <__sfp>
 8006a9c:	6060      	str	r0, [r4, #4]
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	f000 f81c 	bl	8006adc <__sfp>
 8006aa4:	60a0      	str	r0, [r4, #8]
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	f000 f818 	bl	8006adc <__sfp>
 8006aac:	2200      	movs	r2, #0
 8006aae:	60e0      	str	r0, [r4, #12]
 8006ab0:	2104      	movs	r1, #4
 8006ab2:	6860      	ldr	r0, [r4, #4]
 8006ab4:	f7ff ff82 	bl	80069bc <std>
 8006ab8:	68a0      	ldr	r0, [r4, #8]
 8006aba:	2201      	movs	r2, #1
 8006abc:	2109      	movs	r1, #9
 8006abe:	f7ff ff7d 	bl	80069bc <std>
 8006ac2:	68e0      	ldr	r0, [r4, #12]
 8006ac4:	2202      	movs	r2, #2
 8006ac6:	2112      	movs	r1, #18
 8006ac8:	f7ff ff78 	bl	80069bc <std>
 8006acc:	2301      	movs	r3, #1
 8006ace:	61a3      	str	r3, [r4, #24]
 8006ad0:	e7d2      	b.n	8006a78 <__sinit+0xc>
 8006ad2:	bf00      	nop
 8006ad4:	080076a4 	.word	0x080076a4
 8006ad8:	08006a05 	.word	0x08006a05

08006adc <__sfp>:
 8006adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ade:	4607      	mov	r7, r0
 8006ae0:	f7ff ffac 	bl	8006a3c <__sfp_lock_acquire>
 8006ae4:	4b1e      	ldr	r3, [pc, #120]	; (8006b60 <__sfp+0x84>)
 8006ae6:	681e      	ldr	r6, [r3, #0]
 8006ae8:	69b3      	ldr	r3, [r6, #24]
 8006aea:	b913      	cbnz	r3, 8006af2 <__sfp+0x16>
 8006aec:	4630      	mov	r0, r6
 8006aee:	f7ff ffbd 	bl	8006a6c <__sinit>
 8006af2:	3648      	adds	r6, #72	; 0x48
 8006af4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006af8:	3b01      	subs	r3, #1
 8006afa:	d503      	bpl.n	8006b04 <__sfp+0x28>
 8006afc:	6833      	ldr	r3, [r6, #0]
 8006afe:	b30b      	cbz	r3, 8006b44 <__sfp+0x68>
 8006b00:	6836      	ldr	r6, [r6, #0]
 8006b02:	e7f7      	b.n	8006af4 <__sfp+0x18>
 8006b04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006b08:	b9d5      	cbnz	r5, 8006b40 <__sfp+0x64>
 8006b0a:	4b16      	ldr	r3, [pc, #88]	; (8006b64 <__sfp+0x88>)
 8006b0c:	60e3      	str	r3, [r4, #12]
 8006b0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006b12:	6665      	str	r5, [r4, #100]	; 0x64
 8006b14:	f000 f86c 	bl	8006bf0 <__retarget_lock_init_recursive>
 8006b18:	f7ff ff96 	bl	8006a48 <__sfp_lock_release>
 8006b1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006b20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006b24:	6025      	str	r5, [r4, #0]
 8006b26:	61a5      	str	r5, [r4, #24]
 8006b28:	2208      	movs	r2, #8
 8006b2a:	4629      	mov	r1, r5
 8006b2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006b30:	f000 f86f 	bl	8006c12 <memset>
 8006b34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006b38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b40:	3468      	adds	r4, #104	; 0x68
 8006b42:	e7d9      	b.n	8006af8 <__sfp+0x1c>
 8006b44:	2104      	movs	r1, #4
 8006b46:	4638      	mov	r0, r7
 8006b48:	f7ff ff62 	bl	8006a10 <__sfmoreglue>
 8006b4c:	4604      	mov	r4, r0
 8006b4e:	6030      	str	r0, [r6, #0]
 8006b50:	2800      	cmp	r0, #0
 8006b52:	d1d5      	bne.n	8006b00 <__sfp+0x24>
 8006b54:	f7ff ff78 	bl	8006a48 <__sfp_lock_release>
 8006b58:	230c      	movs	r3, #12
 8006b5a:	603b      	str	r3, [r7, #0]
 8006b5c:	e7ee      	b.n	8006b3c <__sfp+0x60>
 8006b5e:	bf00      	nop
 8006b60:	080076a4 	.word	0x080076a4
 8006b64:	ffff0001 	.word	0xffff0001

08006b68 <_fwalk_reent>:
 8006b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b6c:	4606      	mov	r6, r0
 8006b6e:	4688      	mov	r8, r1
 8006b70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006b74:	2700      	movs	r7, #0
 8006b76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b7a:	f1b9 0901 	subs.w	r9, r9, #1
 8006b7e:	d505      	bpl.n	8006b8c <_fwalk_reent+0x24>
 8006b80:	6824      	ldr	r4, [r4, #0]
 8006b82:	2c00      	cmp	r4, #0
 8006b84:	d1f7      	bne.n	8006b76 <_fwalk_reent+0xe>
 8006b86:	4638      	mov	r0, r7
 8006b88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b8c:	89ab      	ldrh	r3, [r5, #12]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d907      	bls.n	8006ba2 <_fwalk_reent+0x3a>
 8006b92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b96:	3301      	adds	r3, #1
 8006b98:	d003      	beq.n	8006ba2 <_fwalk_reent+0x3a>
 8006b9a:	4629      	mov	r1, r5
 8006b9c:	4630      	mov	r0, r6
 8006b9e:	47c0      	blx	r8
 8006ba0:	4307      	orrs	r7, r0
 8006ba2:	3568      	adds	r5, #104	; 0x68
 8006ba4:	e7e9      	b.n	8006b7a <_fwalk_reent+0x12>
	...

08006ba8 <__libc_init_array>:
 8006ba8:	b570      	push	{r4, r5, r6, lr}
 8006baa:	4d0d      	ldr	r5, [pc, #52]	; (8006be0 <__libc_init_array+0x38>)
 8006bac:	4c0d      	ldr	r4, [pc, #52]	; (8006be4 <__libc_init_array+0x3c>)
 8006bae:	1b64      	subs	r4, r4, r5
 8006bb0:	10a4      	asrs	r4, r4, #2
 8006bb2:	2600      	movs	r6, #0
 8006bb4:	42a6      	cmp	r6, r4
 8006bb6:	d109      	bne.n	8006bcc <__libc_init_array+0x24>
 8006bb8:	4d0b      	ldr	r5, [pc, #44]	; (8006be8 <__libc_init_array+0x40>)
 8006bba:	4c0c      	ldr	r4, [pc, #48]	; (8006bec <__libc_init_array+0x44>)
 8006bbc:	f000 fc6a 	bl	8007494 <_init>
 8006bc0:	1b64      	subs	r4, r4, r5
 8006bc2:	10a4      	asrs	r4, r4, #2
 8006bc4:	2600      	movs	r6, #0
 8006bc6:	42a6      	cmp	r6, r4
 8006bc8:	d105      	bne.n	8006bd6 <__libc_init_array+0x2e>
 8006bca:	bd70      	pop	{r4, r5, r6, pc}
 8006bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bd0:	4798      	blx	r3
 8006bd2:	3601      	adds	r6, #1
 8006bd4:	e7ee      	b.n	8006bb4 <__libc_init_array+0xc>
 8006bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bda:	4798      	blx	r3
 8006bdc:	3601      	adds	r6, #1
 8006bde:	e7f2      	b.n	8006bc6 <__libc_init_array+0x1e>
 8006be0:	080076b0 	.word	0x080076b0
 8006be4:	080076b0 	.word	0x080076b0
 8006be8:	080076b0 	.word	0x080076b0
 8006bec:	080076b4 	.word	0x080076b4

08006bf0 <__retarget_lock_init_recursive>:
 8006bf0:	4770      	bx	lr

08006bf2 <__retarget_lock_acquire_recursive>:
 8006bf2:	4770      	bx	lr

08006bf4 <__retarget_lock_release_recursive>:
 8006bf4:	4770      	bx	lr

08006bf6 <memcpy>:
 8006bf6:	440a      	add	r2, r1
 8006bf8:	4291      	cmp	r1, r2
 8006bfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bfe:	d100      	bne.n	8006c02 <memcpy+0xc>
 8006c00:	4770      	bx	lr
 8006c02:	b510      	push	{r4, lr}
 8006c04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c0c:	4291      	cmp	r1, r2
 8006c0e:	d1f9      	bne.n	8006c04 <memcpy+0xe>
 8006c10:	bd10      	pop	{r4, pc}

08006c12 <memset>:
 8006c12:	4402      	add	r2, r0
 8006c14:	4603      	mov	r3, r0
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d100      	bne.n	8006c1c <memset+0xa>
 8006c1a:	4770      	bx	lr
 8006c1c:	f803 1b01 	strb.w	r1, [r3], #1
 8006c20:	e7f9      	b.n	8006c16 <memset+0x4>
	...

08006c24 <_malloc_r>:
 8006c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c26:	1ccd      	adds	r5, r1, #3
 8006c28:	f025 0503 	bic.w	r5, r5, #3
 8006c2c:	3508      	adds	r5, #8
 8006c2e:	2d0c      	cmp	r5, #12
 8006c30:	bf38      	it	cc
 8006c32:	250c      	movcc	r5, #12
 8006c34:	2d00      	cmp	r5, #0
 8006c36:	4606      	mov	r6, r0
 8006c38:	db01      	blt.n	8006c3e <_malloc_r+0x1a>
 8006c3a:	42a9      	cmp	r1, r5
 8006c3c:	d903      	bls.n	8006c46 <_malloc_r+0x22>
 8006c3e:	230c      	movs	r3, #12
 8006c40:	6033      	str	r3, [r6, #0]
 8006c42:	2000      	movs	r0, #0
 8006c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c46:	f000 fb95 	bl	8007374 <__malloc_lock>
 8006c4a:	4921      	ldr	r1, [pc, #132]	; (8006cd0 <_malloc_r+0xac>)
 8006c4c:	680a      	ldr	r2, [r1, #0]
 8006c4e:	4614      	mov	r4, r2
 8006c50:	b99c      	cbnz	r4, 8006c7a <_malloc_r+0x56>
 8006c52:	4f20      	ldr	r7, [pc, #128]	; (8006cd4 <_malloc_r+0xb0>)
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	b923      	cbnz	r3, 8006c62 <_malloc_r+0x3e>
 8006c58:	4621      	mov	r1, r4
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	f000 f91c 	bl	8006e98 <_sbrk_r>
 8006c60:	6038      	str	r0, [r7, #0]
 8006c62:	4629      	mov	r1, r5
 8006c64:	4630      	mov	r0, r6
 8006c66:	f000 f917 	bl	8006e98 <_sbrk_r>
 8006c6a:	1c43      	adds	r3, r0, #1
 8006c6c:	d123      	bne.n	8006cb6 <_malloc_r+0x92>
 8006c6e:	230c      	movs	r3, #12
 8006c70:	6033      	str	r3, [r6, #0]
 8006c72:	4630      	mov	r0, r6
 8006c74:	f000 fb84 	bl	8007380 <__malloc_unlock>
 8006c78:	e7e3      	b.n	8006c42 <_malloc_r+0x1e>
 8006c7a:	6823      	ldr	r3, [r4, #0]
 8006c7c:	1b5b      	subs	r3, r3, r5
 8006c7e:	d417      	bmi.n	8006cb0 <_malloc_r+0x8c>
 8006c80:	2b0b      	cmp	r3, #11
 8006c82:	d903      	bls.n	8006c8c <_malloc_r+0x68>
 8006c84:	6023      	str	r3, [r4, #0]
 8006c86:	441c      	add	r4, r3
 8006c88:	6025      	str	r5, [r4, #0]
 8006c8a:	e004      	b.n	8006c96 <_malloc_r+0x72>
 8006c8c:	6863      	ldr	r3, [r4, #4]
 8006c8e:	42a2      	cmp	r2, r4
 8006c90:	bf0c      	ite	eq
 8006c92:	600b      	streq	r3, [r1, #0]
 8006c94:	6053      	strne	r3, [r2, #4]
 8006c96:	4630      	mov	r0, r6
 8006c98:	f000 fb72 	bl	8007380 <__malloc_unlock>
 8006c9c:	f104 000b 	add.w	r0, r4, #11
 8006ca0:	1d23      	adds	r3, r4, #4
 8006ca2:	f020 0007 	bic.w	r0, r0, #7
 8006ca6:	1ac2      	subs	r2, r0, r3
 8006ca8:	d0cc      	beq.n	8006c44 <_malloc_r+0x20>
 8006caa:	1a1b      	subs	r3, r3, r0
 8006cac:	50a3      	str	r3, [r4, r2]
 8006cae:	e7c9      	b.n	8006c44 <_malloc_r+0x20>
 8006cb0:	4622      	mov	r2, r4
 8006cb2:	6864      	ldr	r4, [r4, #4]
 8006cb4:	e7cc      	b.n	8006c50 <_malloc_r+0x2c>
 8006cb6:	1cc4      	adds	r4, r0, #3
 8006cb8:	f024 0403 	bic.w	r4, r4, #3
 8006cbc:	42a0      	cmp	r0, r4
 8006cbe:	d0e3      	beq.n	8006c88 <_malloc_r+0x64>
 8006cc0:	1a21      	subs	r1, r4, r0
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	f000 f8e8 	bl	8006e98 <_sbrk_r>
 8006cc8:	3001      	adds	r0, #1
 8006cca:	d1dd      	bne.n	8006c88 <_malloc_r+0x64>
 8006ccc:	e7cf      	b.n	8006c6e <_malloc_r+0x4a>
 8006cce:	bf00      	nop
 8006cd0:	20004a78 	.word	0x20004a78
 8006cd4:	20004a7c 	.word	0x20004a7c

08006cd8 <_puts_r>:
 8006cd8:	b570      	push	{r4, r5, r6, lr}
 8006cda:	460e      	mov	r6, r1
 8006cdc:	4605      	mov	r5, r0
 8006cde:	b118      	cbz	r0, 8006ce8 <_puts_r+0x10>
 8006ce0:	6983      	ldr	r3, [r0, #24]
 8006ce2:	b90b      	cbnz	r3, 8006ce8 <_puts_r+0x10>
 8006ce4:	f7ff fec2 	bl	8006a6c <__sinit>
 8006ce8:	69ab      	ldr	r3, [r5, #24]
 8006cea:	68ac      	ldr	r4, [r5, #8]
 8006cec:	b913      	cbnz	r3, 8006cf4 <_puts_r+0x1c>
 8006cee:	4628      	mov	r0, r5
 8006cf0:	f7ff febc 	bl	8006a6c <__sinit>
 8006cf4:	4b2c      	ldr	r3, [pc, #176]	; (8006da8 <_puts_r+0xd0>)
 8006cf6:	429c      	cmp	r4, r3
 8006cf8:	d120      	bne.n	8006d3c <_puts_r+0x64>
 8006cfa:	686c      	ldr	r4, [r5, #4]
 8006cfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cfe:	07db      	lsls	r3, r3, #31
 8006d00:	d405      	bmi.n	8006d0e <_puts_r+0x36>
 8006d02:	89a3      	ldrh	r3, [r4, #12]
 8006d04:	0598      	lsls	r0, r3, #22
 8006d06:	d402      	bmi.n	8006d0e <_puts_r+0x36>
 8006d08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d0a:	f7ff ff72 	bl	8006bf2 <__retarget_lock_acquire_recursive>
 8006d0e:	89a3      	ldrh	r3, [r4, #12]
 8006d10:	0719      	lsls	r1, r3, #28
 8006d12:	d51d      	bpl.n	8006d50 <_puts_r+0x78>
 8006d14:	6923      	ldr	r3, [r4, #16]
 8006d16:	b1db      	cbz	r3, 8006d50 <_puts_r+0x78>
 8006d18:	3e01      	subs	r6, #1
 8006d1a:	68a3      	ldr	r3, [r4, #8]
 8006d1c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006d20:	3b01      	subs	r3, #1
 8006d22:	60a3      	str	r3, [r4, #8]
 8006d24:	bb39      	cbnz	r1, 8006d76 <_puts_r+0x9e>
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	da38      	bge.n	8006d9c <_puts_r+0xc4>
 8006d2a:	4622      	mov	r2, r4
 8006d2c:	210a      	movs	r1, #10
 8006d2e:	4628      	mov	r0, r5
 8006d30:	f000 f906 	bl	8006f40 <__swbuf_r>
 8006d34:	3001      	adds	r0, #1
 8006d36:	d011      	beq.n	8006d5c <_puts_r+0x84>
 8006d38:	250a      	movs	r5, #10
 8006d3a:	e011      	b.n	8006d60 <_puts_r+0x88>
 8006d3c:	4b1b      	ldr	r3, [pc, #108]	; (8006dac <_puts_r+0xd4>)
 8006d3e:	429c      	cmp	r4, r3
 8006d40:	d101      	bne.n	8006d46 <_puts_r+0x6e>
 8006d42:	68ac      	ldr	r4, [r5, #8]
 8006d44:	e7da      	b.n	8006cfc <_puts_r+0x24>
 8006d46:	4b1a      	ldr	r3, [pc, #104]	; (8006db0 <_puts_r+0xd8>)
 8006d48:	429c      	cmp	r4, r3
 8006d4a:	bf08      	it	eq
 8006d4c:	68ec      	ldreq	r4, [r5, #12]
 8006d4e:	e7d5      	b.n	8006cfc <_puts_r+0x24>
 8006d50:	4621      	mov	r1, r4
 8006d52:	4628      	mov	r0, r5
 8006d54:	f000 f958 	bl	8007008 <__swsetup_r>
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	d0dd      	beq.n	8006d18 <_puts_r+0x40>
 8006d5c:	f04f 35ff 	mov.w	r5, #4294967295
 8006d60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d62:	07da      	lsls	r2, r3, #31
 8006d64:	d405      	bmi.n	8006d72 <_puts_r+0x9a>
 8006d66:	89a3      	ldrh	r3, [r4, #12]
 8006d68:	059b      	lsls	r3, r3, #22
 8006d6a:	d402      	bmi.n	8006d72 <_puts_r+0x9a>
 8006d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d6e:	f7ff ff41 	bl	8006bf4 <__retarget_lock_release_recursive>
 8006d72:	4628      	mov	r0, r5
 8006d74:	bd70      	pop	{r4, r5, r6, pc}
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	da04      	bge.n	8006d84 <_puts_r+0xac>
 8006d7a:	69a2      	ldr	r2, [r4, #24]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	dc06      	bgt.n	8006d8e <_puts_r+0xb6>
 8006d80:	290a      	cmp	r1, #10
 8006d82:	d004      	beq.n	8006d8e <_puts_r+0xb6>
 8006d84:	6823      	ldr	r3, [r4, #0]
 8006d86:	1c5a      	adds	r2, r3, #1
 8006d88:	6022      	str	r2, [r4, #0]
 8006d8a:	7019      	strb	r1, [r3, #0]
 8006d8c:	e7c5      	b.n	8006d1a <_puts_r+0x42>
 8006d8e:	4622      	mov	r2, r4
 8006d90:	4628      	mov	r0, r5
 8006d92:	f000 f8d5 	bl	8006f40 <__swbuf_r>
 8006d96:	3001      	adds	r0, #1
 8006d98:	d1bf      	bne.n	8006d1a <_puts_r+0x42>
 8006d9a:	e7df      	b.n	8006d5c <_puts_r+0x84>
 8006d9c:	6823      	ldr	r3, [r4, #0]
 8006d9e:	250a      	movs	r5, #10
 8006da0:	1c5a      	adds	r2, r3, #1
 8006da2:	6022      	str	r2, [r4, #0]
 8006da4:	701d      	strb	r5, [r3, #0]
 8006da6:	e7db      	b.n	8006d60 <_puts_r+0x88>
 8006da8:	08007664 	.word	0x08007664
 8006dac:	08007684 	.word	0x08007684
 8006db0:	08007644 	.word	0x08007644

08006db4 <puts>:
 8006db4:	4b02      	ldr	r3, [pc, #8]	; (8006dc0 <puts+0xc>)
 8006db6:	4601      	mov	r1, r0
 8006db8:	6818      	ldr	r0, [r3, #0]
 8006dba:	f7ff bf8d 	b.w	8006cd8 <_puts_r>
 8006dbe:	bf00      	nop
 8006dc0:	20000010 	.word	0x20000010

08006dc4 <cleanup_glue>:
 8006dc4:	b538      	push	{r3, r4, r5, lr}
 8006dc6:	460c      	mov	r4, r1
 8006dc8:	6809      	ldr	r1, [r1, #0]
 8006dca:	4605      	mov	r5, r0
 8006dcc:	b109      	cbz	r1, 8006dd2 <cleanup_glue+0xe>
 8006dce:	f7ff fff9 	bl	8006dc4 <cleanup_glue>
 8006dd2:	4621      	mov	r1, r4
 8006dd4:	4628      	mov	r0, r5
 8006dd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dda:	f000 bad7 	b.w	800738c <_free_r>
	...

08006de0 <_reclaim_reent>:
 8006de0:	4b2c      	ldr	r3, [pc, #176]	; (8006e94 <_reclaim_reent+0xb4>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4283      	cmp	r3, r0
 8006de6:	b570      	push	{r4, r5, r6, lr}
 8006de8:	4604      	mov	r4, r0
 8006dea:	d051      	beq.n	8006e90 <_reclaim_reent+0xb0>
 8006dec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006dee:	b143      	cbz	r3, 8006e02 <_reclaim_reent+0x22>
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d14a      	bne.n	8006e8c <_reclaim_reent+0xac>
 8006df6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006df8:	6819      	ldr	r1, [r3, #0]
 8006dfa:	b111      	cbz	r1, 8006e02 <_reclaim_reent+0x22>
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	f000 fac5 	bl	800738c <_free_r>
 8006e02:	6961      	ldr	r1, [r4, #20]
 8006e04:	b111      	cbz	r1, 8006e0c <_reclaim_reent+0x2c>
 8006e06:	4620      	mov	r0, r4
 8006e08:	f000 fac0 	bl	800738c <_free_r>
 8006e0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006e0e:	b111      	cbz	r1, 8006e16 <_reclaim_reent+0x36>
 8006e10:	4620      	mov	r0, r4
 8006e12:	f000 fabb 	bl	800738c <_free_r>
 8006e16:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006e18:	b111      	cbz	r1, 8006e20 <_reclaim_reent+0x40>
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	f000 fab6 	bl	800738c <_free_r>
 8006e20:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006e22:	b111      	cbz	r1, 8006e2a <_reclaim_reent+0x4a>
 8006e24:	4620      	mov	r0, r4
 8006e26:	f000 fab1 	bl	800738c <_free_r>
 8006e2a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006e2c:	b111      	cbz	r1, 8006e34 <_reclaim_reent+0x54>
 8006e2e:	4620      	mov	r0, r4
 8006e30:	f000 faac 	bl	800738c <_free_r>
 8006e34:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006e36:	b111      	cbz	r1, 8006e3e <_reclaim_reent+0x5e>
 8006e38:	4620      	mov	r0, r4
 8006e3a:	f000 faa7 	bl	800738c <_free_r>
 8006e3e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006e40:	b111      	cbz	r1, 8006e48 <_reclaim_reent+0x68>
 8006e42:	4620      	mov	r0, r4
 8006e44:	f000 faa2 	bl	800738c <_free_r>
 8006e48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e4a:	b111      	cbz	r1, 8006e52 <_reclaim_reent+0x72>
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	f000 fa9d 	bl	800738c <_free_r>
 8006e52:	69a3      	ldr	r3, [r4, #24]
 8006e54:	b1e3      	cbz	r3, 8006e90 <_reclaim_reent+0xb0>
 8006e56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006e58:	4620      	mov	r0, r4
 8006e5a:	4798      	blx	r3
 8006e5c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006e5e:	b1b9      	cbz	r1, 8006e90 <_reclaim_reent+0xb0>
 8006e60:	4620      	mov	r0, r4
 8006e62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006e66:	f7ff bfad 	b.w	8006dc4 <cleanup_glue>
 8006e6a:	5949      	ldr	r1, [r1, r5]
 8006e6c:	b941      	cbnz	r1, 8006e80 <_reclaim_reent+0xa0>
 8006e6e:	3504      	adds	r5, #4
 8006e70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e72:	2d80      	cmp	r5, #128	; 0x80
 8006e74:	68d9      	ldr	r1, [r3, #12]
 8006e76:	d1f8      	bne.n	8006e6a <_reclaim_reent+0x8a>
 8006e78:	4620      	mov	r0, r4
 8006e7a:	f000 fa87 	bl	800738c <_free_r>
 8006e7e:	e7ba      	b.n	8006df6 <_reclaim_reent+0x16>
 8006e80:	680e      	ldr	r6, [r1, #0]
 8006e82:	4620      	mov	r0, r4
 8006e84:	f000 fa82 	bl	800738c <_free_r>
 8006e88:	4631      	mov	r1, r6
 8006e8a:	e7ef      	b.n	8006e6c <_reclaim_reent+0x8c>
 8006e8c:	2500      	movs	r5, #0
 8006e8e:	e7ef      	b.n	8006e70 <_reclaim_reent+0x90>
 8006e90:	bd70      	pop	{r4, r5, r6, pc}
 8006e92:	bf00      	nop
 8006e94:	20000010 	.word	0x20000010

08006e98 <_sbrk_r>:
 8006e98:	b538      	push	{r3, r4, r5, lr}
 8006e9a:	4d06      	ldr	r5, [pc, #24]	; (8006eb4 <_sbrk_r+0x1c>)
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	4604      	mov	r4, r0
 8006ea0:	4608      	mov	r0, r1
 8006ea2:	602b      	str	r3, [r5, #0]
 8006ea4:	f7f9 feb6 	bl	8000c14 <_sbrk>
 8006ea8:	1c43      	adds	r3, r0, #1
 8006eaa:	d102      	bne.n	8006eb2 <_sbrk_r+0x1a>
 8006eac:	682b      	ldr	r3, [r5, #0]
 8006eae:	b103      	cbz	r3, 8006eb2 <_sbrk_r+0x1a>
 8006eb0:	6023      	str	r3, [r4, #0]
 8006eb2:	bd38      	pop	{r3, r4, r5, pc}
 8006eb4:	20004eac 	.word	0x20004eac

08006eb8 <__sread>:
 8006eb8:	b510      	push	{r4, lr}
 8006eba:	460c      	mov	r4, r1
 8006ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ec0:	f000 fab4 	bl	800742c <_read_r>
 8006ec4:	2800      	cmp	r0, #0
 8006ec6:	bfab      	itete	ge
 8006ec8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006eca:	89a3      	ldrhlt	r3, [r4, #12]
 8006ecc:	181b      	addge	r3, r3, r0
 8006ece:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006ed2:	bfac      	ite	ge
 8006ed4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ed6:	81a3      	strhlt	r3, [r4, #12]
 8006ed8:	bd10      	pop	{r4, pc}

08006eda <__swrite>:
 8006eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ede:	461f      	mov	r7, r3
 8006ee0:	898b      	ldrh	r3, [r1, #12]
 8006ee2:	05db      	lsls	r3, r3, #23
 8006ee4:	4605      	mov	r5, r0
 8006ee6:	460c      	mov	r4, r1
 8006ee8:	4616      	mov	r6, r2
 8006eea:	d505      	bpl.n	8006ef8 <__swrite+0x1e>
 8006eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ef0:	2302      	movs	r3, #2
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f000 f9c8 	bl	8007288 <_lseek_r>
 8006ef8:	89a3      	ldrh	r3, [r4, #12]
 8006efa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006efe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f02:	81a3      	strh	r3, [r4, #12]
 8006f04:	4632      	mov	r2, r6
 8006f06:	463b      	mov	r3, r7
 8006f08:	4628      	mov	r0, r5
 8006f0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f0e:	f000 b869 	b.w	8006fe4 <_write_r>

08006f12 <__sseek>:
 8006f12:	b510      	push	{r4, lr}
 8006f14:	460c      	mov	r4, r1
 8006f16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f1a:	f000 f9b5 	bl	8007288 <_lseek_r>
 8006f1e:	1c43      	adds	r3, r0, #1
 8006f20:	89a3      	ldrh	r3, [r4, #12]
 8006f22:	bf15      	itete	ne
 8006f24:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f2e:	81a3      	strheq	r3, [r4, #12]
 8006f30:	bf18      	it	ne
 8006f32:	81a3      	strhne	r3, [r4, #12]
 8006f34:	bd10      	pop	{r4, pc}

08006f36 <__sclose>:
 8006f36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f3a:	f000 b8d3 	b.w	80070e4 <_close_r>
	...

08006f40 <__swbuf_r>:
 8006f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f42:	460e      	mov	r6, r1
 8006f44:	4614      	mov	r4, r2
 8006f46:	4605      	mov	r5, r0
 8006f48:	b118      	cbz	r0, 8006f52 <__swbuf_r+0x12>
 8006f4a:	6983      	ldr	r3, [r0, #24]
 8006f4c:	b90b      	cbnz	r3, 8006f52 <__swbuf_r+0x12>
 8006f4e:	f7ff fd8d 	bl	8006a6c <__sinit>
 8006f52:	4b21      	ldr	r3, [pc, #132]	; (8006fd8 <__swbuf_r+0x98>)
 8006f54:	429c      	cmp	r4, r3
 8006f56:	d12b      	bne.n	8006fb0 <__swbuf_r+0x70>
 8006f58:	686c      	ldr	r4, [r5, #4]
 8006f5a:	69a3      	ldr	r3, [r4, #24]
 8006f5c:	60a3      	str	r3, [r4, #8]
 8006f5e:	89a3      	ldrh	r3, [r4, #12]
 8006f60:	071a      	lsls	r2, r3, #28
 8006f62:	d52f      	bpl.n	8006fc4 <__swbuf_r+0x84>
 8006f64:	6923      	ldr	r3, [r4, #16]
 8006f66:	b36b      	cbz	r3, 8006fc4 <__swbuf_r+0x84>
 8006f68:	6923      	ldr	r3, [r4, #16]
 8006f6a:	6820      	ldr	r0, [r4, #0]
 8006f6c:	1ac0      	subs	r0, r0, r3
 8006f6e:	6963      	ldr	r3, [r4, #20]
 8006f70:	b2f6      	uxtb	r6, r6
 8006f72:	4283      	cmp	r3, r0
 8006f74:	4637      	mov	r7, r6
 8006f76:	dc04      	bgt.n	8006f82 <__swbuf_r+0x42>
 8006f78:	4621      	mov	r1, r4
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	f000 f948 	bl	8007210 <_fflush_r>
 8006f80:	bb30      	cbnz	r0, 8006fd0 <__swbuf_r+0x90>
 8006f82:	68a3      	ldr	r3, [r4, #8]
 8006f84:	3b01      	subs	r3, #1
 8006f86:	60a3      	str	r3, [r4, #8]
 8006f88:	6823      	ldr	r3, [r4, #0]
 8006f8a:	1c5a      	adds	r2, r3, #1
 8006f8c:	6022      	str	r2, [r4, #0]
 8006f8e:	701e      	strb	r6, [r3, #0]
 8006f90:	6963      	ldr	r3, [r4, #20]
 8006f92:	3001      	adds	r0, #1
 8006f94:	4283      	cmp	r3, r0
 8006f96:	d004      	beq.n	8006fa2 <__swbuf_r+0x62>
 8006f98:	89a3      	ldrh	r3, [r4, #12]
 8006f9a:	07db      	lsls	r3, r3, #31
 8006f9c:	d506      	bpl.n	8006fac <__swbuf_r+0x6c>
 8006f9e:	2e0a      	cmp	r6, #10
 8006fa0:	d104      	bne.n	8006fac <__swbuf_r+0x6c>
 8006fa2:	4621      	mov	r1, r4
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	f000 f933 	bl	8007210 <_fflush_r>
 8006faa:	b988      	cbnz	r0, 8006fd0 <__swbuf_r+0x90>
 8006fac:	4638      	mov	r0, r7
 8006fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fb0:	4b0a      	ldr	r3, [pc, #40]	; (8006fdc <__swbuf_r+0x9c>)
 8006fb2:	429c      	cmp	r4, r3
 8006fb4:	d101      	bne.n	8006fba <__swbuf_r+0x7a>
 8006fb6:	68ac      	ldr	r4, [r5, #8]
 8006fb8:	e7cf      	b.n	8006f5a <__swbuf_r+0x1a>
 8006fba:	4b09      	ldr	r3, [pc, #36]	; (8006fe0 <__swbuf_r+0xa0>)
 8006fbc:	429c      	cmp	r4, r3
 8006fbe:	bf08      	it	eq
 8006fc0:	68ec      	ldreq	r4, [r5, #12]
 8006fc2:	e7ca      	b.n	8006f5a <__swbuf_r+0x1a>
 8006fc4:	4621      	mov	r1, r4
 8006fc6:	4628      	mov	r0, r5
 8006fc8:	f000 f81e 	bl	8007008 <__swsetup_r>
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	d0cb      	beq.n	8006f68 <__swbuf_r+0x28>
 8006fd0:	f04f 37ff 	mov.w	r7, #4294967295
 8006fd4:	e7ea      	b.n	8006fac <__swbuf_r+0x6c>
 8006fd6:	bf00      	nop
 8006fd8:	08007664 	.word	0x08007664
 8006fdc:	08007684 	.word	0x08007684
 8006fe0:	08007644 	.word	0x08007644

08006fe4 <_write_r>:
 8006fe4:	b538      	push	{r3, r4, r5, lr}
 8006fe6:	4d07      	ldr	r5, [pc, #28]	; (8007004 <_write_r+0x20>)
 8006fe8:	4604      	mov	r4, r0
 8006fea:	4608      	mov	r0, r1
 8006fec:	4611      	mov	r1, r2
 8006fee:	2200      	movs	r2, #0
 8006ff0:	602a      	str	r2, [r5, #0]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	f7f9 fdbe 	bl	8000b74 <_write>
 8006ff8:	1c43      	adds	r3, r0, #1
 8006ffa:	d102      	bne.n	8007002 <_write_r+0x1e>
 8006ffc:	682b      	ldr	r3, [r5, #0]
 8006ffe:	b103      	cbz	r3, 8007002 <_write_r+0x1e>
 8007000:	6023      	str	r3, [r4, #0]
 8007002:	bd38      	pop	{r3, r4, r5, pc}
 8007004:	20004eac 	.word	0x20004eac

08007008 <__swsetup_r>:
 8007008:	4b32      	ldr	r3, [pc, #200]	; (80070d4 <__swsetup_r+0xcc>)
 800700a:	b570      	push	{r4, r5, r6, lr}
 800700c:	681d      	ldr	r5, [r3, #0]
 800700e:	4606      	mov	r6, r0
 8007010:	460c      	mov	r4, r1
 8007012:	b125      	cbz	r5, 800701e <__swsetup_r+0x16>
 8007014:	69ab      	ldr	r3, [r5, #24]
 8007016:	b913      	cbnz	r3, 800701e <__swsetup_r+0x16>
 8007018:	4628      	mov	r0, r5
 800701a:	f7ff fd27 	bl	8006a6c <__sinit>
 800701e:	4b2e      	ldr	r3, [pc, #184]	; (80070d8 <__swsetup_r+0xd0>)
 8007020:	429c      	cmp	r4, r3
 8007022:	d10f      	bne.n	8007044 <__swsetup_r+0x3c>
 8007024:	686c      	ldr	r4, [r5, #4]
 8007026:	89a3      	ldrh	r3, [r4, #12]
 8007028:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800702c:	0719      	lsls	r1, r3, #28
 800702e:	d42c      	bmi.n	800708a <__swsetup_r+0x82>
 8007030:	06dd      	lsls	r5, r3, #27
 8007032:	d411      	bmi.n	8007058 <__swsetup_r+0x50>
 8007034:	2309      	movs	r3, #9
 8007036:	6033      	str	r3, [r6, #0]
 8007038:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800703c:	81a3      	strh	r3, [r4, #12]
 800703e:	f04f 30ff 	mov.w	r0, #4294967295
 8007042:	e03e      	b.n	80070c2 <__swsetup_r+0xba>
 8007044:	4b25      	ldr	r3, [pc, #148]	; (80070dc <__swsetup_r+0xd4>)
 8007046:	429c      	cmp	r4, r3
 8007048:	d101      	bne.n	800704e <__swsetup_r+0x46>
 800704a:	68ac      	ldr	r4, [r5, #8]
 800704c:	e7eb      	b.n	8007026 <__swsetup_r+0x1e>
 800704e:	4b24      	ldr	r3, [pc, #144]	; (80070e0 <__swsetup_r+0xd8>)
 8007050:	429c      	cmp	r4, r3
 8007052:	bf08      	it	eq
 8007054:	68ec      	ldreq	r4, [r5, #12]
 8007056:	e7e6      	b.n	8007026 <__swsetup_r+0x1e>
 8007058:	0758      	lsls	r0, r3, #29
 800705a:	d512      	bpl.n	8007082 <__swsetup_r+0x7a>
 800705c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800705e:	b141      	cbz	r1, 8007072 <__swsetup_r+0x6a>
 8007060:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007064:	4299      	cmp	r1, r3
 8007066:	d002      	beq.n	800706e <__swsetup_r+0x66>
 8007068:	4630      	mov	r0, r6
 800706a:	f000 f98f 	bl	800738c <_free_r>
 800706e:	2300      	movs	r3, #0
 8007070:	6363      	str	r3, [r4, #52]	; 0x34
 8007072:	89a3      	ldrh	r3, [r4, #12]
 8007074:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007078:	81a3      	strh	r3, [r4, #12]
 800707a:	2300      	movs	r3, #0
 800707c:	6063      	str	r3, [r4, #4]
 800707e:	6923      	ldr	r3, [r4, #16]
 8007080:	6023      	str	r3, [r4, #0]
 8007082:	89a3      	ldrh	r3, [r4, #12]
 8007084:	f043 0308 	orr.w	r3, r3, #8
 8007088:	81a3      	strh	r3, [r4, #12]
 800708a:	6923      	ldr	r3, [r4, #16]
 800708c:	b94b      	cbnz	r3, 80070a2 <__swsetup_r+0x9a>
 800708e:	89a3      	ldrh	r3, [r4, #12]
 8007090:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007098:	d003      	beq.n	80070a2 <__swsetup_r+0x9a>
 800709a:	4621      	mov	r1, r4
 800709c:	4630      	mov	r0, r6
 800709e:	f000 f929 	bl	80072f4 <__smakebuf_r>
 80070a2:	89a0      	ldrh	r0, [r4, #12]
 80070a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070a8:	f010 0301 	ands.w	r3, r0, #1
 80070ac:	d00a      	beq.n	80070c4 <__swsetup_r+0xbc>
 80070ae:	2300      	movs	r3, #0
 80070b0:	60a3      	str	r3, [r4, #8]
 80070b2:	6963      	ldr	r3, [r4, #20]
 80070b4:	425b      	negs	r3, r3
 80070b6:	61a3      	str	r3, [r4, #24]
 80070b8:	6923      	ldr	r3, [r4, #16]
 80070ba:	b943      	cbnz	r3, 80070ce <__swsetup_r+0xc6>
 80070bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80070c0:	d1ba      	bne.n	8007038 <__swsetup_r+0x30>
 80070c2:	bd70      	pop	{r4, r5, r6, pc}
 80070c4:	0781      	lsls	r1, r0, #30
 80070c6:	bf58      	it	pl
 80070c8:	6963      	ldrpl	r3, [r4, #20]
 80070ca:	60a3      	str	r3, [r4, #8]
 80070cc:	e7f4      	b.n	80070b8 <__swsetup_r+0xb0>
 80070ce:	2000      	movs	r0, #0
 80070d0:	e7f7      	b.n	80070c2 <__swsetup_r+0xba>
 80070d2:	bf00      	nop
 80070d4:	20000010 	.word	0x20000010
 80070d8:	08007664 	.word	0x08007664
 80070dc:	08007684 	.word	0x08007684
 80070e0:	08007644 	.word	0x08007644

080070e4 <_close_r>:
 80070e4:	b538      	push	{r3, r4, r5, lr}
 80070e6:	4d06      	ldr	r5, [pc, #24]	; (8007100 <_close_r+0x1c>)
 80070e8:	2300      	movs	r3, #0
 80070ea:	4604      	mov	r4, r0
 80070ec:	4608      	mov	r0, r1
 80070ee:	602b      	str	r3, [r5, #0]
 80070f0:	f7f9 fd5c 	bl	8000bac <_close>
 80070f4:	1c43      	adds	r3, r0, #1
 80070f6:	d102      	bne.n	80070fe <_close_r+0x1a>
 80070f8:	682b      	ldr	r3, [r5, #0]
 80070fa:	b103      	cbz	r3, 80070fe <_close_r+0x1a>
 80070fc:	6023      	str	r3, [r4, #0]
 80070fe:	bd38      	pop	{r3, r4, r5, pc}
 8007100:	20004eac 	.word	0x20004eac

08007104 <__sflush_r>:
 8007104:	898a      	ldrh	r2, [r1, #12]
 8007106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800710a:	4605      	mov	r5, r0
 800710c:	0710      	lsls	r0, r2, #28
 800710e:	460c      	mov	r4, r1
 8007110:	d458      	bmi.n	80071c4 <__sflush_r+0xc0>
 8007112:	684b      	ldr	r3, [r1, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	dc05      	bgt.n	8007124 <__sflush_r+0x20>
 8007118:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800711a:	2b00      	cmp	r3, #0
 800711c:	dc02      	bgt.n	8007124 <__sflush_r+0x20>
 800711e:	2000      	movs	r0, #0
 8007120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007124:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007126:	2e00      	cmp	r6, #0
 8007128:	d0f9      	beq.n	800711e <__sflush_r+0x1a>
 800712a:	2300      	movs	r3, #0
 800712c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007130:	682f      	ldr	r7, [r5, #0]
 8007132:	602b      	str	r3, [r5, #0]
 8007134:	d032      	beq.n	800719c <__sflush_r+0x98>
 8007136:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007138:	89a3      	ldrh	r3, [r4, #12]
 800713a:	075a      	lsls	r2, r3, #29
 800713c:	d505      	bpl.n	800714a <__sflush_r+0x46>
 800713e:	6863      	ldr	r3, [r4, #4]
 8007140:	1ac0      	subs	r0, r0, r3
 8007142:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007144:	b10b      	cbz	r3, 800714a <__sflush_r+0x46>
 8007146:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007148:	1ac0      	subs	r0, r0, r3
 800714a:	2300      	movs	r3, #0
 800714c:	4602      	mov	r2, r0
 800714e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007150:	6a21      	ldr	r1, [r4, #32]
 8007152:	4628      	mov	r0, r5
 8007154:	47b0      	blx	r6
 8007156:	1c43      	adds	r3, r0, #1
 8007158:	89a3      	ldrh	r3, [r4, #12]
 800715a:	d106      	bne.n	800716a <__sflush_r+0x66>
 800715c:	6829      	ldr	r1, [r5, #0]
 800715e:	291d      	cmp	r1, #29
 8007160:	d82c      	bhi.n	80071bc <__sflush_r+0xb8>
 8007162:	4a2a      	ldr	r2, [pc, #168]	; (800720c <__sflush_r+0x108>)
 8007164:	40ca      	lsrs	r2, r1
 8007166:	07d6      	lsls	r6, r2, #31
 8007168:	d528      	bpl.n	80071bc <__sflush_r+0xb8>
 800716a:	2200      	movs	r2, #0
 800716c:	6062      	str	r2, [r4, #4]
 800716e:	04d9      	lsls	r1, r3, #19
 8007170:	6922      	ldr	r2, [r4, #16]
 8007172:	6022      	str	r2, [r4, #0]
 8007174:	d504      	bpl.n	8007180 <__sflush_r+0x7c>
 8007176:	1c42      	adds	r2, r0, #1
 8007178:	d101      	bne.n	800717e <__sflush_r+0x7a>
 800717a:	682b      	ldr	r3, [r5, #0]
 800717c:	b903      	cbnz	r3, 8007180 <__sflush_r+0x7c>
 800717e:	6560      	str	r0, [r4, #84]	; 0x54
 8007180:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007182:	602f      	str	r7, [r5, #0]
 8007184:	2900      	cmp	r1, #0
 8007186:	d0ca      	beq.n	800711e <__sflush_r+0x1a>
 8007188:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800718c:	4299      	cmp	r1, r3
 800718e:	d002      	beq.n	8007196 <__sflush_r+0x92>
 8007190:	4628      	mov	r0, r5
 8007192:	f000 f8fb 	bl	800738c <_free_r>
 8007196:	2000      	movs	r0, #0
 8007198:	6360      	str	r0, [r4, #52]	; 0x34
 800719a:	e7c1      	b.n	8007120 <__sflush_r+0x1c>
 800719c:	6a21      	ldr	r1, [r4, #32]
 800719e:	2301      	movs	r3, #1
 80071a0:	4628      	mov	r0, r5
 80071a2:	47b0      	blx	r6
 80071a4:	1c41      	adds	r1, r0, #1
 80071a6:	d1c7      	bne.n	8007138 <__sflush_r+0x34>
 80071a8:	682b      	ldr	r3, [r5, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d0c4      	beq.n	8007138 <__sflush_r+0x34>
 80071ae:	2b1d      	cmp	r3, #29
 80071b0:	d001      	beq.n	80071b6 <__sflush_r+0xb2>
 80071b2:	2b16      	cmp	r3, #22
 80071b4:	d101      	bne.n	80071ba <__sflush_r+0xb6>
 80071b6:	602f      	str	r7, [r5, #0]
 80071b8:	e7b1      	b.n	800711e <__sflush_r+0x1a>
 80071ba:	89a3      	ldrh	r3, [r4, #12]
 80071bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071c0:	81a3      	strh	r3, [r4, #12]
 80071c2:	e7ad      	b.n	8007120 <__sflush_r+0x1c>
 80071c4:	690f      	ldr	r7, [r1, #16]
 80071c6:	2f00      	cmp	r7, #0
 80071c8:	d0a9      	beq.n	800711e <__sflush_r+0x1a>
 80071ca:	0793      	lsls	r3, r2, #30
 80071cc:	680e      	ldr	r6, [r1, #0]
 80071ce:	bf08      	it	eq
 80071d0:	694b      	ldreq	r3, [r1, #20]
 80071d2:	600f      	str	r7, [r1, #0]
 80071d4:	bf18      	it	ne
 80071d6:	2300      	movne	r3, #0
 80071d8:	eba6 0807 	sub.w	r8, r6, r7
 80071dc:	608b      	str	r3, [r1, #8]
 80071de:	f1b8 0f00 	cmp.w	r8, #0
 80071e2:	dd9c      	ble.n	800711e <__sflush_r+0x1a>
 80071e4:	6a21      	ldr	r1, [r4, #32]
 80071e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80071e8:	4643      	mov	r3, r8
 80071ea:	463a      	mov	r2, r7
 80071ec:	4628      	mov	r0, r5
 80071ee:	47b0      	blx	r6
 80071f0:	2800      	cmp	r0, #0
 80071f2:	dc06      	bgt.n	8007202 <__sflush_r+0xfe>
 80071f4:	89a3      	ldrh	r3, [r4, #12]
 80071f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071fa:	81a3      	strh	r3, [r4, #12]
 80071fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007200:	e78e      	b.n	8007120 <__sflush_r+0x1c>
 8007202:	4407      	add	r7, r0
 8007204:	eba8 0800 	sub.w	r8, r8, r0
 8007208:	e7e9      	b.n	80071de <__sflush_r+0xda>
 800720a:	bf00      	nop
 800720c:	20400001 	.word	0x20400001

08007210 <_fflush_r>:
 8007210:	b538      	push	{r3, r4, r5, lr}
 8007212:	690b      	ldr	r3, [r1, #16]
 8007214:	4605      	mov	r5, r0
 8007216:	460c      	mov	r4, r1
 8007218:	b913      	cbnz	r3, 8007220 <_fflush_r+0x10>
 800721a:	2500      	movs	r5, #0
 800721c:	4628      	mov	r0, r5
 800721e:	bd38      	pop	{r3, r4, r5, pc}
 8007220:	b118      	cbz	r0, 800722a <_fflush_r+0x1a>
 8007222:	6983      	ldr	r3, [r0, #24]
 8007224:	b90b      	cbnz	r3, 800722a <_fflush_r+0x1a>
 8007226:	f7ff fc21 	bl	8006a6c <__sinit>
 800722a:	4b14      	ldr	r3, [pc, #80]	; (800727c <_fflush_r+0x6c>)
 800722c:	429c      	cmp	r4, r3
 800722e:	d11b      	bne.n	8007268 <_fflush_r+0x58>
 8007230:	686c      	ldr	r4, [r5, #4]
 8007232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d0ef      	beq.n	800721a <_fflush_r+0xa>
 800723a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800723c:	07d0      	lsls	r0, r2, #31
 800723e:	d404      	bmi.n	800724a <_fflush_r+0x3a>
 8007240:	0599      	lsls	r1, r3, #22
 8007242:	d402      	bmi.n	800724a <_fflush_r+0x3a>
 8007244:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007246:	f7ff fcd4 	bl	8006bf2 <__retarget_lock_acquire_recursive>
 800724a:	4628      	mov	r0, r5
 800724c:	4621      	mov	r1, r4
 800724e:	f7ff ff59 	bl	8007104 <__sflush_r>
 8007252:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007254:	07da      	lsls	r2, r3, #31
 8007256:	4605      	mov	r5, r0
 8007258:	d4e0      	bmi.n	800721c <_fflush_r+0xc>
 800725a:	89a3      	ldrh	r3, [r4, #12]
 800725c:	059b      	lsls	r3, r3, #22
 800725e:	d4dd      	bmi.n	800721c <_fflush_r+0xc>
 8007260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007262:	f7ff fcc7 	bl	8006bf4 <__retarget_lock_release_recursive>
 8007266:	e7d9      	b.n	800721c <_fflush_r+0xc>
 8007268:	4b05      	ldr	r3, [pc, #20]	; (8007280 <_fflush_r+0x70>)
 800726a:	429c      	cmp	r4, r3
 800726c:	d101      	bne.n	8007272 <_fflush_r+0x62>
 800726e:	68ac      	ldr	r4, [r5, #8]
 8007270:	e7df      	b.n	8007232 <_fflush_r+0x22>
 8007272:	4b04      	ldr	r3, [pc, #16]	; (8007284 <_fflush_r+0x74>)
 8007274:	429c      	cmp	r4, r3
 8007276:	bf08      	it	eq
 8007278:	68ec      	ldreq	r4, [r5, #12]
 800727a:	e7da      	b.n	8007232 <_fflush_r+0x22>
 800727c:	08007664 	.word	0x08007664
 8007280:	08007684 	.word	0x08007684
 8007284:	08007644 	.word	0x08007644

08007288 <_lseek_r>:
 8007288:	b538      	push	{r3, r4, r5, lr}
 800728a:	4d07      	ldr	r5, [pc, #28]	; (80072a8 <_lseek_r+0x20>)
 800728c:	4604      	mov	r4, r0
 800728e:	4608      	mov	r0, r1
 8007290:	4611      	mov	r1, r2
 8007292:	2200      	movs	r2, #0
 8007294:	602a      	str	r2, [r5, #0]
 8007296:	461a      	mov	r2, r3
 8007298:	f7f9 fcaf 	bl	8000bfa <_lseek>
 800729c:	1c43      	adds	r3, r0, #1
 800729e:	d102      	bne.n	80072a6 <_lseek_r+0x1e>
 80072a0:	682b      	ldr	r3, [r5, #0]
 80072a2:	b103      	cbz	r3, 80072a6 <_lseek_r+0x1e>
 80072a4:	6023      	str	r3, [r4, #0]
 80072a6:	bd38      	pop	{r3, r4, r5, pc}
 80072a8:	20004eac 	.word	0x20004eac

080072ac <__swhatbuf_r>:
 80072ac:	b570      	push	{r4, r5, r6, lr}
 80072ae:	460e      	mov	r6, r1
 80072b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072b4:	2900      	cmp	r1, #0
 80072b6:	b096      	sub	sp, #88	; 0x58
 80072b8:	4614      	mov	r4, r2
 80072ba:	461d      	mov	r5, r3
 80072bc:	da07      	bge.n	80072ce <__swhatbuf_r+0x22>
 80072be:	2300      	movs	r3, #0
 80072c0:	602b      	str	r3, [r5, #0]
 80072c2:	89b3      	ldrh	r3, [r6, #12]
 80072c4:	061a      	lsls	r2, r3, #24
 80072c6:	d410      	bmi.n	80072ea <__swhatbuf_r+0x3e>
 80072c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072cc:	e00e      	b.n	80072ec <__swhatbuf_r+0x40>
 80072ce:	466a      	mov	r2, sp
 80072d0:	f000 f8be 	bl	8007450 <_fstat_r>
 80072d4:	2800      	cmp	r0, #0
 80072d6:	dbf2      	blt.n	80072be <__swhatbuf_r+0x12>
 80072d8:	9a01      	ldr	r2, [sp, #4]
 80072da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80072de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80072e2:	425a      	negs	r2, r3
 80072e4:	415a      	adcs	r2, r3
 80072e6:	602a      	str	r2, [r5, #0]
 80072e8:	e7ee      	b.n	80072c8 <__swhatbuf_r+0x1c>
 80072ea:	2340      	movs	r3, #64	; 0x40
 80072ec:	2000      	movs	r0, #0
 80072ee:	6023      	str	r3, [r4, #0]
 80072f0:	b016      	add	sp, #88	; 0x58
 80072f2:	bd70      	pop	{r4, r5, r6, pc}

080072f4 <__smakebuf_r>:
 80072f4:	898b      	ldrh	r3, [r1, #12]
 80072f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80072f8:	079d      	lsls	r5, r3, #30
 80072fa:	4606      	mov	r6, r0
 80072fc:	460c      	mov	r4, r1
 80072fe:	d507      	bpl.n	8007310 <__smakebuf_r+0x1c>
 8007300:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007304:	6023      	str	r3, [r4, #0]
 8007306:	6123      	str	r3, [r4, #16]
 8007308:	2301      	movs	r3, #1
 800730a:	6163      	str	r3, [r4, #20]
 800730c:	b002      	add	sp, #8
 800730e:	bd70      	pop	{r4, r5, r6, pc}
 8007310:	ab01      	add	r3, sp, #4
 8007312:	466a      	mov	r2, sp
 8007314:	f7ff ffca 	bl	80072ac <__swhatbuf_r>
 8007318:	9900      	ldr	r1, [sp, #0]
 800731a:	4605      	mov	r5, r0
 800731c:	4630      	mov	r0, r6
 800731e:	f7ff fc81 	bl	8006c24 <_malloc_r>
 8007322:	b948      	cbnz	r0, 8007338 <__smakebuf_r+0x44>
 8007324:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007328:	059a      	lsls	r2, r3, #22
 800732a:	d4ef      	bmi.n	800730c <__smakebuf_r+0x18>
 800732c:	f023 0303 	bic.w	r3, r3, #3
 8007330:	f043 0302 	orr.w	r3, r3, #2
 8007334:	81a3      	strh	r3, [r4, #12]
 8007336:	e7e3      	b.n	8007300 <__smakebuf_r+0xc>
 8007338:	4b0d      	ldr	r3, [pc, #52]	; (8007370 <__smakebuf_r+0x7c>)
 800733a:	62b3      	str	r3, [r6, #40]	; 0x28
 800733c:	89a3      	ldrh	r3, [r4, #12]
 800733e:	6020      	str	r0, [r4, #0]
 8007340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007344:	81a3      	strh	r3, [r4, #12]
 8007346:	9b00      	ldr	r3, [sp, #0]
 8007348:	6163      	str	r3, [r4, #20]
 800734a:	9b01      	ldr	r3, [sp, #4]
 800734c:	6120      	str	r0, [r4, #16]
 800734e:	b15b      	cbz	r3, 8007368 <__smakebuf_r+0x74>
 8007350:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007354:	4630      	mov	r0, r6
 8007356:	f000 f88d 	bl	8007474 <_isatty_r>
 800735a:	b128      	cbz	r0, 8007368 <__smakebuf_r+0x74>
 800735c:	89a3      	ldrh	r3, [r4, #12]
 800735e:	f023 0303 	bic.w	r3, r3, #3
 8007362:	f043 0301 	orr.w	r3, r3, #1
 8007366:	81a3      	strh	r3, [r4, #12]
 8007368:	89a0      	ldrh	r0, [r4, #12]
 800736a:	4305      	orrs	r5, r0
 800736c:	81a5      	strh	r5, [r4, #12]
 800736e:	e7cd      	b.n	800730c <__smakebuf_r+0x18>
 8007370:	08006a05 	.word	0x08006a05

08007374 <__malloc_lock>:
 8007374:	4801      	ldr	r0, [pc, #4]	; (800737c <__malloc_lock+0x8>)
 8007376:	f7ff bc3c 	b.w	8006bf2 <__retarget_lock_acquire_recursive>
 800737a:	bf00      	nop
 800737c:	20004ea4 	.word	0x20004ea4

08007380 <__malloc_unlock>:
 8007380:	4801      	ldr	r0, [pc, #4]	; (8007388 <__malloc_unlock+0x8>)
 8007382:	f7ff bc37 	b.w	8006bf4 <__retarget_lock_release_recursive>
 8007386:	bf00      	nop
 8007388:	20004ea4 	.word	0x20004ea4

0800738c <_free_r>:
 800738c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800738e:	2900      	cmp	r1, #0
 8007390:	d048      	beq.n	8007424 <_free_r+0x98>
 8007392:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007396:	9001      	str	r0, [sp, #4]
 8007398:	2b00      	cmp	r3, #0
 800739a:	f1a1 0404 	sub.w	r4, r1, #4
 800739e:	bfb8      	it	lt
 80073a0:	18e4      	addlt	r4, r4, r3
 80073a2:	f7ff ffe7 	bl	8007374 <__malloc_lock>
 80073a6:	4a20      	ldr	r2, [pc, #128]	; (8007428 <_free_r+0x9c>)
 80073a8:	9801      	ldr	r0, [sp, #4]
 80073aa:	6813      	ldr	r3, [r2, #0]
 80073ac:	4615      	mov	r5, r2
 80073ae:	b933      	cbnz	r3, 80073be <_free_r+0x32>
 80073b0:	6063      	str	r3, [r4, #4]
 80073b2:	6014      	str	r4, [r2, #0]
 80073b4:	b003      	add	sp, #12
 80073b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073ba:	f7ff bfe1 	b.w	8007380 <__malloc_unlock>
 80073be:	42a3      	cmp	r3, r4
 80073c0:	d90b      	bls.n	80073da <_free_r+0x4e>
 80073c2:	6821      	ldr	r1, [r4, #0]
 80073c4:	1862      	adds	r2, r4, r1
 80073c6:	4293      	cmp	r3, r2
 80073c8:	bf04      	itt	eq
 80073ca:	681a      	ldreq	r2, [r3, #0]
 80073cc:	685b      	ldreq	r3, [r3, #4]
 80073ce:	6063      	str	r3, [r4, #4]
 80073d0:	bf04      	itt	eq
 80073d2:	1852      	addeq	r2, r2, r1
 80073d4:	6022      	streq	r2, [r4, #0]
 80073d6:	602c      	str	r4, [r5, #0]
 80073d8:	e7ec      	b.n	80073b4 <_free_r+0x28>
 80073da:	461a      	mov	r2, r3
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	b10b      	cbz	r3, 80073e4 <_free_r+0x58>
 80073e0:	42a3      	cmp	r3, r4
 80073e2:	d9fa      	bls.n	80073da <_free_r+0x4e>
 80073e4:	6811      	ldr	r1, [r2, #0]
 80073e6:	1855      	adds	r5, r2, r1
 80073e8:	42a5      	cmp	r5, r4
 80073ea:	d10b      	bne.n	8007404 <_free_r+0x78>
 80073ec:	6824      	ldr	r4, [r4, #0]
 80073ee:	4421      	add	r1, r4
 80073f0:	1854      	adds	r4, r2, r1
 80073f2:	42a3      	cmp	r3, r4
 80073f4:	6011      	str	r1, [r2, #0]
 80073f6:	d1dd      	bne.n	80073b4 <_free_r+0x28>
 80073f8:	681c      	ldr	r4, [r3, #0]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	6053      	str	r3, [r2, #4]
 80073fe:	4421      	add	r1, r4
 8007400:	6011      	str	r1, [r2, #0]
 8007402:	e7d7      	b.n	80073b4 <_free_r+0x28>
 8007404:	d902      	bls.n	800740c <_free_r+0x80>
 8007406:	230c      	movs	r3, #12
 8007408:	6003      	str	r3, [r0, #0]
 800740a:	e7d3      	b.n	80073b4 <_free_r+0x28>
 800740c:	6825      	ldr	r5, [r4, #0]
 800740e:	1961      	adds	r1, r4, r5
 8007410:	428b      	cmp	r3, r1
 8007412:	bf04      	itt	eq
 8007414:	6819      	ldreq	r1, [r3, #0]
 8007416:	685b      	ldreq	r3, [r3, #4]
 8007418:	6063      	str	r3, [r4, #4]
 800741a:	bf04      	itt	eq
 800741c:	1949      	addeq	r1, r1, r5
 800741e:	6021      	streq	r1, [r4, #0]
 8007420:	6054      	str	r4, [r2, #4]
 8007422:	e7c7      	b.n	80073b4 <_free_r+0x28>
 8007424:	b003      	add	sp, #12
 8007426:	bd30      	pop	{r4, r5, pc}
 8007428:	20004a78 	.word	0x20004a78

0800742c <_read_r>:
 800742c:	b538      	push	{r3, r4, r5, lr}
 800742e:	4d07      	ldr	r5, [pc, #28]	; (800744c <_read_r+0x20>)
 8007430:	4604      	mov	r4, r0
 8007432:	4608      	mov	r0, r1
 8007434:	4611      	mov	r1, r2
 8007436:	2200      	movs	r2, #0
 8007438:	602a      	str	r2, [r5, #0]
 800743a:	461a      	mov	r2, r3
 800743c:	f7f9 fb7d 	bl	8000b3a <_read>
 8007440:	1c43      	adds	r3, r0, #1
 8007442:	d102      	bne.n	800744a <_read_r+0x1e>
 8007444:	682b      	ldr	r3, [r5, #0]
 8007446:	b103      	cbz	r3, 800744a <_read_r+0x1e>
 8007448:	6023      	str	r3, [r4, #0]
 800744a:	bd38      	pop	{r3, r4, r5, pc}
 800744c:	20004eac 	.word	0x20004eac

08007450 <_fstat_r>:
 8007450:	b538      	push	{r3, r4, r5, lr}
 8007452:	4d07      	ldr	r5, [pc, #28]	; (8007470 <_fstat_r+0x20>)
 8007454:	2300      	movs	r3, #0
 8007456:	4604      	mov	r4, r0
 8007458:	4608      	mov	r0, r1
 800745a:	4611      	mov	r1, r2
 800745c:	602b      	str	r3, [r5, #0]
 800745e:	f7f9 fbb1 	bl	8000bc4 <_fstat>
 8007462:	1c43      	adds	r3, r0, #1
 8007464:	d102      	bne.n	800746c <_fstat_r+0x1c>
 8007466:	682b      	ldr	r3, [r5, #0]
 8007468:	b103      	cbz	r3, 800746c <_fstat_r+0x1c>
 800746a:	6023      	str	r3, [r4, #0]
 800746c:	bd38      	pop	{r3, r4, r5, pc}
 800746e:	bf00      	nop
 8007470:	20004eac 	.word	0x20004eac

08007474 <_isatty_r>:
 8007474:	b538      	push	{r3, r4, r5, lr}
 8007476:	4d06      	ldr	r5, [pc, #24]	; (8007490 <_isatty_r+0x1c>)
 8007478:	2300      	movs	r3, #0
 800747a:	4604      	mov	r4, r0
 800747c:	4608      	mov	r0, r1
 800747e:	602b      	str	r3, [r5, #0]
 8007480:	f7f9 fbb0 	bl	8000be4 <_isatty>
 8007484:	1c43      	adds	r3, r0, #1
 8007486:	d102      	bne.n	800748e <_isatty_r+0x1a>
 8007488:	682b      	ldr	r3, [r5, #0]
 800748a:	b103      	cbz	r3, 800748e <_isatty_r+0x1a>
 800748c:	6023      	str	r3, [r4, #0]
 800748e:	bd38      	pop	{r3, r4, r5, pc}
 8007490:	20004eac 	.word	0x20004eac

08007494 <_init>:
 8007494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007496:	bf00      	nop
 8007498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800749a:	bc08      	pop	{r3}
 800749c:	469e      	mov	lr, r3
 800749e:	4770      	bx	lr

080074a0 <_fini>:
 80074a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074a2:	bf00      	nop
 80074a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074a6:	bc08      	pop	{r3}
 80074a8:	469e      	mov	lr, r3
 80074aa:	4770      	bx	lr
